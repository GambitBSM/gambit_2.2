<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="lester__mt2__bisect_8h" kind="file" language="C++">
    <compoundname>lester_mt2_bisect.h</compoundname>
    <includes local="no">cmath</includes>
    <includes local="no">iostream</includes>
    <includes local="no">iomanip</includes>
    <includes local="no">cassert</includes>
    <includedby refid="Analysis__ATLAS__13TeV__2bMET__36invfb_8cpp" local="yes">C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/analyses/Analysis_ATLAS_13TeV_2bMET_36invfb.cpp</includedby>
    <incdepgraph>
      <node id="1">
        <label>C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/lester_mt2_bisect.h</label>
        <link refid="lester__mt2__bisect_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>cassert</label>
      </node>
      <node id="2">
        <label>cmath</label>
      </node>
      <node id="4">
        <label>iomanip</label>
      </node>
      <node id="3">
        <label>iostream</label>
      </node>
    </incdepgraph>
    <innerclass refid="structLester_1_1EllipseParams" prot="public">Lester::EllipseParams</innerclass>
    <innerclass refid="classasymm__mt2__lester__bisect" prot="public">asymm_mt2_lester_bisect</innerclass>
    <innernamespace refid="namespaceLester">Lester</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="lester__mt2__bisect_8h_1a25cd4f947855d8b863ff51e920514d16" prot="public" static="no">
        <name>ASYMM_MT2_BISECT_H</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/lester_mt2_bisect.h" line="287" column="9" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/lester_mt2_bisect.h" bodystart="287" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="lester__mt2__bisect_8h_1af31f8c017894aee6db1796f80fbd1a17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void myversion</definition>
        <argsstring>()</argsstring>
        <name>myversion</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/lester_mt2_bisect.h" line="535" column="6" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/lester_mt2_bisect.h" bodystart="535" bodyend="539"/>
      </memberdef>
      <memberdef kind="function" id="lester__mt2__bisect_8h_1a26ee32886634b411522d45bdb495fe2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double MT</definition>
        <argsstring>(double px1, double px2, double py1, double py2, double m1, double m2)</argsstring>
        <name>MT</name>
        <param>
          <type>double</type>
          <declname>px1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>px2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>py1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>py2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>m2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/lester_mt2_bisect.h" line="541" column="8" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/lester_mt2_bisect.h" bodystart="541" bodyend="547"/>
      </memberdef>
      <memberdef kind="function" id="lester__mt2__bisect_8h_1abdfc947dddf8988c4f9625183f7bd2c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; double, double &gt;</type>
        <definition>std::pair&lt; double, double &gt; ben_findsols</definition>
        <argsstring>(double MT2, double px, double py, double visM, double Ma, double pxb, double pyb, double metx, double mety, double visMb, double Mb)</argsstring>
        <name>ben_findsols</name>
        <param>
          <type>double</type>
          <declname>MT2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>px</declname>
        </param>
        <param>
          <type>double</type>
          <declname>py</declname>
        </param>
        <param>
          <type>double</type>
          <declname>visM</declname>
        </param>
        <param>
          <type>double</type>
          <declname>Ma</declname>
        </param>
        <param>
          <type>double</type>
          <declname>pxb</declname>
        </param>
        <param>
          <type>double</type>
          <declname>pyb</declname>
        </param>
        <param>
          <type>double</type>
          <declname>metx</declname>
        </param>
        <param>
          <type>double</type>
          <declname>mety</declname>
        </param>
        <param>
          <type>double</type>
          <declname>visMb</declname>
        </param>
        <param>
          <type>double</type>
          <declname>Mb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/lester_mt2_bisect.h" line="549" column="13" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/lester_mt2_bisect.h" bodystart="549" bodyend="622"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/><sp/>Copyright<sp/>2014,<sp/>Christopher<sp/>Lester,<sp/>Univeristy<sp/>of<sp/>Cambridge</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/><sp/>version<sp/>5:<sp/>arXiv:1411.4312v5</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>*<sp/>made<sp/>more<sp/>portable<sp/>by<sp/>removal<sp/>of<sp/>use<sp/>of<sp/>__FILE__<sp/>and<sp/>__LINE__<sp/>macros<sp/>in<sp/>debug<sp/>statement</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>*<sp/>made<sp/>fewer<sp/>demands<sp/>on<sp/>poor<sp/>C++<sp/>compilers<sp/>(ROOT5/CINT)<sp/>by<sp/>removal<sp/>of<sp/>certain<sp/>inline<sp/>statements</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>*<sp/>added<sp/>this<sp/>changelog!</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/>version<sp/>4:<sp/>arXiv:1411.4312v4</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>*<sp/>added<sp/>copyright<sp/>information</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/>version<sp/>3:<sp/>arXiv:1411.4312v3</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>*<sp/>added<sp/>option<sp/>to<sp/>turn<sp/>on/off<sp/>deci-sectioning</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>*<sp/>made<sp/>code<sp/>slightly<sp/>slower<sp/>for<sp/>readability<sp/>gain</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/><sp/>version<sp/>2:<sp/>arXiv:1411.4312v2</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>*<sp/>no<sp/>changes<sp/>w.r.t.<sp/>version<sp/>1</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/><sp/>version<sp/>1:<sp/>arXiv:1411.4312v1</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>*<sp/>initial<sp/>public<sp/>release</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/><sp/>This<sp/>file<sp/>will<sp/>let<sp/>you<sp/>calculate<sp/>MT2<sp/>or<sp/>Asymmetric<sp/>MT2<sp/>relatively<sp/>easily.</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/><sp/>An<sp/>example<sp/>showing<sp/>how<sp/>to<sp/>do<sp/>so,<sp/>may<sp/>be<sp/>found<sp/>below<sp/>this<sp/>copyright<sp/>message.</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/><sp/>(Note<sp/>that<sp/>this<sp/>is<sp/>a<sp/>low-level<sp/>library.<sp/><sp/>Various<sp/>wrappers<sp/>exist<sp/>around</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/><sp/><sp/>it<sp/>to<sp/>allow<sp/>easier<sp/>interfacing<sp/>to<sp/>ROOT<sp/>or<sp/>ATLAS<sp/>code.)</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/><sp/><sp/>If<sp/>you<sp/>use<sp/>this<sp/>implementation,<sp/>please<sp/>cite:</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/><sp/><sp/>http://arxiv.org/abs/1411.4312</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*<sp/><sp/><sp/>as<sp/>the<sp/>paper<sp/>documenting<sp/>this<sp/>particular<sp/>implementation.</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*<sp/><sp/><sp/>You<sp/>might<sp/>also<sp/>need<sp/>to<sp/>cite:</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*<sp/><sp/><sp/>http://arxiv.org/abs/hep-ph/9906349<sp/></highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*<sp/><sp/><sp/>Journal<sp/>reference:<sp/>Phys.Lett.B463:99-103,1999</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*<sp/><sp/><sp/>DOI:<sp/>10.1016/S0370-2693(99)00945-4</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*<sp/><sp/><sp/>as<sp/>the<sp/>paper<sp/>defining<sp/>MT2.<sp/></highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*<sp/>Here<sp/>is<sp/>an<sp/>example<sp/>of<sp/>it&apos;s<sp/>use:</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/></highlight></codeline>
<codeline lineno="45"><highlight class="comment"></highlight></codeline>
<codeline lineno="46"><highlight class="comment">double<sp/>mVisA<sp/>=<sp/>10;<sp/>//<sp/>mass<sp/>of<sp/>visible<sp/>object<sp/>on<sp/>side<sp/>A.<sp/><sp/>Must<sp/>be<sp/>&gt;=0.</highlight></codeline>
<codeline lineno="47"><highlight class="comment">double<sp/>pxA<sp/>=<sp/>20;<sp/>//<sp/>x<sp/>momentum<sp/>of<sp/>visible<sp/>object<sp/>on<sp/>side<sp/>A.</highlight></codeline>
<codeline lineno="48"><highlight class="comment">double<sp/>pyA<sp/>=<sp/>30;<sp/>//<sp/>y<sp/>momentum<sp/>of<sp/>visible<sp/>object<sp/>on<sp/>side<sp/>A.</highlight></codeline>
<codeline lineno="49"><highlight class="comment"></highlight></codeline>
<codeline lineno="50"><highlight class="comment">double<sp/>mVisB<sp/>=<sp/>10;<sp/>//<sp/>mass<sp/>of<sp/>visible<sp/>object<sp/>on<sp/>side<sp/>B.<sp/><sp/>Must<sp/>be<sp/>&gt;=0.</highlight></codeline>
<codeline lineno="51"><highlight class="comment">double<sp/>pxB<sp/>=<sp/>-20;<sp/>//<sp/>x<sp/>momentum<sp/>of<sp/>visible<sp/>object<sp/>on<sp/>side<sp/>B.</highlight></codeline>
<codeline lineno="52"><highlight class="comment">double<sp/>pyB<sp/>=<sp/>-30;<sp/>//<sp/>y<sp/>momentum<sp/>of<sp/>visible<sp/>object<sp/>on<sp/>side<sp/>B.</highlight></codeline>
<codeline lineno="53"><highlight class="comment"></highlight></codeline>
<codeline lineno="54"><highlight class="comment">double<sp/>pxMiss<sp/>=<sp/>-5;<sp/>//<sp/>x<sp/>component<sp/>of<sp/>missing<sp/>transverse<sp/>momentum.</highlight></codeline>
<codeline lineno="55"><highlight class="comment">double<sp/>pyMiss<sp/>=<sp/>-5;<sp/>//<sp/>y<sp/>component<sp/>of<sp/>missing<sp/>transverse<sp/>momentum.</highlight></codeline>
<codeline lineno="56"><highlight class="comment"></highlight></codeline>
<codeline lineno="57"><highlight class="comment">double<sp/>chiA<sp/>=<sp/>4;<sp/>//<sp/>hypothesised<sp/>mass<sp/>of<sp/>invisible<sp/>on<sp/>side<sp/>A.<sp/><sp/>Must<sp/>be<sp/>&gt;=0.</highlight></codeline>
<codeline lineno="58"><highlight class="comment">double<sp/>chiB<sp/>=<sp/>7;<sp/>//<sp/>hypothesised<sp/>mass<sp/>of<sp/>invisible<sp/>on<sp/>side<sp/>B.<sp/><sp/>Must<sp/>be<sp/>&gt;=0.</highlight></codeline>
<codeline lineno="59"><highlight class="comment"></highlight></codeline>
<codeline lineno="60"><highlight class="comment">double<sp/>desiredPrecisionOnMt2<sp/>=<sp/>0;<sp/>//<sp/>Must<sp/>be<sp/>&gt;=0.<sp/><sp/>If<sp/>0<sp/>alg<sp/>aims<sp/>for<sp/>machine<sp/>precision.<sp/><sp/>if<sp/>&gt;0,<sp/>MT2<sp/>computed<sp/>to<sp/>supplied<sp/>absolute<sp/>precision.</highlight></codeline>
<codeline lineno="61"><highlight class="comment"></highlight></codeline>
<codeline lineno="62"><highlight class="comment">//<sp/>asymm_mt2_lester_bisect::disableCopyrightMessage();</highlight></codeline>
<codeline lineno="63"><highlight class="comment"></highlight></codeline>
<codeline lineno="64"><highlight class="comment">double<sp/>MT2<sp/>=<sp/><sp/>asymm_mt2_lester_bisect::get_mT2(</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mVisA,<sp/>pxA,<sp/>pyA,</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mVisB,<sp/>pxB,<sp/>pyB,</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxMiss,<sp/>pyMiss,</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>chiA,<sp/>chiB,</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>desiredPrecisionOnMt2);</highlight></codeline>
<codeline lineno="70"><highlight class="comment"></highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>LESTER_TESTWHETHERELLIPSESAREDISJOINT_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LESTER_TESTWHETHERELLIPSESAREDISJOINT_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>for<sp/>fabs(<sp/>...<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/>*<sp/>The</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>ellipsesAreDisjoint(const<sp/>EllipseParams<sp/>&amp;<sp/>e1,<sp/>const<sp/>EllipseParams<sp/>&amp;<sp/>e2);</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/>*<sp/>function<sp/>determines<sp/>whether<sp/>two<sp/>ellipses<sp/>(not<sp/>both<sp/>singular)<sp/>are<sp/>disjoint.</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/>*<sp/>Ellipses<sp/>are<sp/>assumed<sp/>to<sp/>be<sp/>solid<sp/>objects<sp/>with<sp/>a<sp/>filled<sp/>interior.</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/>*<sp/>They<sp/>are<sp/>disjoint<sp/>it<sp/>no<sp/>part<sp/>of<sp/>their<sp/>interiors<sp/>overlap.</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/>*<sp/>Singular<sp/>(in<sp/>this<sp/>context)<sp/>is<sp/>defined<sp/>below.</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/>*<sp/>It<sp/>uses<sp/>the<sp/>method<sp/>of:</highlight></codeline>
<codeline lineno="90"><highlight class="comment"></highlight></codeline>
<codeline lineno="91"><highlight class="comment">Computer<sp/>Aided<sp/>Geometric<sp/>Design<sp/>23<sp/>(2006)<sp/>324–350</highlight></codeline>
<codeline lineno="92"><highlight class="comment">A<sp/>new<sp/>approach<sp/>to<sp/>characterizing<sp/>the<sp/>relative<sp/>position<sp/>of<sp/>two<sp/>ellipses<sp/>depending<sp/>on<sp/>one<sp/>parameter</highlight></codeline>
<codeline lineno="93"><highlight class="comment">Fernando<sp/>Etayo<sp/>1,3,<sp/>Laureano<sp/>Gonzalez-Vega<sp/>∗,2,3,<sp/>Natalia<sp/>del<sp/>Rio<sp/>3</highlight></codeline>
<codeline lineno="94"><highlight class="comment">Departamento<sp/>de<sp/>Matematicas,<sp/>Estadistica<sp/>y<sp/>Computacion,<sp/>Universidad<sp/>de<sp/>Cantabria,<sp/>Spain</highlight></codeline>
<codeline lineno="95"><highlight class="comment">Received<sp/>15<sp/>September<sp/>2004;<sp/>received<sp/>in<sp/>revised<sp/>form<sp/>2<sp/>November<sp/>2005;<sp/>accepted<sp/>10<sp/>January<sp/>2006<sp/>Available<sp/>online<sp/>28<sp/>February<sp/>2006</highlight></codeline>
<codeline lineno="96"><highlight class="comment"></highlight></codeline>
<codeline lineno="97"><highlight class="comment">pointed<sp/>out<sp/>to<sp/>me<sp/>by<sp/>Gary<sp/>B.<sp/>Huges<sp/>and<sp/>Mohcine<sp/>Chraibi<sp/>authors<sp/>of</highlight></codeline>
<codeline lineno="98"><highlight class="comment"></highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/>Comput<sp/>Visual<sp/>Sci<sp/>(2012)<sp/>15:291–301<sp/>DOI<sp/>10.1007/s00791-013-0214-3</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/>Calculating<sp/>ellipse<sp/>overlap<sp/>areas<sp/>Gary<sp/>B.<sp/>Hughes<sp/>·<sp/>Mohcine<sp/>Chraibi</highlight></codeline>
<codeline lineno="101"><highlight class="comment"></highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/>*<sp/>Note:</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/>*<sp/>Though<sp/>the<sp/>paper<sp/>above<sp/>talks<sp/>only<sp/>about<sp/>ellipses,<sp/>from<sp/>playing<sp/>with<sp/>some<sp/>test<sp/>cases,<sp/>I<sp/>(CGL)<sp/>have<sp/>conjectured<sp/>that<sp/>the<sp/>algorithm<sp/>actually<sp/>works<sp/>well<sp/>even<sp/>if<sp/>the<sp/>conics<sp/>are<sp/>parabolas<sp/>provided<sp/>that<sp/>the<sp/>axx&gt;0&amp;&amp;ayy&gt;0<sp/>test<sp/>is<sp/>reduced<sp/>to<sp/>axx&gt;=0&amp;&amp;ayy&gt;=0&amp;&amp;axx*ayy!=0<sp/>...<sp/>which<sp/>is<sp/>true<sp/>is<sp/>good<sp/>news<sp/>for<sp/>the<sp/>similicity<sp/>of<sp/>the<sp/>MT2<sp/>calculator<sp/>...<sp/>as<sp/>the<sp/>MT2<sp/>calculator<sp/>will<sp/>not<sp/>need<sp/>to<sp/>distinguish<sp/>these<sp/>two<sp/>possibilities.<sp/><sp/>In<sp/>a<sp/>private<sp/>communication<sp/>between<sp/>me<sp/>(CGL)<sp/>and<sp/>the<sp/><sp/>authors<sp/>of<sp/>Computer<sp/>Aided<sp/>Geometric<sp/>Design<sp/>23<sp/>(2006)<sp/>324–350,<sp/>the<sp/>authors<sp/>have<sp/>indicated<sp/>that<sp/>it<sp/>is<sp/>not<sp/>unreasonable<sp/>to<sp/>believe<sp/>that<sp/>the<sp/>code<sp/>does<sp/>indeed<sp/>work<sp/>on<sp/>the<sp/>parabolica<sp/>cases<sp/>too.<sp/><sp/>This<sp/>algorithm<sp/>relies<sp/>on<sp/>that<sp/>generalisation,<sp/>which<sp/>may<sp/>be<sp/>the<sp/>subject<sp/>of<sp/>a<sp/>paper<sp/>(to<sp/>appear)<sp/>from<sp/>Etayo<sp/>and<sp/>Gonzalez-Vega.</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/>*<sp/>Definition:<sp/>an<sp/>ellipse<sp/>is<sp/>defined<sp/>with<sp/>respect<sp/>to<sp/>cartesian<sp/>co-ordinates<sp/>(x,y)<sp/>by<sp/>an<sp/>equation<sp/>of<sp/>the<sp/>form;</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/>*<sp/>xVec^T<sp/>A<sp/>xVec<sp/>=<sp/>0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1)</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/>*<sp/>where<sp/>xVec<sp/>is<sp/>a<sp/>columnar<sp/>three<sp/>vec<sp/>containing<sp/>(x,y,1)<sp/>and<sp/>where<sp/>A<sp/>is<sp/>a<sp/>symmetric<sp/>matrix<sp/>having<sp/>elements:</highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>[<sp/>axx<sp/>axy<sp/>ax<sp/><sp/>]</highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/>*<sp/><sp/><sp/>A<sp/>=<sp/>[<sp/>axy<sp/>ayy<sp/>ay<sp/><sp/>]</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>[<sp/>ax<sp/><sp/>ay<sp/><sp/>a<sp/><sp/><sp/>].</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/>*<sp/>Therfore<sp/>the<sp/>ellipse<sp/>equation<sp/>would<sp/>look<sp/>like:</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/>*<sp/>axx<sp/>x^2<sp/>+<sp/>2<sp/>axy<sp/>x<sp/>y<sp/>+<sp/>ayy<sp/>y^2<sp/>+<sp/>2<sp/>ax<sp/>x<sp/>+<sp/>2<sp/>ay<sp/>y<sp/>+<sp/>a<sp/>=<sp/>0.</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/>*<sp/>Note<sp/>that<sp/>this<sp/>parametrisation<sp/>has<sp/>one<sp/>parameter<sp/>too<sp/>many<sp/>...<sp/>the<sp/>&quot;A&quot;-matrix<sp/>can<sp/>be<sp/>multiplied<sp/>by<sp/>a<sp/>non-zero<sp/>constant,<sp/>and<sp/>the<sp/>ellipse<sp/>is<sp/>not<sp/>changed.</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/>*<sp/>Etayo<sp/>et<sp/>al&apos;s<sp/>implementation<sp/>REQUIRES<sp/>that<sp/>axx<sp/>and<sp/>ayy<sp/>be<sp/>strictly<sp/>positive.</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/>*<sp/>The<sp/>implementation<sp/>herein<sp/>doesn&apos;t<sp/>quite<sp/>enforce<sp/>that.<sp/>The<sp/>implementation<sp/>herein<sp/>allows<sp/>axx<sp/>or<sp/>ayy<sp/>to<sp/>be<sp/>non-negative<sp/>....<sp/>and<sp/>it<sp/>is<sp/>left<sp/>to<sp/>the<sp/>user<sp/>to<sp/>ensure<sp/>that<sp/>axx<sp/>and<sp/>ayy<sp/>are<sp/>not<sp/>exactly<sp/>zero.</highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/>*<sp/>Note<sp/>also<sp/>that<sp/>(1)<sp/>is<sp/>general<sp/>enough<sp/>to<sp/>contain<sp/>all<sp/>conic<sp/>sections,<sp/>so<sp/>it<sp/>is<sp/>left<sp/>to<sp/>the<sp/>user<sp/>to<sp/>ensure<sp/>that<sp/>only<sp/>values<sp/>of<sp/>A<sp/>consistent</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/>*<sp/>with<sp/>(non-singluar)<sp/>ellipses<sp/>are<sp/>fed<sp/>into<sp/>the<sp/>program<sp/>below.<sp/><sp/>For<sp/>our<sp/>purposes,<sp/>an<sp/>ellipse<sp/>is<sp/>&quot;singular&quot;<sp/>iff<sp/>coeffLamPow3<sp/>(see<sp/>below)<sp/>is<sp/>zero.</highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Lester<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130" refid="structLester_1_1EllipseParams" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structLester_1_1EllipseParams" kindref="compound">EllipseParams</ref><sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Constructor<sp/>for<sp/>non-degenerate<sp/>ellipses:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Ellipse<sp/>is<sp/>represented<sp/>algebraically<sp/>by:</highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/><sp/><sp/>*<sp/>c_xx<sp/>x^2<sp/>+<sp/>2<sp/>c_xy<sp/>x<sp/>y<sp/>+<sp/>c_yy<sp/>y^2<sp/>+<sp/>2<sp/>c_x<sp/>x<sp/>+<sp/>2<sp/>c_y<sp/>y<sp/>+<sp/>c<sp/>=<sp/>0.</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><ref refid="structLester_1_1EllipseParams" kindref="compound">EllipseParams</ref>(</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>c_xx2,</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>c_yy2,</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>c_xy2,</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>c_x2,</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>c_y2,</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>c2)<sp/>:</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>c_xx(c_xx2),</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>c_yy(c_yy2),</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>c_xy(c_xy2),</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>c_x(c_x2),</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>c_y(c_y2),</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>c(c2)<sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Etayo<sp/>et<sp/>al<sp/>REQUIRE<sp/>that<sp/>c_xx<sp/>and<sp/>c_yy<sp/>are<sp/>non-negative,<sp/>so:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c_xx&lt;0<sp/>||<sp/>c_yy&lt;0)<sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;precondition<sp/>violation&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>setDet();</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><ref refid="structLester_1_1EllipseParams" kindref="compound">EllipseParams</ref>()<sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setDet()<sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>det<sp/>=<sp/>(2.0*c_x*c_xy*c_y<sp/>+<sp/>c*c_xx*c_yy<sp/>-<sp/>c_yy*c_x*c_x<sp/>-<sp/>c*c_xy*c_xy<sp/>-<sp/>c_xx*c_y*c_y)<sp/>;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Consstructor<sp/>for<sp/>degenerate<sp/>ellipse<sp/>(i.e.<sp/>a<sp/>&quot;dot&quot;<sp/>at<sp/>(x0,y0)<sp/>).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><ref refid="structLester_1_1EllipseParams" kindref="compound">EllipseParams</ref>(</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x0,</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y0)<sp/>:</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>c_xx(1),</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>c_yy(1),</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>c_xy(0),</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>c_x(-x0),</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>c_y(-y0),</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>c(x0*x0<sp/>+<sp/>y0*y0),</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>det(0)<sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lesterFactor(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structLester_1_1EllipseParams" kindref="compound">EllipseParams</ref><sp/>&amp;<sp/>e2)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structLester_1_1EllipseParams" kindref="compound">EllipseParams</ref><sp/>&amp;<sp/>e1<sp/>=<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ans<sp/><sp/>=<sp/>e1.c_xx*e1.c_yy*e2.c<sp/>+<sp/>2.0*e1.c_xy*e1.c_y*e2.c_x<sp/>-<sp/>2.0*e1.c_x*e1.c_yy*e2.c_x<sp/>+<sp/>e1.c*e1.c_yy*e2.c_xx<sp/>-<sp/>2.0*e1.c*e1.c_xy*e2.c_xy<sp/>+<sp/>2.0*e1.c_x*e1.c_y*e2.c_xy<sp/>+<sp/>2.0*e1.c_x*e1.c_xy*e2.c_y<sp/>-<sp/>2.0*e1.c_xx*e1.c_y*e2.c_y<sp/>+<sp/>e1.c*e1.c_xx*e2.c_yy<sp/>-<sp/>e2.c_yy*(e1.c_x*e1.c_x)<sp/>-<sp/>e2.c*(e1.c_xy*e1.c_xy)<sp/>-<sp/>e2.c_xx*(e1.c_y*e1.c_y);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ans;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structLester_1_1EllipseParams" kindref="compound">EllipseParams</ref><sp/>&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c_xx<sp/>==<sp/>other.c_xx<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c_yy<sp/>==<sp/>other.c_yy<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c_xy<sp/>==<sp/>other.c_xy<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c_x<sp/>==<sp/>other.c_x<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c_y<sp/>==<sp/>other.c_y<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>==<sp/>other.c;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>c_xx;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>c_yy;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>c_xy;<sp/></highlight><highlight class="comment">//<sp/>note<sp/>factor<sp/>of<sp/>2<sp/>above</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>c_x;<sp/><sp/></highlight><highlight class="comment">//<sp/>note<sp/>factor<sp/>of<sp/>2<sp/>above</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>c_y;<sp/><sp/></highlight><highlight class="comment">//<sp/>note<sp/>factor<sp/>of<sp/>2<sp/>above</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>det;<sp/></highlight><highlight class="comment">//<sp/>The<sp/>determinant<sp/>of<sp/>the<sp/>3x3<sp/>conic<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal">};</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>the<sp/>interface:<sp/>users<sp/>should<sp/>call<sp/>this<sp/>function:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ellipsesAreDisjoint(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structLester_1_1EllipseParams" kindref="compound">EllipseParams</ref><sp/>&amp;<sp/>e1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structLester_1_1EllipseParams" kindref="compound">EllipseParams</ref><sp/>&amp;<sp/>e2);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>an<sp/>implementation<sp/>thing:<sp/>users<sp/>should<sp/>not<sp/>call<sp/>it:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>__private_ellipsesAreDisjoint(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>coeffLamPow3,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>coeffLamPow2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>coeffLamPow1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>coeffLamPow0);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ellipsesAreDisjoint(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structLester_1_1EllipseParams" kindref="compound">EllipseParams</ref><sp/>&amp;<sp/>e1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structLester_1_1EllipseParams" kindref="compound">EllipseParams</ref><sp/>&amp;<sp/>e2)<sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>We<sp/>want<sp/>to<sp/>construct<sp/>the<sp/>polynomial<sp/>&quot;Det(lamdba<sp/>A<sp/>+<sp/>B)&quot;<sp/>where<sp/>A<sp/>and<sp/>B<sp/>are<sp/>the<sp/>3x3<sp/>matrices<sp/>associated<sp/>with<sp/>e1<sp/>and<sp/>e2,<sp/>and<sp/>we<sp/>want<sp/>to<sp/>get<sp/>that</highlight></codeline>
<codeline lineno="207"><highlight class="comment"><sp/><sp/>polynomial<sp/>in<sp/>the<sp/>form<sp/>lambda^3<sp/>+<sp/>a<sp/>lambda^2<sp/>+<sp/>b<sp/>lambda<sp/>+<sp/>c.</highlight></codeline>
<codeline lineno="208"><highlight class="comment"></highlight></codeline>
<codeline lineno="209"><highlight class="comment"></highlight></codeline>
<codeline lineno="210"><highlight class="comment"><sp/><sp/>Note<sp/>that<sp/>by<sp/>default<sp/>we<sp/>will<sp/>not<sp/>have<sp/>unity<sp/>as<sp/>the<sp/>coefficient<sp/>of<sp/>the<sp/>lambda^3<sp/>term,<sp/>however<sp/>the<sp/>redundancy<sp/>in<sp/>the<sp/>parametrisation<sp/>of<sp/>A<sp/>and<sp/>B<sp/>allows<sp/>us<sp/>to<sp/>scale<sp/>the<sp/>whole<sp/>ply<sp/>until<sp/>the<sp/>first<sp/>term<sp/>does<sp/>have<sp/>a<sp/>unit<sp/>coefficient.</highlight></codeline>
<codeline lineno="211"><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e1==e2)<sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Probably<sp/>won&apos;t<sp/>catch<sp/>many<sp/>cases,<sp/>but<sp/>may<sp/>as<sp/>well<sp/>have<sp/>it<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>first<sp/>get<sp/>unscaled<sp/>terms:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>coeffLamPow3<sp/>=<sp/>e1.det;<sp/></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>this<sp/>is<sp/>the<sp/>determinant<sp/>of<sp/>the<sp/>symmetric<sp/>matrix<sp/>associated<sp/>with<sp/>e1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>coeffLamPow2<sp/>=<sp/>e1.lesterFactor(e2);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>coeffLamPow1<sp/>=<sp/>e2.lesterFactor(e1);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>coeffLamPow0<sp/>=<sp/>e2.det;<sp/></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>this<sp/>is<sp/>the<sp/>determinant<sp/>of<sp/>the<sp/>symmetric<sp/>matrix<sp/>associated<sp/>with<sp/>e2.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Since<sp/>question<sp/>is<sp/>&quot;symmetric&quot;<sp/>and<sp/>since<sp/>we<sp/>need<sp/>to<sp/>dovide<sp/>by<sp/>coeffLamPow3<sp/>...<sp/>do<sp/>this<sp/>the<sp/>way<sp/>round<sp/>that<sp/>involves<sp/>dividing<sp/>by<sp/>the<sp/>largest<sp/>number:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(coeffLamPow3)<sp/>&gt;=<sp/>fabs(coeffLamPow0))<sp/>{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>__private_ellipsesAreDisjoint(coeffLamPow3,<sp/>coeffLamPow2,<sp/>coeffLamPow1,<sp/>coeffLamPow0);<sp/></highlight><highlight class="comment">//<sp/>normal<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>__private_ellipsesAreDisjoint(coeffLamPow0,<sp/>coeffLamPow1,<sp/>coeffLamPow2,<sp/>coeffLamPow3);<sp/></highlight><highlight class="comment">//<sp/>reversed<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="230"><highlight class="normal">}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>__private_ellipsesAreDisjoint(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>coeffLamPow3,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>coeffLamPow2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>coeffLamPow1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>coeffLamPow0)<sp/>{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>precondition<sp/>of<sp/>being<sp/>called:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//assert(fabs(coeffLamPow3)&gt;=fabs(coeffLamPow0));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(coeffLamPow3==0)<sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>ellipses<sp/>were<sp/>singular<sp/>in<sp/>some<sp/>way.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Cannot<sp/>determine<sp/>whether<sp/>they<sp/>are<sp/>overlapping<sp/>or<sp/>not.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>scale<sp/>terms<sp/>to<sp/>monomial<sp/>form:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>coeffLamPow2<sp/>/<sp/>coeffLamPow3;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>b<sp/>=<sp/>coeffLamPow1<sp/>/<sp/>coeffLamPow3;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>coeffLamPow0<sp/>/<sp/>coeffLamPow3;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LESTER_DEEP_FIDDLE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>thing1<sp/>=<sp/>-3.0*b<sp/>+<sp/>a*a;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>thing2<sp/>=<sp/>-27.0*c*c<sp/>+<sp/>18.0*c*a*b<sp/>+<sp/>a*a*b*b<sp/>-<sp/>4.0*a*a*a*c<sp/>-<sp/>4.0*b*b*b;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>(thing1&gt;0)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&amp;&amp;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(thing2&gt;0)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&amp;&amp;<sp/>[[<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(a&gt;=0)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(3.0*a*c<sp/>+<sp/>b*a*a<sp/>-<sp/>4.0*b*b&lt;0)<sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>]<sp/>or<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;[<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(a&lt;<sp/>0)<sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>]<sp/>=(&quot;</highlight><highlight class="normal">&lt;&lt;<sp/>((a<sp/>&gt;=<sp/>0<sp/></highlight><highlight class="comment">/*&amp;&amp;<sp/>thing1<sp/>&gt;<sp/>0*/</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>3.0*a*c<sp/>+<sp/>b*a*a<sp/>-<sp/>4.0*b*b&lt;<sp/>0<sp/>/*&amp;&amp;<sp/>thing2<sp/>&gt;<sp/>0*/)<sp/>||</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(a<sp/>&lt;<sp/><sp/>0<sp/></highlight><highlight class="comment">/*&amp;&amp;<sp/>thing1<sp/>&gt;<sp/>0*/</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*&amp;&amp;<sp/>thing2<sp/>&gt;<sp/>0*/</highlight><highlight class="normal">))<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)]<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>(a<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>thing1<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>3.0*a*c<sp/>+<sp/>b*a*a<sp/>-<sp/>4.0*b*b&lt;<sp/>0<sp/>&amp;&amp;<sp/>thing2<sp/>&gt;<sp/>0)<sp/>||</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(a<sp/>&lt;<sp/><sp/>0<sp/>&amp;&amp;<sp/>thing1<sp/>&gt;<sp/>0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>thing2<sp/>&gt;<sp/>0))</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>the<sp/>main<sp/>result<sp/>of<sp/>the<sp/>above<sp/>paper:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>thing1<sp/>=<sp/>-3.0*b<sp/>+<sp/>a*a;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(thing1&lt;=0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>thing2<sp/>=<sp/>-27.0*c*c<sp/>+<sp/>18.0*c*a*b<sp/>+<sp/>a*a*b*b<sp/>-<sp/>4.0*a*a*a*c<sp/>-<sp/>4.0*b*b*b;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(thing2&lt;=0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ans<sp/>true<sp/>means<sp/>ellipses<sp/>are<sp/>disjoint:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ans<sp/>=<sp/>(<sp/>(a<sp/>&gt;=<sp/>0<sp/></highlight><highlight class="comment">/*&amp;&amp;<sp/>thing1<sp/>&gt;<sp/>0*/</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>3.0*a*c<sp/>+<sp/>b*a*a<sp/>-<sp/>4.0*b*b&lt;<sp/>0<sp/></highlight><highlight class="comment">/*&amp;&amp;<sp/>thing2<sp/>&gt;<sp/>0*/</highlight><highlight class="normal">)<sp/>||</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(a<sp/>&lt;<sp/><sp/>0<sp/>/*&amp;&amp;<sp/>thing1<sp/>&gt;<sp/>0*/<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*&amp;&amp;<sp/>thing2<sp/>&gt;<sp/>0*/</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ans;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal">}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal">}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ASYMM_MT2_BISECT_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ASYMM_MT2_BISECT_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iomanip&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295" refid="classasymm__mt2__lester__bisect" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classasymm__mt2__lester__bisect" kindref="compound">asymm_mt2_lester_bisect</ref><sp/>{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MT2_ERROR=-1;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>get_mT2(<sp/></highlight><highlight class="comment">//<sp/>returns<sp/>asymmetric<sp/>mT2<sp/>(which<sp/>is<sp/>&gt;=0),<sp/>or<sp/>returns<sp/>a<sp/>negative<sp/>number<sp/>(such<sp/>as<sp/>MT2_ERROR)<sp/>in<sp/>the<sp/>case<sp/>of<sp/>an<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mVis1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>pxVis1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>pyVis1,</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mVis2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>pxVis2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>pyVis2,</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>pxMiss,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>pyMiss,</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mInvis1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mInvis2,</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>desiredPrecisionOnMT2=0,<sp/></highlight><highlight class="comment">//<sp/>This<sp/>must<sp/>be<sp/>non-negative.<sp/><sp/>If<sp/>set<sp/>to<sp/>zero<sp/>(default)<sp/>MT2<sp/>will<sp/>be<sp/>calculated<sp/>to<sp/>the<sp/>highest<sp/>precision<sp/>available<sp/>on<sp/>the<sp/>machine<sp/>(or<sp/>as<sp/>close<sp/>to<sp/>that<sp/>as<sp/>the<sp/>algorithm<sp/>permits).<sp/><sp/>If<sp/>set<sp/>to<sp/>a<sp/>positive<sp/>value,<sp/>MT2<sp/>(note<sp/>that<sp/>is<sp/>MT2,<sp/>not<sp/>its<sp/>square)<sp/>will<sp/>be<sp/>calculated<sp/>to<sp/>within<sp/>+-<sp/>desiredPrecisionOnMT2.<sp/>Note<sp/>that<sp/>by<sp/>requesting<sp/>precision<sp/>of<sp/>+-<sp/>0.01<sp/>GeV<sp/>on<sp/>an<sp/>MT2<sp/>value<sp/>of<sp/>100<sp/>GeV<sp/>can<sp/>result<sp/>in<sp/>speedups<sp/>of<sp/>a<sp/>factor<sp/>of<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>useDeciSectionsInitially=</highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>If<sp/>true,<sp/>interval<sp/>is<sp/>cut<sp/>at<sp/>the<sp/>10%<sp/>point<sp/>until<sp/>first<sp/>acceptance,<sp/>which<sp/>gives<sp/>factor<sp/>3<sp/>increase<sp/>in<sp/>speed<sp/>calculating<sp/>kinematic<sp/>min,<sp/>but<sp/>3%<sp/>slowdown<sp/>for<sp/>events<sp/>in<sp/>the<sp/>bulk.<sp/><sp/>Is<sp/>on<sp/>(true)<sp/>by<sp/>default,<sp/>but<sp/>can<sp/>be<sp/>turned<sp/>off<sp/>by<sp/>setting<sp/>to<sp/>false.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mT2_Sq<sp/>=<sp/>get_mT2_Sq(</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mVis1,<sp/>pxVis1,<sp/>pyVis1,</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mVis2,<sp/>pxVis2,<sp/>pyVis2,</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxMiss,pyMiss,</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mInvis1,<sp/>mInvis2,</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>desiredPrecisionOnMT2,</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>useDeciSectionsInitially);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mT2_Sq==MT2_ERROR)<sp/>{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MT2_ERROR;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sqrt(mT2_Sq);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>disableCopyrightMessage(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>printIfFirst=</highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first<sp/>&amp;&amp;<sp/>printIfFirst)<sp/>{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#=========================================================\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>To<sp/>disable<sp/>this<sp/>message,<sp/>place<sp/>a<sp/>call<sp/>to<sp/>\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/><sp/><sp/><sp/><sp/>asymm_mt2_lester_bisect::disableCopyrightMessage();\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>somewhere<sp/>before<sp/>you<sp/>begin<sp/>to<sp/>calculate<sp/>your<sp/>MT2<sp/>values.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#=========================================================\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>You<sp/>are<sp/>calculating<sp/>symmetric<sp/>or<sp/>asymmetric<sp/>MT2<sp/>using\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>the<sp/>implementation<sp/>defined<sp/>in:\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/><sp/><sp/><sp/><sp/>http://arxiv.org/abs/1411.4312\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>Please<sp/>cite<sp/>the<sp/>paper<sp/>above<sp/>if<sp/>you<sp/>use<sp/>the<sp/>MT2<sp/>values\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>for<sp/>a<sp/>scholarly<sp/>purpose.<sp/>For<sp/>the<sp/>variable<sp/>MT2<sp/>itself,\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>please<sp/>also<sp/>cite:\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/><sp/><sp/><sp/><sp/>http://arxiv.org/abs/hep-ph/9906349\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#=========================================================\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n\n&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::flush;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>get_mT2_Sq(<sp/></highlight><highlight class="comment">//<sp/>returns<sp/>square<sp/>of<sp/>asymmetric<sp/>mT2<sp/>(which<sp/>is<sp/>&gt;=0),<sp/>or<sp/>returns<sp/>a<sp/>negative<sp/>number<sp/>(such<sp/>as<sp/>MT2_ERROR)<sp/>in<sp/>the<sp/>case<sp/>of<sp/>an<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mVis1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>pxVis1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>pyVis1,</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mVis2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>pxVis2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>pyVis2,</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>pxMiss,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>pyMiss,</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mInvis1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mInvis2,</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>desiredPrecisionOnMT2=0,<sp/></highlight><highlight class="comment">//<sp/>This<sp/>must<sp/>be<sp/>non-negative.<sp/><sp/>If<sp/>set<sp/>to<sp/>zero<sp/>(default)<sp/>MT2<sp/>will<sp/>be<sp/>calculated<sp/>to<sp/>the<sp/>highest<sp/>precision<sp/>available<sp/>on<sp/>the<sp/>machine<sp/>(or<sp/>as<sp/>close<sp/>to<sp/>that<sp/>as<sp/>the<sp/>algorithm<sp/>permits).<sp/><sp/>If<sp/>set<sp/>to<sp/>a<sp/>positive<sp/>value,<sp/>MT2<sp/>(note<sp/>that<sp/>is<sp/>MT2,<sp/>not<sp/>its<sp/>square)<sp/>will<sp/>be<sp/>calculated<sp/>to<sp/>within<sp/>+-<sp/>desiredPrecisionOnMT2.<sp/>Note<sp/>that<sp/>by<sp/>requesting<sp/>precision<sp/>of<sp/>+-<sp/>0.01<sp/>GeV<sp/>on<sp/>an<sp/>MT2<sp/>value<sp/>of<sp/>100<sp/>GeV<sp/>can<sp/>resJult<sp/>in<sp/>speedups<sp/>of<sp/>a<sp/>factor<sp/>of<sp/>..</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>useDeciSectionsInitially=</highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>If<sp/>true,<sp/>interval<sp/>is<sp/>cut<sp/>at<sp/>the<sp/>10%<sp/>point<sp/>until<sp/>first<sp/>acceptance,<sp/>which<sp/>gives<sp/>factor<sp/>3<sp/>increase<sp/>in<sp/>speed<sp/>calculating<sp/>kinematic<sp/>min,<sp/>but<sp/>3%<sp/>slowdown<sp/>for<sp/>events<sp/>in<sp/>the<sp/>bulk.<sp/><sp/>Is<sp/>on<sp/>(true)<sp/>by<sp/>default,<sp/>but<sp/>can<sp/>be<sp/>turned<sp/>off<sp/>by<sp/>setting<sp/>to<sp/>false.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>disableCopyrightMessage(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>By<sp/>supplying<sp/>an<sp/>argument<sp/>to<sp/>disable,<sp/>we<sp/>actually<sp/>ask<sp/>for<sp/>the<sp/>message<sp/>to<sp/>be<sp/>printed,<sp/>if<sp/>printing<sp/>is<sp/>not<sp/>already<sp/>disabled.<sp/><sp/><sp/>This<sp/>counterintuitive<sp/>function<sp/>naming<sp/>is<sp/>to<sp/>avoid<sp/>the<sp/>need<sp/>to<sp/>introduce<sp/>static<sp/>variable<sp/>initialisations<sp/>....</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>m1Min<sp/>=<sp/>mVis1+mInvis1;<sp/></highlight><highlight class="comment">//<sp/>when<sp/>parent<sp/>has<sp/>this<sp/>mass,<sp/>ellipse<sp/>1<sp/>has<sp/>smallest<sp/>physical<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>m2Min<sp/>=<sp/>mVis2+mInvis2;<sp/></highlight><highlight class="comment">//<sp/>when<sp/>parent<sp/>has<sp/>this<sp/>mass,<sp/>ellipse<sp/>2<sp/>has<sp/>smallest<sp/>physical<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m1Min&gt;m2Min)<sp/>{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>swap<sp/>1<sp/>and<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>asymm_mt2_lester_bisect::get_mT2_Sq(</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mVis2,<sp/>pxVis2,<sp/>pyVis2,</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mVis1,<sp/>pxVis1,<sp/>pyVis1,</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxMiss,<sp/>pyMiss,</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mInvis2,<sp/>mInvis1,</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>desiredPrecisionOnMT2</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>By<sp/>now,<sp/>we<sp/>can<sp/>be<sp/>sure<sp/>that<sp/>m1Min<sp/>&lt;=<sp/>m2Min</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(m1Min&lt;=m2Min);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mMin<sp/>=<sp/>m2Min;<sp/></highlight><highlight class="comment">//<sp/>when<sp/>parent<sp/>has<sp/>this<sp/>mass,<sp/>both<sp/>ellipses<sp/>are<sp/>physical,<sp/>and<sp/>at<sp/>least<sp/>one<sp/>has<sp/>zero<sp/>size.<sp/><sp/>Note<sp/>that<sp/>the<sp/>name<sp/>&quot;min&quot;<sp/>expresses<sp/>that<sp/>it<sp/>is<sp/>the<sp/>minimum<sp/>potential<sp/>parent<sp/>mass<sp/>we<sp/>should<sp/>consider,<sp/>not<sp/>that<sp/>it<sp/>is<sp/>the<sp/>min<sp/>of<sp/>m1Min<sp/>and<sp/>m2Min.<sp/><sp/>It<sp/>is<sp/>in<sp/>fact<sp/>the<sp/>MAX<sp/>of<sp/>them!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>What<sp/>about<sp/>rounding?<sp/><sp/>What<sp/>about<sp/>idiots<sp/>who<sp/>give<sp/>us<sp/>mVis<sp/>values<sp/>that<sp/>have<sp/>been<sp/>computed<sp/>from<sp/>E^2-p^2<sp/>terms<sp/>that<sp/>are<sp/>perilously<sp/>close<sp/>to<sp/>zero,<sp/>or<sp/>perilously<sp/>degenerate?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>msSq<sp/>=<sp/>mVis1*mVis1;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sx<sp/>=<sp/>pxVis1;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sy<sp/>=<sp/>pyVis1;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mpSq<sp/>=<sp/>mInvis1*mInvis1;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mtSq<sp/>=<sp/>mVis2*mVis2;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tx<sp/>=<sp/>pxVis2;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ty<sp/>=<sp/>pyVis2;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mqSq<sp/>=<sp/>mInvis2*mInvis2;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sSq<sp/>=<sp/>sx*sx<sp/>+<sp/>sy*sy;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tSq<sp/>=<sp/>tx*tx<sp/>+<sp/>ty*ty;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>pMissSq<sp/>=<sp/>pxMiss*pxMiss<sp/>+<sp/>pyMiss*pyMiss;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>massSqSum<sp/>=<sp/>msSq<sp/>+<sp/>mtSq<sp/>+<sp/>mpSq<sp/>+<sp/>mqSq;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>scaleSq<sp/>=<sp/>(massSqSum<sp/>+<sp/>sSq<sp/>+<sp/>tSq<sp/>+<sp/>pMissSq)/8.0;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#define<sp/>LESTER_DBG<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LESTER_DBG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;</highlight><highlight class="stringliteral">&quot;\nMOO<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>for<sp/>an<sp/>easy<sp/>MT2<sp/>zero,<sp/>not<sp/>because<sp/>we<sp/>think<sp/>it<sp/>will<sp/>speed<sp/>up<sp/>many<sp/>cases,<sp/>but<sp/>because<sp/>it<sp/>will<sp/>allow<sp/>us<sp/>to,<sp/>ever<sp/>after,<sp/>assume<sp/>that<sp/>scaleSq&gt;0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scaleSq==0)<sp/>{</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>scale<sp/>=<sp/>sqrt(scaleSq);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>disjoint<sp/>at<sp/>mMin.<sp/><sp/>So<sp/>find<sp/>an<sp/>mUpper<sp/>at<sp/>which<sp/>they<sp/>are<sp/>not<sp/>disjoint:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mLower<sp/>=<sp/>mMin;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mUpper<sp/>=<sp/>mMin<sp/>+<sp/>scale;<sp/></highlight><highlight class="comment">//<sp/>since<sp/>scaleSq<sp/>is<sp/>guaranteed<sp/>to<sp/>be<sp/>&gt;0<sp/>at<sp/>this<sp/>stage,<sp/>the<sp/>adition<sp/>of<sp/>scaleSq<sp/>quarantees<sp/>that<sp/>mUpperSq<sp/>is<sp/>also<sp/>&gt;0,<sp/>so<sp/>it<sp/>can<sp/>be<sp/>exponentially<sp/>grown<sp/>(later)<sp/>by<sp/>doubling.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>attempts=0;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxAttempts=10000;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++attempts;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mUpperSq<sp/>=<sp/>mUpper*mUpper;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structLester_1_1EllipseParams" kindref="compound">Lester::EllipseParams</ref><sp/>&amp;<sp/>side1=helper(mUpperSq,<sp/>msSq,<sp/>-sx,<sp/>-sy,<sp/>mpSq,<sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/>0<sp/><sp/><sp/><sp/><sp/>);<sp/></highlight><highlight class="comment">//<sp/>see<sp/>side1Coeffs<sp/>in<sp/>mathematica<sp/>notebook</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structLester_1_1EllipseParams" kindref="compound">Lester::EllipseParams</ref><sp/>&amp;<sp/>side2=helper(mUpperSq,<sp/>mtSq,<sp/>+tx,<sp/>+ty,<sp/>mqSq,<sp/>pxMiss,<sp/>pyMiss);<sp/></highlight><highlight class="comment">//<sp/>see<sp/>side2Coeffs<sp/>in<sp/>mathematica<sp/>notebook</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>disjoint;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>disjoint<sp/>=<sp/>Lester::ellipsesAreDisjoint(side1,<sp/>side2);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(...)<sp/>{</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MT2_ERROR;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!disjoint)<sp/>{</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(attempts&gt;=maxAttempts)<sp/>{</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;MT2<sp/>algorithm<sp/>failed<sp/>to<sp/>find<sp/>upper<sp/>bound<sp/>to<sp/>MT2&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MT2_ERROR;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LESTER_DBG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>-<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mUpper<sp/>*=<sp/>2;<sp/></highlight><highlight class="comment">//<sp/>grow<sp/>mUpper<sp/>exponentially</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//const<sp/>double<sp/>tol<sp/>=<sp/>relativeTolerance<sp/>*<sp/>sqrt(scaleSq);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>begin<sp/>the<sp/>bisection:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>goLow<sp/>=<sp/>useDeciSectionsInitially;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(desiredPrecisionOnMT2&lt;=0<sp/>||<sp/>mUpper-mLower&gt;desiredPrecisionOnMT2)<sp/>{</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>trialM<sp/>=<sp/>(<sp/>goLow<sp/>?</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(mLower*15+mUpper)/16<sp/><sp/></highlight><highlight class="comment">//<sp/>bias<sp/>low<sp/>until<sp/>evidence<sp/>this<sp/>is<sp/>not<sp/>a<sp/>special<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(mUpper<sp/>+<sp/>mLower)/2.0<sp/></highlight><highlight class="comment">//<sp/>bisect</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);<sp/></highlight><highlight class="comment">//<sp/>worry<sp/>about<sp/>this<sp/>not<sp/>being<sp/>between<sp/>mUpperSq<sp/>and<sp/>mLowerSq!<sp/>TODO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(trialM&lt;=mLower<sp/>||<sp/>trialM&gt;=mUpper)<sp/>{</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>reached<sp/>a<sp/>numerical<sp/>precision<sp/>limit:<sp/><sp/>the<sp/>interval<sp/>can<sp/>no<sp/>longer<sp/>be<sp/>bisected!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LESTER_DBG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>MACHINE_PREC<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::setprecision(10)<sp/>&lt;&lt;<sp/>mLower<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>trialM<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>mUpper<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>mUpper-mLower<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>desiredPrecisionOnMT2<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>trialM*trialM;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>trialMSq<sp/>=<sp/>trialM<sp/>*<sp/>trialM;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structLester_1_1EllipseParams" kindref="compound">Lester::EllipseParams</ref><sp/>&amp;<sp/>side1<sp/>=<sp/>helper(trialMSq,<sp/>msSq,<sp/>-sx,<sp/>-sy,<sp/>mpSq,<sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/>0<sp/><sp/><sp/><sp/><sp/>);<sp/></highlight><highlight class="comment">//<sp/>see<sp/>side1Coeffs<sp/>in<sp/>mathematica<sp/>notebook</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structLester_1_1EllipseParams" kindref="compound">Lester::EllipseParams</ref><sp/>&amp;<sp/>side2<sp/>=<sp/>helper(trialMSq,<sp/>mtSq,<sp/>+tx,<sp/>+ty,<sp/>mqSq,<sp/>pxMiss,<sp/>pyMiss);<sp/></highlight><highlight class="comment">//<sp/>see<sp/>side2Coeffs<sp/>in<sp/>mathematica<sp/>notebook</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>disjoint<sp/>=<sp/>Lester::ellipsesAreDisjoint(side1,<sp/>side2);</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(disjoint)<sp/>{</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mLower<sp/>=<sp/>trialM;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>goLow<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LESTER_DBG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;UP<sp/>&quot;</highlight><highlight class="normal"><sp/>;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mUpper<sp/>=<sp/>trialM;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LESTER_DBG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;==<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(...)<sp/>{</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>test<sp/>for<sp/>ellipses<sp/>being<sp/>disjoint<sp/>failed<sp/>...<sp/>this<sp/>means<sp/>the<sp/>ellipses<sp/>became<sp/>degenerate,<sp/>which<sp/>can<sp/>only<sp/>happen<sp/>right<sp/>at<sp/>the<sp/>bottom<sp/>of<sp/>the<sp/>MT2<sp/>search<sp/>range<sp/>(subject<sp/>to<sp/>numerical<sp/>precision).<sp/><sp/>So:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LESTER_DBG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>THROW<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mLower*mLower;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mAns<sp/>=<sp/>(mLower+mUpper)/2.0;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LESTER_DBG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>USER_PREC<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mAns*mAns;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lestermax(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y)<sp/>{</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(x&gt;y)?x:y;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structLester_1_1EllipseParams" kindref="compound">Lester::EllipseParams</ref><sp/>helper(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mSq,<sp/></highlight><highlight class="comment">//<sp/>The<sp/>test<sp/>parent-mass<sp/>value<sp/>(squared)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mtSq,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ty,<sp/></highlight><highlight class="comment">//<sp/>The<sp/>visible<sp/>particle<sp/>transverse<sp/>momentum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mqSq,<sp/></highlight><highlight class="comment">//<sp/>The<sp/>mass<sp/>of<sp/>the<sp/>invisible<sp/>particle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>pxmiss,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>pymiss</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>txSq<sp/>=<sp/>tx*tx;</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tySq<sp/>=<sp/>ty*ty;</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>pxmissSq<sp/>=<sp/>pxmiss*pxmiss;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>pymissSq<sp/>=<sp/>pymiss*pymiss;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>c_xx<sp/>=<sp/>+4.0*<sp/>mtSq<sp/>+<sp/>4.0*<sp/>tySq;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>c_yy<sp/>=<sp/>+4.0*<sp/>mtSq<sp/>+<sp/>4.0*<sp/>txSq;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>c_xy<sp/>=<sp/>-4.0*<sp/>tx*ty;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>c_x<sp/><sp/>=<sp/>-4.0*<sp/>mtSq*pxmiss<sp/>-<sp/>2.0*<sp/>mqSq*tx<sp/>+<sp/>2.0*<sp/>mSq*tx<sp/>-<sp/>2.0*<sp/>mtSq*tx<sp/><sp/>+</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>4.0*<sp/>pymiss*tx*ty<sp/>-<sp/>4.0*<sp/>pxmiss*tySq;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>c_y<sp/><sp/>=<sp/>-4.0*<sp/>mtSq*pymiss<sp/>-<sp/>4.0*<sp/>pymiss*txSq<sp/>-<sp/>2.0*<sp/>mqSq*ty<sp/>+<sp/>2.0*<sp/>mSq*ty<sp/>-<sp/>2.0*<sp/>mtSq*ty<sp/>+</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>4.0*<sp/>pxmiss*tx*ty;</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>c<sp/>=<sp/><sp/><sp/>-<sp/>mqSq*mqSq<sp/>+<sp/>2*mqSq*mSq<sp/>-<sp/>mSq*mSq<sp/>+<sp/>2*mqSq*mtSq<sp/>+<sp/>2*mSq*mtSq<sp/>-<sp/>mtSq*mtSq<sp/>+</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>4.0*<sp/>mtSq*pxmissSq<sp/>+<sp/>4.0*<sp/>mtSq*pymissSq<sp/>+<sp/>4.0*<sp/>mqSq*pxmiss*tx<sp/>-</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>4.0*<sp/>mSq*pxmiss*tx<sp/>+<sp/>4.0*<sp/>mtSq*pxmiss*tx<sp/>+<sp/>4.0*<sp/>mqSq*txSq<sp/>+</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>4.0*<sp/>pymissSq*txSq<sp/>+<sp/>4.0*<sp/>mqSq*pymiss*ty<sp/>-<sp/>4.0*<sp/>mSq*pymiss*ty<sp/>+</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>4.0*<sp/>mtSq*pymiss*ty<sp/>-<sp/>8.0*<sp/>pxmiss*pymiss*tx*ty<sp/>+<sp/>4.0*<sp/>mqSq*tySq<sp/>+</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>4.0*<sp/>pxmissSq*tySq;</highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structLester_1_1EllipseParams" kindref="compound">Lester::EllipseParams</ref>(c_xx,<sp/>c_yy,<sp/>c_xy,<sp/>c_x,<sp/>c_y,<sp/>c);</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="533"><highlight class="normal">};</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>myversion(){</highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Version<sp/>is<sp/>:<sp/>2014_11_13&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal">}</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>MT(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>px1,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>px2,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>py1,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>py2,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>m1<sp/>,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>m2){</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>E1<sp/>=<sp/>sqrt(px1*px1+py1*py1+m1*m1);</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>E2<sp/>=<sp/>sqrt(px2*px2+py2*py2+m2*m2);</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Msq<sp/>=<sp/>(E1+E2)*(E1+E2)-(px1+px2)*(px1+px2)-(py1+py2)*(py1+py2);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Msq<sp/>&lt;<sp/>0)<sp/>Msq<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sqrt(Msq);</highlight></codeline>
<codeline lineno="547"><highlight class="normal">}</highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal">std::pair<sp/>&lt;double,double&gt;<sp/><sp/>ben_findsols(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>MT2,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>px,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>py,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>visM,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Ma,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>pxb,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>pyb,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>metx,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mety,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>visMb,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Mb){</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Visible<sp/>particle<sp/>(px,py,visM)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/>std::pair<sp/>&lt;double,double&gt;<sp/>sols;</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Find<sp/>the<sp/>minimizing<sp/>points<sp/>given<sp/>MT2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="557"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Pt<sp/>=<sp/>sqrt(px*px+py*py);</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>E<sp/>=<sp/>sqrt(Pt*Pt+visM*visM);</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>M<sp/>=<sp/>MT2;</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>E2<sp/>=<sp/>E*E;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>M2<sp/>=<sp/>M*M;</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>M4<sp/>=<sp/>M2*M2;</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Ma2<sp/>=<sp/>Ma*Ma;</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Ma4<sp/>=<sp/>Ma2*Ma2;</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>px2<sp/>=<sp/>px*px;</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>py2<sp/>=<sp/>py*py;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>px4<sp/>=<sp/>px2*px2;</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>py4<sp/>=<sp/>py2*py2;</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>py3<sp/>=<sp/>py2*py;</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>E4<sp/>=<sp/>E2*E2;</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>TermA<sp/>=<sp/>E2*px-M2*px+Ma2*px-px2*px-px*py2;</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>TermB<sp/>=<sp/>-2.*px*py;</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>TermSqy0<sp/>=<sp/>E4*E2-2.*E4*M2-2.*E4*Ma2-2.*E4*px2-2.*E4*py2+E2*M4-2.*E2*M2*Ma2+2.*E2*M2*px2+2.*E2*M2*py2+E2*Ma4+2.*E2*Ma2*px2-2.*E2*Ma2*py2+E2*px4+2.*E2*px2*py2+E2*py4;</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>TermSqy1<sp/>=<sp/>-4.*E4*py+4.*E2*M2*py-4.*E2*Ma2*py+4.*E2*px2*py+4.*E2*py3;</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>TermSqy2<sp/>=<sp/>-4.*E4+4.*E2*px2+4.*E2*py2;</highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//First,<sp/>determine<sp/>the<sp/>range.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>myx<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>myy<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(TermSqy1*TermSqy1-4.*TermSqy0*TermSqy2<sp/>&lt;<sp/>0){</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//unbalanced<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sol1<sp/>=<sp/>(-TermSqy1<sp/>-<sp/>sqrt(TermSqy1*TermSqy1-4.*TermSqy0*TermSqy2))/(2.*TermSqy2);</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sol2<sp/>=<sp/>(-TermSqy1<sp/>+<sp/>sqrt(TermSqy1*TermSqy1-4.*TermSqy0*TermSqy2))/(2.*TermSqy2);</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>low<sp/>=<sp/>sol1;</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>high<sp/>=<sp/>sol2;</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(low<sp/>&gt;<sp/>high){</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>low<sp/>=<sp/>sol2;</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>high<sp/>=<sp/>sol1;</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>myclose<sp/>=<sp/>99999999.;</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>metpy<sp/>=<sp/>low;<sp/>metpy&lt;=high;<sp/>metpy+=(high-low)/10000.){</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>metpx<sp/>=<sp/>-(TermB*metpy+TermA-sqrt(TermSqy0+TermSqy1*metpy+TermSqy2*metpy*metpy))*0.5/(E2-px2);</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>metpx2<sp/>=<sp/>-(TermB*metpy+TermA+sqrt(TermSqy0+TermSqy1*metpy+TermSqy2*metpy*metpy))*0.5/(E2-px2);</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mt1a<sp/>=<sp/>MT(px,metpx,py,metpy,visM,Ma);</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mt1b<sp/>=<sp/>MT(px,metpx2,py,metpy,visM,Ma);</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>metpxb<sp/>=<sp/>metx-metpx;</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>metpx2b<sp/>=<sp/>metx-metpx2;</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mt2a<sp/>=<sp/>MT(pxb,metpxb,pyb,mety-metpy,visMb,Mb);</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mt2b<sp/>=<sp/>MT(pxb,metpx2b,pyb,mety-metpy,visMb,Mb);</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(mt1a-mt2a)<sp/>&lt;<sp/>myclose){</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/>myclose<sp/>=<sp/>fabs(mt1a-mt2a);</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/>myy<sp/>=<sp/>metpy;</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/>myx<sp/>=<sp/>metpx;</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(mt1b-mt2b)<sp/>&lt;<sp/>myclose){</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/>myclose<sp/>=<sp/>fabs(mt1b-mt2b);</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/>myy<sp/>=<sp/>metpy;</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/>myx<sp/>=<sp/>metpx2;</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/>sols.first<sp/>=<sp/>myx;</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/>sols.second<sp/>=<sp/>myy;</highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sols;</highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal">}</highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/lester_mt2_bisect.h"/>
  </compounddef>
</doxygen>
