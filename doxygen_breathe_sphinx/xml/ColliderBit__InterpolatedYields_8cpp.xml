<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="ColliderBit__InterpolatedYields_8cpp" kind="file" language="C++">
    <compoundname>ColliderBit_InterpolatedYields.cpp</compoundname>
    <includes local="no">gsl/gsl_math.h</includes>
    <includes local="no">gsl/gsl_interp2d.h</includes>
    <includes local="no">gsl/gsl_spline2d.h</includes>
    <includes local="no">gsl/gsl_sf_gamma.h</includes>
    <includes local="yes">Eigen/Eigenvalues</includes>
    <includes local="yes">Eigen/Eigen</includes>
    <includes local="yes">multimin/multimin.hpp</includes>
    <includes refid="Analysis_8hpp" local="yes">gambit/ColliderBit/analyses/Analysis.hpp</includes>
    <includes local="yes">gambit/Elements/gambit_module_headers.hpp</includes>
    <includes refid="ColliderBit__rollcall_8hpp" local="yes">gambit/ColliderBit/ColliderBit_rollcall.hpp</includes>
    <includes local="yes">gambit/Utils/interp_collection.hpp</includes>
    <includes local="yes">gambit/Utils/file_lock.hpp</includes>
    <includes local="yes">gambit/Utils/util_macros.hpp</includes>
    <includes refid="Utils_8hpp" local="yes">gambit/ColliderBit/Utils.hpp</includes>
    <incdepgraph>
      <node id="60">
        <label>gambit/ColliderBit/ColliderBit_Higgs_rollcall.hpp</label>
        <link refid="ColliderBit__Higgs__rollcall_8hpp"/>
      </node>
      <node id="61">
        <label>gambit/ColliderBit/ColliderBit_LEP_rollcall.hpp</label>
        <link refid="ColliderBit__LEP__rollcall_8hpp"/>
      </node>
      <node id="62">
        <label>gambit/ColliderBit/ColliderBit_MC_rollcall.hpp</label>
        <link refid="ColliderBit__MC__rollcall_8hpp"/>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>gambit/ColliderBit/ColliderBit_rollcall.hpp</label>
        <link refid="ColliderBit__rollcall_8hpp"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>gambit/ColliderBit/ColliderBit_types.hpp</label>
        <link refid="ColliderBit__types_8hpp"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>gambit/ColliderBit/MCLoopInfo.hpp</label>
        <link refid="MCLoopInfo_8hpp"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>gambit/ColliderBit/MC_convergence.hpp</label>
        <link refid="MC__convergence_8hpp"/>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="67">
        <label>gambit/ColliderBit/Utils.hpp</label>
        <link refid="Utils_8hpp"/>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>gambit/ColliderBit/analyses/Analysis.hpp</label>
        <link refid="Analysis_8hpp"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>gambit/ColliderBit/analyses/AnalysisContainer.hpp</label>
        <link refid="AnalysisContainer_8hpp"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>gambit/ColliderBit/analyses/AnalysisData.hpp</label>
        <link refid="AnalysisData_8hpp"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>gambit/ColliderBit/analyses/EventCounter.hpp</label>
        <link refid="EventCounter_8hpp"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>gambit/ColliderBit/colliders/BaseCollider.hpp</label>
        <link refid="BaseCollider_8hpp"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>gambit/ColliderBit/colliders/Pythia8/Py8Collider.hpp</label>
        <link refid="Py8Collider_8hpp"/>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>gambit/ColliderBit/colliders/Pythia8/SetHooksClass.hpp</label>
        <link refid="SetHooksClass_8hpp"/>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>gambit/ColliderBit/detectors/BaseDetector.hpp</label>
        <link refid="BaseDetector_8hpp"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>gambit/ColliderBit/detectors/BuckFast.hpp</label>
        <link refid="BuckFast_8hpp"/>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>gambit/ColliderBit/limits/ALEPHSleptonLimits.hpp</label>
        <link refid="ALEPHSleptonLimits_8hpp_source"/>
        <childnode refid="51" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>gambit/ColliderBit/limits/BaseLimitContainer.hpp</label>
        <link refid="BaseLimitContainer_8hpp"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>gambit/ColliderBit/limits/L3GauginoLimits.hpp</label>
        <link refid="L3GauginoLimits_8hpp_source"/>
        <childnode refid="51" relation="include">
        </childnode>
      </node>
      <node id="57">
        <label>gambit/ColliderBit/limits/L3SleptonLimits.hpp</label>
        <link refid="L3SleptonLimits_8hpp_source"/>
        <childnode refid="51" relation="include">
        </childnode>
      </node>
      <node id="59">
        <label>gambit/ColliderBit/limits/OPALDegenerateCharginoLimits.hpp</label>
        <link refid="OPALDegenerateCharginoLimits_8hpp_source"/>
        <childnode refid="51" relation="include">
        </childnode>
      </node>
      <node id="58">
        <label>gambit/ColliderBit/limits/OPALGauginoLimits.hpp</label>
        <link refid="OPALGauginoLimits_8hpp_source"/>
        <childnode refid="51" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>gambit/ColliderBit/limits/PointsAndLines.hpp</label>
        <link refid="PointsAndLines_8hpp_source"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>gambit/ColliderBit/xsec.hpp</label>
        <link refid="xsec_8hpp"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_InterpolatedYields.cpp</label>
        <link refid="ColliderBit__InterpolatedYields_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>Eigen/Core</label>
      </node>
      <node id="7">
        <label>Eigen/Eigen</label>
      </node>
      <node id="6">
        <label>Eigen/Eigenvalues</label>
      </node>
      <node id="70">
        <label>HEPUtils/BinnedFn.h</label>
      </node>
      <node id="11">
        <label>HEPUtils/Event.h</label>
      </node>
      <node id="71">
        <label>HEPUtils/FastJet.h</label>
      </node>
      <node id="48">
        <label>HEPUtils/Jet.h</label>
      </node>
      <node id="69">
        <label>HEPUtils/MathUtils.h</label>
      </node>
      <node id="47">
        <label>HEPUtils/Particle.h</label>
      </node>
      <node id="42">
        <label>SLHAea/slhaea.h</label>
      </node>
      <node id="25">
        <label>algorithm</label>
      </node>
      <node id="21">
        <label>cfloat</label>
      </node>
      <node id="31">
        <label>chrono</label>
      </node>
      <node id="20">
        <label>cmath</label>
      </node>
      <node id="52">
        <label>cstdlib</label>
      </node>
      <node id="46">
        <label>exception</label>
      </node>
      <node id="53">
        <label>fstream</label>
      </node>
      <node id="68">
        <label>functional</label>
      </node>
      <node id="63">
        <label>gambit/ColliderBit/ColliderBit_models_rollcall.hpp</label>
      </node>
      <node id="43">
        <label>gambit/ColliderBit/colliders/Pythia8/Py8Collider_typedefs.hpp</label>
      </node>
      <node id="27">
        <label>gambit/Elements/gambit_module_headers.hpp</label>
      </node>
      <node id="29">
        <label>gambit/Elements/shared_types.hpp</label>
      </node>
      <node id="32">
        <label>gambit/Utils/PID_pair.hpp</label>
      </node>
      <node id="13">
        <label>gambit/Utils/begin_ignore_warnings_eigen.hpp</label>
      </node>
      <node id="15">
        <label>gambit/Utils/end_ignore_warnings.hpp</label>
      </node>
      <node id="65">
        <label>gambit/Utils/file_lock.hpp</label>
      </node>
      <node id="64">
        <label>gambit/Utils/interp_collection.hpp</label>
      </node>
      <node id="66">
        <label>gambit/Utils/util_macros.hpp</label>
      </node>
      <node id="34">
        <label>gambit/Utils/util_types.hpp</label>
      </node>
      <node id="3">
        <label>gsl/gsl_interp2d.h</label>
      </node>
      <node id="2">
        <label>gsl/gsl_math.h</label>
      </node>
      <node id="5">
        <label>gsl/gsl_sf_gamma.h</label>
      </node>
      <node id="4">
        <label>gsl/gsl_spline2d.h</label>
      </node>
      <node id="24">
        <label>iomanip</label>
      </node>
      <node id="17">
        <label>iostream</label>
      </node>
      <node id="22">
        <label>limits</label>
      </node>
      <node id="16">
        <label>map</label>
      </node>
      <node id="23">
        <label>memory</label>
      </node>
      <node id="8">
        <label>multimin/multimin.hpp</label>
      </node>
      <node id="38">
        <label>ostream</label>
      </node>
      <node id="18">
        <label>sstream</label>
      </node>
      <node id="39">
        <label>stdexcept</label>
      </node>
      <node id="10">
        <label>string</label>
      </node>
      <node id="54">
        <label>utility</label>
      </node>
      <node id="19">
        <label>vector</label>
      </node>
    </incdepgraph>
    <innerclass refid="classGambit_1_1ColliderBit_1_1DMEFT__analysis__info" prot="public">Gambit::ColliderBit::DMEFT_analysis_info</innerclass>
    <innerclass refid="structGambit_1_1ColliderBit_1_1__gsl__target__func__params" prot="public">Gambit::ColliderBit::_gsl_target_func_params</innerclass>
    <innernamespace refid="namespaceGambit">Gambit</innernamespace>
    <innernamespace refid="namespaceGambit_1_1ColliderBit">Gambit::ColliderBit</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Functions for LHC analyses that use tabulated interpolations rather than direct MC simulation. For now this functionality is specific to the DMEFT model, but it will be turned into a general feature in ColliderBit.</para>
<para><hruler/>
</para>
<para>Authors (add name and date if you modify):</para>
<para><simplesect kind="author"><para>Martin White (<ulink url="mailto:martin.white@adelaide.edu.au">martin.white@adelaide.edu.au</ulink>)</para>
</simplesect>
<simplesect kind="author"><para>Andre Scaffidi (<ulink url="mailto:andre.scaffidi@adelaide.edu.au">andre.scaffidi@adelaide.edu.au</ulink>) </para>
</simplesect>
<simplesect kind="date"><para>2019 Aug</para>
</simplesect>
<simplesect kind="author"><para>Tomas Gonzalo (<ulink url="mailto:gonzalo@physik.rwth-aachen.de">gonzalo@physik.rwth-aachen.de</ulink>) </para>
</simplesect>
<simplesect kind="date"><para>2021 Apr</para>
</simplesect>
<simplesect kind="author"><para>Anders Kvellestad (<ulink url="mailto:anders.kvellestad@fys.uio.no">anders.kvellestad@fys.uio.no</ulink>) </para>
</simplesect>
<simplesect kind="date"><para>2021 May</para>
</simplesect>
Analyses based on: arxiv:1711.03301 and <ulink url="https://journals.aps.org/prd/abstract/10.1103/PhysRevD.97.092005">https://journals.aps.org/prd/abstract/10.1103/PhysRevD.97.092005</ulink> 139invfb analysis based on arXiv:2102.10874</para>
<para><hruler/>
 </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/><sp/><sp/>GAMBIT:<sp/>Global<sp/>and<sp/>Modular<sp/>BSM<sp/>Inference<sp/>Tool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>*********************************************</highlight></codeline>
<codeline lineno="33"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Needs<sp/>GSL<sp/>2<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;gsl/gsl_math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;gsl/gsl_interp2d.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;gsl/gsl_spline2d.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;gsl/gsl_sf_gamma.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Eigen/Eigenvalues&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Eigen/Eigen&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;multimin/multimin.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="Analysis_8hpp" kindref="compound">gambit/ColliderBit/analyses/Analysis.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gambit/Elements/gambit_module_headers.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="ColliderBit__rollcall_8hpp" kindref="compound">gambit/ColliderBit/ColliderBit_rollcall.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gambit/Utils/interp_collection.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gambit/Utils/file_lock.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gambit/Utils/util_macros.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="Utils_8hpp" kindref="compound">gambit/ColliderBit/Utils.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#define<sp/>COLLIDERBIT_DEBUG_PROFILING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#define<sp/>COLLIDERBIT_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#define<sp/>DEBUG_PREFIX<sp/>&quot;DEBUG:<sp/>OMP<sp/>thread<sp/>&quot;<sp/>&lt;&lt;<sp/>omp_get_thread_num()<sp/>&lt;&lt;<sp/>&quot;:<sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceGambit" kindref="compound">Gambit</ref></highlight></codeline>
<codeline lineno="59"><highlight class="normal">{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">ColliderBit</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>{<sp/><sp/></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>===========<sp/>Useful<sp/>stuff<sp/>===========</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="70" refid="classGambit_1_1ColliderBit_1_1DMEFT__analysis__info" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classGambit_1_1ColliderBit_1_1DMEFT__analysis__info" kindref="compound">DMEFT_analysis_info</ref></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Standard<sp/>analysis<sp/>info:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str<sp/>name;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lumi_invfb;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n_signal_regions;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>obsnum;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>bkgnum;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>bkgerr;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::MatrixXd<sp/>bkgcov;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>map<sp/>to<sp/>hold<sp/>any<sp/>extra<sp/>non-standard<sp/>numbers<sp/>we<sp/>might<sp/>need<sp/>for<sp/>a<sp/>given<sp/>analysis.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>the<sp/>DMEFT-specific<sp/>case<sp/>we&apos;ll<sp/>use<sp/>this<sp/>to<sp/>store<sp/>the<sp/>MET<sp/>spectrum<sp/>bin<sp/>limits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::map&lt;str,<sp/>std::vector&lt;double&gt;&gt;<sp/>extra_info;<sp/></highlight><highlight class="comment">//<sp/>Any<sp/>additional<sp/>analysis-specific<sp/>numbers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Maps<sp/>containing<sp/>1D<sp/>and<sp/>2D<sp/>interpolators</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::map&lt;str,std::unique_ptr&lt;Utils::interp1d_collection&gt;&gt;<sp/>interp1d;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::map&lt;str,std::unique_ptr&lt;Utils::interp2d_collection&gt;&gt;<sp/>interp2d;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Helper<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>add_bkgcov(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;<sp/>std::vector&lt;double&gt;&gt;&amp;<sp/>bkgcov_in)</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>bkgcov_in.size()<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>bkgcov_in.size()<sp/>==<sp/>n_signal_regions<sp/>);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>bkgcov_in[0].size()<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>bkgcov_in[0].size()<sp/>==<sp/>n_signal_regions<sp/>);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Fill<sp/>our<sp/>Eigen<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bkgcov<sp/>=<sp/>Eigen::MatrixXd(n_signal_regions,<sp/>n_signal_regions);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n_signal_regions;<sp/>i++)</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bkgcov.row(i)<sp/>=<sp/>Eigen::VectorXd::Map(&amp;bkgcov_in[i][0],<sp/>bkgcov_in[i].size());<sp/></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>add_interp1d(str<sp/>name,<sp/>str<sp/>filename,<sp/>std::vector&lt;str&gt;<sp/>colnames)</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert<sp/>(interp1d.count(name)<sp/>==<sp/>0);<sp/></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>we&apos;re<sp/>not<sp/>overwriting<sp/>an<sp/>existing<sp/>entry</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>interp1d[name]<sp/>=<sp/>std::unique_ptr&lt;Utils::interp1d_collection&gt;(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Utils::interp1d_collection(name,<sp/>filename,<sp/>colnames));</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>add_interp2d(str<sp/>name,<sp/>str<sp/>filename,<sp/>std::vector&lt;str&gt;<sp/>colnames)</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert<sp/>(interp2d.count(name)<sp/>==<sp/>0);<sp/></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>we&apos;re<sp/>not<sp/>overwriting<sp/>an<sp/>existing<sp/>entry</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>interp2d[name]<sp/>=<sp/>std::unique_ptr&lt;Utils::interp2d_collection&gt;(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Utils::interp2d_collection(name,<sp/>filename,<sp/>colnames));</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Utils::interp1d_collection&amp;<sp/>get_interp1d(str<sp/>name)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="120"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*interp1d.at(name);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Utils::interp2d_collection&amp;<sp/>get_interp2d(str<sp/>name)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="125"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*interp2d.at(name);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="132" refid="structGambit_1_1ColliderBit_1_1__gsl__target__func__params" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structGambit_1_1ColliderBit_1_1__gsl__target__func__params" kindref="compound">_gsl_target_func_params</ref></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lambda;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>AnalysisDataPointers<sp/>adata_ptrs_original;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;str&gt;<sp/>skip_analyses;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>use_covar;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>use_marg;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>combine_nocovar_SRs;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;str,DMEFT_analysis_info&gt;<sp/><ref refid="ColliderBit__InterpolatedYields_8cpp_1af1fb89b8d6e6ddc3406d109c275b16f8" kindref="member">analysis_info_map</ref>;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>===========<sp/>Forward<sp/>declarations<sp/>===========</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structGambit_1_1ColliderBit_1_1AnalysisLogLikes" kindref="compound">AnalysisLogLikes</ref><sp/><ref refid="ColliderBit__InterpolatedYields_8cpp_1aa372076882c0888fc20fcf8f52a666e1" kindref="member">calc_loglikes_for_analysis</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structGambit_1_1ColliderBit_1_1AnalysisData" kindref="compound">AnalysisData</ref>&amp;,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ColliderBit__InterpolatedYields_8cpp_1a77e1e6f4e83205760ee6e97eac487757" kindref="member">fill_analysis_info_map</ref>();</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ColliderBit__InterpolatedYields_8cpp_1ac3973f4ef16dc84eb1ec3873f15c61b0" kindref="member">DMEFT_results</ref>(AnalysisDataPointers&amp;);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ColliderBit__InterpolatedYields_8cpp_1add7205c37867015ac8b11e4a9987c43c" kindref="member">get_all_DMEFT_signal_yields</ref>(std::vector&lt;double&gt;&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classGambit_1_1ColliderBit_1_1DMEFT__analysis__info" kindref="compound">DMEFT_analysis_info</ref>&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Spectrum&amp;);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ColliderBit__InterpolatedYields_8cpp_1a89d3209ad6993f929779ec026e09f5a1" kindref="member">get_DMEFT_signal_yields_dim6_operator</ref>(std::vector&lt;double&gt;&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>str,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classGambit_1_1ColliderBit_1_1DMEFT__analysis__info" kindref="compound">DMEFT_analysis_info</ref>&amp;,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ColliderBit__InterpolatedYields_8cpp_1abac0f0c989a899660856fc73b28e8a1d" kindref="member">get_DMEFT_signal_yields_dim7_operator</ref>(std::vector&lt;double&gt;&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>str,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classGambit_1_1ColliderBit_1_1DMEFT__analysis__info" kindref="compound">DMEFT_analysis_info</ref>&amp;,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ColliderBit__InterpolatedYields_8cpp_1acfb2fa465de3e5f18ea2cd157765ca03" kindref="member">DMEFT_results_profiled</ref>(AnalysisDataPointers&amp;);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ColliderBit__InterpolatedYields_8cpp_1ad34ef94007d90c2c983ed20f99120386" kindref="member">DMEFT_results_cutoff</ref>(AnalysisDataPointers&amp;);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ColliderBit__InterpolatedYields_8cpp_1a88c08c0921b8a5f711a41b82ac7d2a98" kindref="member">signal_modifier_function</ref>(<ref refid="structGambit_1_1ColliderBit_1_1AnalysisData" kindref="compound">AnalysisData</ref>&amp;,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ColliderBit__InterpolatedYields_8cpp_1a8ecd6e8e0f57cfccadc7368d383dca43" kindref="member">signal_cutoff_function</ref>(<ref refid="structGambit_1_1ColliderBit_1_1AnalysisData" kindref="compound">AnalysisData</ref>&amp;,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ColliderBit__InterpolatedYields_8cpp_1a2e4a667539a208c93c3eac8dc4e53d17" kindref="member">_gsl_target_func</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>calc_DMEFT_profiled_LHC_nuisance_params(map_str_dbl&amp;);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ColliderBit__InterpolatedYields_8cpp_1a8f54236771955821c2aefcb85cd36b8c" kindref="member">InterpolatedMCInfo</ref>(<ref refid="structGambit_1_1ColliderBit_1_1MCLoopInfo" kindref="compound">MCLoopInfo</ref>&amp;);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>===========<sp/>Functions<sp/>===========</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ColliderBit__InterpolatedYields_8cpp_1a77e1e6f4e83205760ee6e97eac487757" kindref="member">fill_analysis_info_map</ref>()</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Helper<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>str<sp/>current_analysis_name;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;str&gt;<sp/>colnames;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classGambit_1_1ColliderBit_1_1DMEFT__analysis__info" kindref="compound">DMEFT_analysis_info</ref><sp/>empty_analysis_info;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classGambit_1_1ColliderBit_1_1DMEFT__analysis__info" kindref="compound">DMEFT_analysis_info</ref>*<sp/>current_ainfo;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>New<sp/>analysis:<sp/>CMS_13TeV_MONOJET_36invfb_interpolated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Analysis<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_analysis_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;CMS_13TeV_MONOJET_36invfb_interpolated&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>an<sp/>entry<sp/>in<sp/>the<sp/>global<sp/>analysis_info_map<sp/>and<sp/>point<sp/>the<sp/>pointer<sp/>current_ainfo<sp/>to<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ColliderBit__InterpolatedYields_8cpp_1af1fb89b8d6e6ddc3406d109c275b16f8" kindref="member">analysis_info_map</ref>[current_analysis_name]<sp/>=<sp/><ref refid="classGambit_1_1ColliderBit_1_1DMEFT__analysis__info" kindref="compound">DMEFT_analysis_info</ref>();</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_ainfo<sp/>=<sp/>&amp;(<ref refid="ColliderBit__InterpolatedYields_8cpp_1af1fb89b8d6e6ddc3406d109c275b16f8" kindref="member">analysis_info_map</ref>[current_analysis_name]);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_ainfo-&gt;name<sp/>=<sp/>current_analysis_name;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_ainfo-&gt;lumi_invfb<sp/>=<sp/>36.1;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_ainfo-&gt;obsnum<sp/>=<sp/>{136865,<sp/>74340,<sp/>42540,<sp/>25316,<sp/>15653,<sp/>10092,<sp/>8298,<sp/>4906,<sp/>2987,<sp/>2032,<sp/>1514,</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>926,<sp/>557,<sp/>316,<sp/>233,<sp/>172,<sp/>101,<sp/>65,<sp/>46,<sp/>26,<sp/>31,<sp/>29};</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_ainfo-&gt;bkgnum<sp/>=<sp/>{134500.,<sp/>73400.,<sp/>42320.,<sp/>25490.,<sp/>15430.,<sp/>10160.,<sp/>8480.,<sp/>4865.,<sp/>2970.,<sp/>1915.,<sp/>1506.,</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>844.,<sp/>526.,<sp/>325.,<sp/>223.,<sp/>169.,<sp/>107.,<sp/>88.1,<sp/>52.8,<sp/>25.0,<sp/>25.5,<sp/>26.9};</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_ainfo-&gt;bkgerr<sp/>=<sp/>{3700.,<sp/>2000.,<sp/>810.,<sp/>490.,<sp/>310.,<sp/>170.,<sp/>140.,<sp/>95.,<sp/>49.,<sp/>33.,<sp/>32.,</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>18.,<sp/>14.,<sp/>12.,<sp/>9.,<sp/>8.,<sp/>6.,<sp/>5.3,<sp/>3.9,<sp/>2.5,<sp/>2.6,<sp/>2.8};</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(current_ainfo-&gt;obsnum.size()<sp/>==<sp/>current_ainfo-&gt;bkgerr.size());</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(current_ainfo-&gt;obsnum.size()<sp/>==<sp/>current_ainfo-&gt;bkgerr.size());</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_ainfo-&gt;n_signal_regions<sp/>=<sp/>current_ainfo-&gt;obsnum.size();<sp/></highlight><highlight class="comment">//<sp/>=<sp/>22</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_ainfo-&gt;extra_info[</highlight><highlight class="stringliteral">&quot;metmins&quot;</highlight><highlight class="normal">]<sp/>=<sp/>{250.,<sp/>280.,<sp/>310.,<sp/>340.,<sp/>370.,<sp/>400.,<sp/>430.,<sp/>470.,<sp/>510.,<sp/>550.,<sp/>590.,</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>640.,<sp/>690.,<sp/>740.,<sp/>790.,<sp/>840.,<sp/>900.,<sp/>960.,<sp/>1020.,<sp/>1090.,<sp/>1160.,<sp/>1250.};</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(current_ainfo-&gt;obsnum.size()<sp/>==<sp/>current_ainfo-&gt;extra_info[</highlight><highlight class="stringliteral">&quot;metmins&quot;</highlight><highlight class="normal">].size());</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Construct<sp/>the<sp/>background<sp/>covariance<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;<sp/>std::vector&lt;double&gt;&gt;<sp/>bkgcov<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/>1.37e+07,<sp/><sp/>7.18e+06,<sp/><sp/>2.58e+06,<sp/><sp/>1.54e+06,<sp/><sp/>9.29e+05,<sp/><sp/>4.28e+05,<sp/><sp/>3.26e+05,<sp/><sp/>2.04e+05,<sp/><sp/>8.34e+04,<sp/><sp/>5.37e+04,<sp/><sp/>4.62e+04,<sp/><sp/>2.33e+04,<sp/><sp/>1.45e+04,<sp/><sp/>1.20e+04,<sp/><sp/>6.66e+03,<sp/><sp/>7.99e+03,<sp/><sp/>4.00e+03,<sp/><sp/>1.57e+03,<sp/><sp/>0.00e+00,<sp/><sp/>1.30e+03,<sp/><sp/>3.85e+02,<sp/>-4.14e+02<sp/>},</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/>7.18e+06,<sp/><sp/>4.00e+06,<sp/><sp/>1.38e+06,<sp/><sp/>8.43e+05,<sp/><sp/>5.02e+05,<sp/><sp/>2.28e+05,<sp/><sp/>1.74e+05,<sp/><sp/>1.05e+05,<sp/><sp/>4.51e+04,<sp/><sp/>2.84e+04,<sp/><sp/>2.30e+04,<sp/><sp/>1.22e+04,<sp/><sp/>7.56e+03,<sp/><sp/>6.48e+03,<sp/><sp/>3.24e+03,<sp/><sp/>4.00e+03,<sp/><sp/>2.28e+03,<sp/><sp/>1.06e+03,<sp/><sp/>1.56e+02,<sp/><sp/>8.00e+02,<sp/><sp/>3.64e+02,<sp/>-1.68e+02<sp/>},</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/>2.58e+06,<sp/><sp/>1.38e+06,<sp/><sp/>6.56e+05,<sp/><sp/>3.57e+05,<sp/><sp/>2.18e+05,<sp/><sp/>1.07e+05,<sp/><sp/>8.73e+04,<sp/><sp/>5.31e+04,<sp/><sp/>2.34e+04,<sp/><sp/>1.50e+04,<sp/><sp/>1.35e+04,<sp/><sp/>7.00e+03,<sp/><sp/>4.20e+03,<sp/><sp/>3.30e+03,<sp/><sp/>2.26e+03,<sp/><sp/>1.81e+03,<sp/><sp/>1.12e+03,<sp/><sp/>6.44e+02,<sp/><sp/>2.21e+02,<sp/><sp/>3.04e+02,<sp/><sp/>1.47e+02,<sp/><sp/>2.27e+01<sp/>},</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/>1.54e+06,<sp/><sp/>8.43e+05,<sp/><sp/>3.57e+05,<sp/><sp/>2.40e+05,<sp/><sp/>1.32e+05,<sp/><sp/>6.58e+04,<sp/><sp/>5.14e+04,<sp/><sp/>3.17e+04,<sp/><sp/>1.44e+04,<sp/><sp/>9.22e+03,<sp/><sp/>8.15e+03,<sp/><sp/>4.06e+03,<sp/><sp/>2.88e+03,<sp/><sp/>2.00e+03,<sp/><sp/>1.32e+03,<sp/><sp/>1.25e+03,<sp/><sp/>7.06e+02,<sp/><sp/>3.64e+02,<sp/><sp/>5.73e+01,<sp/><sp/>1.59e+02,<sp/><sp/>7.64e+01,<sp/>-2.74e+01<sp/>},</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/>9.29e+05,<sp/><sp/>5.02e+05,<sp/><sp/>2.18e+05,<sp/><sp/>1.32e+05,<sp/><sp/>9.61e+04,<sp/><sp/>4.11e+04,<sp/><sp/>3.21e+04,<sp/><sp/>1.88e+04,<sp/><sp/>8.81e+03,<sp/><sp/>5.73e+03,<sp/><sp/>5.46e+03,<sp/><sp/>2.57e+03,<sp/><sp/>1.78e+03,<sp/><sp/>1.34e+03,<sp/><sp/>6.98e+02,<sp/><sp/>9.18e+02,<sp/><sp/>4.28e+02,<sp/><sp/>1.64e+02,<sp/><sp/>3.63e+01,<sp/><sp/>1.32e+02,<sp/><sp/>1.05e+02,<sp/>-8.68e+00<sp/>},</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/>4.28e+05,<sp/><sp/>2.28e+05,<sp/><sp/>1.07e+05,<sp/><sp/>6.58e+04,<sp/><sp/>4.11e+04,<sp/><sp/>2.89e+04,<sp/><sp/>1.76e+04,<sp/><sp/>1.07e+04,<sp/><sp/>5.16e+03,<sp/><sp/>2.92e+03,<sp/><sp/>2.83e+03,<sp/><sp/>1.62e+03,<sp/><sp/>9.76e+02,<sp/><sp/>8.77e+02,<sp/><sp/>3.82e+02,<sp/><sp/>4.49e+02,<sp/><sp/>2.04e+02,<sp/><sp/>1.08e+02,<sp/><sp/>9.94e+01,<sp/><sp/>1.02e+02,<sp/><sp/>3.98e+01,<sp/><sp/>4.76e+00<sp/>},</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/>3.26e+05,<sp/><sp/>1.74e+05,<sp/><sp/>8.73e+04,<sp/><sp/>5.14e+04,<sp/><sp/>3.21e+04,<sp/><sp/>1.76e+04,<sp/><sp/>1.96e+04,<sp/><sp/>9.18e+03,<sp/><sp/>4.39e+03,<sp/><sp/>2.82e+03,<sp/><sp/>2.46e+03,<sp/><sp/>1.39e+03,<sp/><sp/>9.21e+02,<sp/><sp/>7.39e+02,<sp/><sp/>5.17e+02,<sp/><sp/>3.70e+02,<sp/><sp/>2.35e+02,<sp/><sp/>9.65e+01,<sp/><sp/>8.19e+01,<sp/><sp/>4.20e+01,<sp/><sp/>1.82e+01,<sp/><sp/>3.14e+01<sp/>},</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/>2.04e+05,<sp/><sp/>1.04e+05,<sp/><sp/>5.31e+04,<sp/><sp/>3.17e+04,<sp/><sp/>1.88e+04,<sp/><sp/>1.07e+04,<sp/><sp/>9.18e+03,<sp/><sp/>9.02e+03,<sp/><sp/>2.61e+03,<sp/><sp/>1.72e+03,<sp/><sp/>1.70e+03,<sp/><sp/>8.55e+02,<sp/><sp/>4.52e+02,<sp/><sp/>4.67e+02,<sp/><sp/>2.48e+02,<sp/><sp/>2.66e+02,<sp/><sp/>1.54e+02,<sp/><sp/>5.04e+01,<sp/><sp/>3.33e+01,<sp/><sp/>1.19e+01,<sp/><sp/>3.21e+01,<sp/><sp/>7.98e+00<sp/>},</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/>8.34e+04,<sp/><sp/>4.51e+04,<sp/><sp/>2.34e+04,<sp/><sp/>1.44e+04,<sp/><sp/>8.81e+03,<sp/><sp/>5.16e+03,<sp/><sp/>4.39e+03,<sp/><sp/>2.61e+03,<sp/><sp/>2.40e+03,<sp/><sp/>9.22e+02,<sp/><sp/>8.94e+02,<sp/><sp/>4.67e+02,<sp/><sp/>2.13e+02,<sp/><sp/>2.41e+02,<sp/><sp/>1.41e+02,<sp/><sp/>1.29e+02,<sp/><sp/>4.70e+01,<sp/><sp/>4.41e+01,<sp/><sp/>7.64e+00,<sp/><sp/>2.08e+01,<sp/><sp/>2.55e+01,<sp/><sp/>5.49e+00<sp/>},</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/>5.37e+04,<sp/><sp/>2.84e+04,<sp/><sp/>1.50e+04,<sp/><sp/>9.22e+03,<sp/><sp/>5.73e+03,<sp/><sp/>2.92e+03,<sp/><sp/>2.82e+03,<sp/><sp/>1.72e+03,<sp/><sp/>9.22e+02,<sp/><sp/>1.09e+03,<sp/><sp/>5.17e+02,<sp/><sp/>3.03e+02,<sp/><sp/>1.62e+02,<sp/><sp/>1.47e+02,<sp/><sp/>8.91e+01,<sp/><sp/>8.18e+01,<sp/><sp/>3.17e+01,<sp/><sp/>2.10e+01,<sp/><sp/>1.29e+00,<sp/><sp/>7.42e+00,<sp/><sp/>7.72e+00,<sp/><sp/>4.62e+00<sp/>},</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/>4.62e+04,<sp/><sp/>2.30e+04,<sp/><sp/>1.35e+04,<sp/><sp/>8.15e+03,<sp/><sp/>5.46e+03,<sp/><sp/>2.83e+03,<sp/><sp/>2.46e+03,<sp/><sp/>1.70e+03,<sp/><sp/>8.94e+02,<sp/><sp/>5.17e+02,<sp/><sp/>1.02e+03,<sp/><sp/>2.65e+02,<sp/><sp/>1.57e+02,<sp/><sp/>1.61e+02,<sp/><sp/>9.22e+01,<sp/><sp/>7.94e+01,<sp/><sp/>3.84e+01,<sp/><sp/>3.39e+00,<sp/>-1.25e+00,<sp/><sp/>1.44e+01,<sp/><sp/>3.33e+00,<sp/>-8.96e-01<sp/>},</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/>2.33e+04,<sp/><sp/>1.22e+04,<sp/><sp/>7.00e+03,<sp/><sp/>4.06e+03,<sp/><sp/>2.57e+03,<sp/><sp/>1.62e+03,<sp/><sp/>1.39e+03,<sp/><sp/>8.55e+02,<sp/><sp/>4.67e+02,<sp/><sp/>3.03e+02,<sp/><sp/>2.65e+02,<sp/><sp/>3.24e+02,<sp/><sp/>8.57e+01,<sp/><sp/>9.07e+01,<sp/><sp/>5.83e+01,<sp/><sp/>3.02e+01,<sp/><sp/>2.70e+01,<sp/><sp/>2.00e+01,<sp/><sp/>7.02e+00,<sp/><sp/>2.25e+00,<sp/><sp/>5.15e+00,<sp/><sp/>7.06e+00<sp/>},</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/>1.45e+04,<sp/><sp/>7.56e+03,<sp/><sp/>4.20e+03,<sp/><sp/>2.88e+03,<sp/><sp/>1.78e+03,<sp/><sp/>9.76e+02,<sp/><sp/>9.21e+02,<sp/><sp/>4.52e+02,<sp/><sp/>2.13e+02,<sp/><sp/>1.62e+02,<sp/><sp/>1.57e+02,<sp/><sp/>8.57e+01,<sp/><sp/>1.96e+02,<sp/><sp/>5.21e+01,<sp/><sp/>3.91e+01,<sp/><sp/>3.92e+01,<sp/><sp/>2.69e+01,<sp/><sp/>8.90e+00,<sp/><sp/>6.55e+00,<sp/><sp/>0.00e+00,<sp/><sp/>1.46e+00,<sp/><sp/>1.57e+00<sp/>},</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/>1.20e+04,<sp/><sp/>6.48e+03,<sp/><sp/>3.30e+03,<sp/><sp/>2.00e+03,<sp/><sp/>1.34e+03,<sp/><sp/>8.77e+02,<sp/><sp/>7.39e+02,<sp/><sp/>4.67e+02,<sp/><sp/>2.41e+02,<sp/><sp/>1.47e+02,<sp/><sp/>1.61e+02,<sp/><sp/>9.07e+01,<sp/><sp/>5.21e+01,<sp/><sp/>1.44e+02,<sp/><sp/>3.02e+01,<sp/><sp/>2.02e+01,<sp/><sp/>1.44e+01,<sp/><sp/>3.18e+00,<sp/><sp/>4.68e-01,<sp/><sp/>4.50e+00,<sp/><sp/>2.18e+00,<sp/><sp/>3.02e+00<sp/>},</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/>6.66e+03,<sp/><sp/>3.24e+03,<sp/><sp/>2.26e+03,<sp/><sp/>1.32e+03,<sp/><sp/>6.98e+02,<sp/><sp/>3.82e+02,<sp/><sp/>5.17e+02,<sp/><sp/>2.48e+02,<sp/><sp/>1.41e+02,<sp/><sp/>8.91e+01,<sp/><sp/>9.22e+01,<sp/><sp/>5.83e+01,<sp/><sp/>3.91e+01,<sp/><sp/>3.02e+01,<sp/><sp/>8.10e+01,<sp/><sp/>1.15e+01,<sp/><sp/>1.19e+01,<sp/><sp/>7.63e+00,<sp/><sp/>3.16e+00,<sp/>-2.25e-01,<sp/><sp/>1.40e+00,<sp/><sp/>2.52e+00<sp/>},</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/>7.99e+03,<sp/><sp/>4.00e+03,<sp/><sp/>1.81e+03,<sp/><sp/>1.25e+03,<sp/><sp/>9.18e+02,<sp/><sp/>4.49e+02,<sp/><sp/>3.70e+02,<sp/><sp/>2.66e+02,<sp/><sp/>1.29e+02,<sp/><sp/>8.18e+01,<sp/><sp/>7.94e+01,<sp/><sp/>3.02e+01,<sp/><sp/>3.92e+01,<sp/><sp/>2.02e+01,<sp/><sp/>1.15e+01,<sp/><sp/>6.40e+01,<sp/><sp/>1.92e+00,<sp/>-1.27e+00,<sp/>-3.12e-01,<sp/><sp/>1.40e+00,<sp/><sp/>2.70e+00,<sp/>-6.72e-01<sp/>},</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/>4.00e+03,<sp/><sp/>2.28e+03,<sp/><sp/>1.12e+03,<sp/><sp/>7.06e+02,<sp/><sp/>4.28e+02,<sp/><sp/>2.04e+02,<sp/><sp/>2.35e+02,<sp/><sp/>1.54e+02,<sp/><sp/>4.70e+01,<sp/><sp/>3.17e+01,<sp/><sp/>3.84e+01,<sp/><sp/>2.70e+01,<sp/><sp/>2.69e+01,<sp/><sp/>1.44e+01,<sp/><sp/>1.19e+01,<sp/><sp/>1.92e+00,<sp/><sp/>3.60e+01,<sp/><sp/>5.09e+00,<sp/><sp/>3.74e+00,<sp/>-1.65e+00,<sp/><sp/>1.40e+00,<sp/><sp/>1.51e+00<sp/>},</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/>1.57e+03,<sp/><sp/>1.06e+03,<sp/><sp/>6.44e+02,<sp/><sp/>3.64e+02,<sp/><sp/>1.64e+02,<sp/><sp/>1.08e+02,<sp/><sp/>9.65e+01,<sp/><sp/>5.04e+01,<sp/><sp/>4.41e+01,<sp/><sp/>2.10e+01,<sp/><sp/>3.39e+00,<sp/><sp/>2.00e+01,<sp/><sp/>8.90e+00,<sp/><sp/>3.18e+00,<sp/><sp/>7.63e+00,<sp/>-1.27e+00,<sp/><sp/>5.09e+00,<sp/><sp/>2.81e+01,<sp/><sp/>6.20e-01,<sp/>-1.19e+00,<sp/><sp/>5.51e-01,<sp/>-4.45e-01<sp/>},</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/>0.00e+00,<sp/><sp/>1.56e+02,<sp/><sp/>2.21e+02,<sp/><sp/>5.73e+01,<sp/><sp/>3.63e+01,<sp/><sp/>9.95e+01,<sp/><sp/>8.19e+01,<sp/><sp/>3.33e+01,<sp/><sp/>7.64e+00,<sp/><sp/>1.29e+00,<sp/>-1.25e+00,<sp/><sp/>7.02e+00,<sp/><sp/>6.55e+00,<sp/><sp/>4.68e-01,<sp/><sp/>3.16e+00,<sp/>-3.12e-01,<sp/><sp/>3.74e+00,<sp/><sp/>6.20e-01,<sp/><sp/>1.52e+01,<sp/><sp/>7.80e-01,<sp/><sp/>3.04e-01,<sp/><sp/>1.64e+00<sp/>},</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/>1.30e+03,<sp/><sp/>8.00e+02,<sp/><sp/>3.04e+02,<sp/><sp/>1.59e+02,<sp/><sp/>1.32e+02,<sp/><sp/>1.02e+02,<sp/><sp/>4.20e+01,<sp/><sp/>1.19e+01,<sp/><sp/>2.08e+01,<sp/><sp/>7.42e+00,<sp/><sp/>1.44e+01,<sp/><sp/>2.25e+00,<sp/><sp/>0.00e+00,<sp/><sp/>4.50e+00,<sp/>-2.25e-01,<sp/><sp/>1.40e+00,<sp/>-1.65e+00,<sp/>-1.19e+00,<sp/><sp/>7.80e-01,<sp/><sp/>6.25e+00,<sp/><sp/>1.30e-01,<sp/><sp/>6.30e-01<sp/>},</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/>3.85e+02,<sp/><sp/>3.64e+02,<sp/><sp/>1.47e+02,<sp/><sp/>7.64e+01,<sp/><sp/>1.05e+02,<sp/><sp/>3.98e+01,<sp/><sp/>1.82e+01,<sp/><sp/>3.21e+01,<sp/><sp/>2.55e+01,<sp/><sp/>7.72e+00,<sp/><sp/>3.33e+00,<sp/><sp/>5.15e+00,<sp/><sp/>1.46e+00,<sp/><sp/>2.18e+00,<sp/><sp/>1.40e+00,<sp/><sp/>2.70e+00,<sp/><sp/>1.40e+00,<sp/><sp/>5.51e-01,<sp/><sp/>3.04e-01,<sp/><sp/>1.30e-01,<sp/><sp/>6.76e+00,<sp/><sp/>5.82e-01<sp/>},</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>-4.14e+02,<sp/>-1.68e+02,<sp/><sp/>2.27e+01,<sp/>-2.74e+01,<sp/>-8.68e+00,<sp/><sp/>4.76e+00,<sp/><sp/>3.14e+01,<sp/><sp/>7.98e+00,<sp/><sp/>5.49e+00,<sp/><sp/>4.62e+00,<sp/>-8.96e-01,<sp/><sp/>7.06e+00,<sp/><sp/>1.57e+00,<sp/><sp/>3.02e+00,<sp/><sp/>2.52e+00,<sp/>-6.72e-01,<sp/><sp/>1.51e+00,<sp/>-4.45e-01,<sp/><sp/>1.64e+00,<sp/><sp/>6.30e-01,<sp/><sp/>5.82e-01,<sp/><sp/>7.84e+00<sp/>}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Save<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_ainfo-&gt;add_bkgcov(bkgcov);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>interpolated<sp/>functions<sp/>for<sp/>the<sp/>CMS<sp/>analysis:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>2d<sp/>cross-sections</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>colnames<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;mass&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;theta&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;xsec&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_ainfo-&gt;add_interp2d(</highlight><highlight class="stringliteral">&quot;mass_theta_xsecpb_C61_C64&quot;</highlight><highlight class="normal">,<sp/>GAMBIT_DIR<sp/></highlight><highlight class="stringliteral">&quot;/ColliderBit/data/DMEFT/mass_theta_xsecpb_CMS_C61_C64.txt&quot;</highlight><highlight class="normal">,<sp/>colnames);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_ainfo-&gt;add_interp2d(</highlight><highlight class="stringliteral">&quot;mass_theta_xsecpb_C62_C63&quot;</highlight><highlight class="normal">,<sp/>GAMBIT_DIR<sp/></highlight><highlight class="stringliteral">&quot;/ColliderBit/data/DMEFT/mass_theta_xsecpb_CMS_C62_C63.txt&quot;</highlight><highlight class="normal">,<sp/>colnames);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>1d<sp/>cross-sections</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>colnames<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;mass&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;xsec&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_ainfo-&gt;add_interp1d(</highlight><highlight class="stringliteral">&quot;mass_xsecpb_C71&quot;</highlight><highlight class="normal">,<sp/>GAMBIT_DIR<sp/></highlight><highlight class="stringliteral">&quot;/ColliderBit/data/DMEFT/mass_xsecpb_CMS_C71.txt&quot;</highlight><highlight class="normal">,<sp/>colnames);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_ainfo-&gt;add_interp1d(</highlight><highlight class="stringliteral">&quot;mass_xsecpb_C72&quot;</highlight><highlight class="normal">,<sp/>GAMBIT_DIR<sp/></highlight><highlight class="stringliteral">&quot;/ColliderBit/data/DMEFT/mass_xsecpb_CMS_C72.txt&quot;</highlight><highlight class="normal">,<sp/>colnames);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_ainfo-&gt;add_interp1d(</highlight><highlight class="stringliteral">&quot;mass_xsecpb_C73&quot;</highlight><highlight class="normal">,<sp/>GAMBIT_DIR<sp/></highlight><highlight class="stringliteral">&quot;/ColliderBit/data/DMEFT/mass_xsecpb_CMS_C73.txt&quot;</highlight><highlight class="normal">,<sp/>colnames);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_ainfo-&gt;add_interp1d(</highlight><highlight class="stringliteral">&quot;mass_xsecpb_C74&quot;</highlight><highlight class="normal">,<sp/>GAMBIT_DIR<sp/></highlight><highlight class="stringliteral">&quot;/ColliderBit/data/DMEFT/mass_xsecpb_CMS_C74.txt&quot;</highlight><highlight class="normal">,<sp/>colnames);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>2d<sp/>signal<sp/>efficiencies</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>colnames<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;mass&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;theta&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;SR1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;SR2&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;SR3&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;SR4&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;SR5&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;SR6&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;SR7&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;SR8&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;SR9&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;SR10&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;SR11&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;SR12&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;SR13&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;SR14&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;SR15&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;SR16&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;SR17&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;SR18&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;SR19&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;SR20&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;SR21&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;SR22&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_ainfo-&gt;add_interp2d(</highlight><highlight class="stringliteral">&quot;mass_theta_eff_C61_C64&quot;</highlight><highlight class="normal">,<sp/>GAMBIT_DIR<sp/></highlight><highlight class="stringliteral">&quot;/ColliderBit/data/DMEFT/mass_theta_eff_CMS_C61_C64.txt&quot;</highlight><highlight class="normal">,<sp/>colnames);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_ainfo-&gt;add_interp2d(</highlight><highlight class="stringliteral">&quot;mass_theta_eff_C62_C63&quot;</highlight><highlight class="normal">,<sp/>GAMBIT_DIR<sp/></highlight><highlight class="stringliteral">&quot;/ColliderBit/data/DMEFT/mass_theta_eff_CMS_C62_C63.txt&quot;</highlight><highlight class="normal">,<sp/>colnames);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>1d<sp/>signal<sp/>efficiencies</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>colnames<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;mass&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;SR1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;SR2&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;SR3&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;SR4&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;SR5&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;SR6&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;SR7&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;SR8&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;SR9&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;SR10&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;SR11&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;SR12&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;SR13&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;SR14&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;SR15&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;SR16&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;SR17&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;SR18&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;SR19&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;SR20&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;SR21&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;SR22&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_ainfo-&gt;add_interp1d(</highlight><highlight class="stringliteral">&quot;mass_eff_C71&quot;</highlight><highlight class="normal">,<sp/>GAMBIT_DIR<sp/></highlight><highlight class="stringliteral">&quot;/ColliderBit/data/DMEFT/mass_eff_CMS_C71.txt&quot;</highlight><highlight class="normal">,<sp/>colnames);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_ainfo-&gt;add_interp1d(</highlight><highlight class="stringliteral">&quot;mass_eff_C72&quot;</highlight><highlight class="normal">,<sp/>GAMBIT_DIR<sp/></highlight><highlight class="stringliteral">&quot;/ColliderBit/data/DMEFT/mass_eff_CMS_C72.txt&quot;</highlight><highlight class="normal">,<sp/>colnames);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_ainfo-&gt;add_interp1d(</highlight><highlight class="stringliteral">&quot;mass_eff_C73&quot;</highlight><highlight class="normal">,<sp/>GAMBIT_DIR<sp/></highlight><highlight class="stringliteral">&quot;/ColliderBit/data/DMEFT/mass_eff_CMS_C73.txt&quot;</highlight><highlight class="normal">,<sp/>colnames);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_ainfo-&gt;add_interp1d(</highlight><highlight class="stringliteral">&quot;mass_eff_C74&quot;</highlight><highlight class="normal">,<sp/>GAMBIT_DIR<sp/></highlight><highlight class="stringliteral">&quot;/ColliderBit/data/DMEFT/mass_eff_CMS_C74.txt&quot;</highlight><highlight class="normal">,<sp/>colnames);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&apos;Clear&apos;<sp/>the<sp/>pointer<sp/>current_ainfo<sp/>before<sp/>moving<sp/>on<sp/>to<sp/>the<sp/>next<sp/>analysis<sp/>by<sp/>pointing<sp/>it<sp/>to<sp/>empty_analysis_info</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_ainfo<sp/>=<sp/>&amp;empty_analysis_info;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>New<sp/>analysis:<sp/>ATLAS_13TeV_MONOJET_139invfb_interpolated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Analysis<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_analysis_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ATLAS_13TeV_MONOJET_139invfb_interpolated&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>an<sp/>entry<sp/>in<sp/>the<sp/>global<sp/>analysis_info_map<sp/>and<sp/>point<sp/>the<sp/>reference<sp/>current_ainfo<sp/>to<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ColliderBit__InterpolatedYields_8cpp_1af1fb89b8d6e6ddc3406d109c275b16f8" kindref="member">analysis_info_map</ref>[current_analysis_name]<sp/>=<sp/>DMEFT_analysis_info();</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_ainfo<sp/>=<sp/>&amp;(<ref refid="ColliderBit__InterpolatedYields_8cpp_1af1fb89b8d6e6ddc3406d109c275b16f8" kindref="member">analysis_info_map</ref>[current_analysis_name]);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_ainfo-&gt;name<sp/>=<sp/>current_analysis_name;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_ainfo-&gt;lumi_invfb<sp/>=<sp/>139.0;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_ainfo-&gt;obsnum<sp/>=<sp/>{1791624,<sp/>752328,<sp/>313912,<sp/>141036,<sp/>102888,<sp/>29458,<sp/>10203,<sp/>3986,<sp/>1663,<sp/>738,<sp/>413+187+207};</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_ainfo-&gt;bkgnum<sp/>=<sp/>{1783000.,<sp/>753000.,<sp/>314000.,<sp/>140100.,<sp/>101600.,<sp/>29200.,<sp/>10000.,<sp/>3870.,<sp/>1640.,<sp/>754.,<sp/>359.+182.+218.};</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_ainfo-&gt;bkgerr<sp/>=<sp/>{26000.,<sp/>9000.,<sp/>3500.,<sp/>1600.,<sp/>1200.,<sp/>400.,<sp/>180.,<sp/>80.,<sp/>40.,<sp/>20.,<sp/>sqrt(10*10+6*6+9*9)};</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(current_ainfo-&gt;obsnum.size()<sp/>==<sp/>current_ainfo-&gt;bkgnum.size());</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(current_ainfo-&gt;obsnum.size()<sp/>==<sp/>current_ainfo-&gt;bkgerr.size());</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_ainfo-&gt;n_signal_regions<sp/>=<sp/>current_ainfo-&gt;obsnum.size();</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_ainfo-&gt;extra_info[</highlight><highlight class="stringliteral">&quot;metmins&quot;</highlight><highlight class="normal">]<sp/>=<sp/>{200.,<sp/>250.,<sp/>300.,<sp/>350.,<sp/>400.,<sp/>500.,<sp/>600.,<sp/>700.,<sp/>800.,<sp/>900.,<sp/>1000.};</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(current_ainfo-&gt;obsnum.size()<sp/>==<sp/>current_ainfo-&gt;extra_info[</highlight><highlight class="stringliteral">&quot;metmins&quot;</highlight><highlight class="normal">].size());</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>interpolated<sp/>functions<sp/>for<sp/>the<sp/>ATLAS<sp/>analysis:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>2d<sp/>cross-sections</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>colnames<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;mass&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;theta&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;xsec&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_ainfo-&gt;add_interp2d(</highlight><highlight class="stringliteral">&quot;mass_theta_xsecpb_C61_C64&quot;</highlight><highlight class="normal">,<sp/>GAMBIT_DIR<sp/></highlight><highlight class="stringliteral">&quot;/ColliderBit/data/DMEFT/mass_theta_xsecpb_ATLAS_C61_C64.txt&quot;</highlight><highlight class="normal">,<sp/>colnames);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_ainfo-&gt;add_interp2d(</highlight><highlight class="stringliteral">&quot;mass_theta_xsecpb_C62_C63&quot;</highlight><highlight class="normal">,<sp/>GAMBIT_DIR<sp/></highlight><highlight class="stringliteral">&quot;/ColliderBit/data/DMEFT/mass_theta_xsecpb_ATLAS_C62_C63.txt&quot;</highlight><highlight class="normal">,<sp/>colnames);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>1d<sp/>cross-sections</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>colnames<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;mass&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;xsec&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_ainfo-&gt;add_interp1d(</highlight><highlight class="stringliteral">&quot;mass_xsecpb_C71&quot;</highlight><highlight class="normal">,<sp/>GAMBIT_DIR<sp/></highlight><highlight class="stringliteral">&quot;/ColliderBit/data/DMEFT/mass_xsecpb_ATLAS_C71.txt&quot;</highlight><highlight class="normal">,<sp/>colnames);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_ainfo-&gt;add_interp1d(</highlight><highlight class="stringliteral">&quot;mass_xsecpb_C72&quot;</highlight><highlight class="normal">,<sp/>GAMBIT_DIR<sp/></highlight><highlight class="stringliteral">&quot;/ColliderBit/data/DMEFT/mass_xsecpb_ATLAS_C72.txt&quot;</highlight><highlight class="normal">,<sp/>colnames);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_ainfo-&gt;add_interp1d(</highlight><highlight class="stringliteral">&quot;mass_xsecpb_C73&quot;</highlight><highlight class="normal">,<sp/>GAMBIT_DIR<sp/></highlight><highlight class="stringliteral">&quot;/ColliderBit/data/DMEFT/mass_xsecpb_ATLAS_C73.txt&quot;</highlight><highlight class="normal">,<sp/>colnames);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_ainfo-&gt;add_interp1d(</highlight><highlight class="stringliteral">&quot;mass_xsecpb_C74&quot;</highlight><highlight class="normal">,<sp/>GAMBIT_DIR<sp/></highlight><highlight class="stringliteral">&quot;/ColliderBit/data/DMEFT/mass_xsecpb_ATLAS_C74.txt&quot;</highlight><highlight class="normal">,<sp/>colnames);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>2d<sp/>signal<sp/>efficiencies</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>colnames<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;mass&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;theta&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;SR1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;SR2&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;SR3&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;SR4&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;SR5&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;SR6&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;SR7&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;SR8&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;SR9&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;SR10&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;SR11&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_ainfo-&gt;add_interp2d(</highlight><highlight class="stringliteral">&quot;mass_theta_eff_C61_C64&quot;</highlight><highlight class="normal">,<sp/>GAMBIT_DIR<sp/></highlight><highlight class="stringliteral">&quot;/ColliderBit/data/DMEFT/mass_theta_eff_ATLAS_C61_C64.txt&quot;</highlight><highlight class="normal">,<sp/>colnames);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_ainfo-&gt;add_interp2d(</highlight><highlight class="stringliteral">&quot;mass_theta_eff_C62_C63&quot;</highlight><highlight class="normal">,<sp/>GAMBIT_DIR<sp/></highlight><highlight class="stringliteral">&quot;/ColliderBit/data/DMEFT/mass_theta_eff_ATLAS_C62_C63.txt&quot;</highlight><highlight class="normal">,<sp/>colnames);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>1d<sp/>signal<sp/>efficiencies</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>colnames<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;mass&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;SR1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;SR2&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;SR3&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;SR4&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;SR5&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;SR6&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;SR7&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;SR8&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;SR9&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;SR10&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;SR11&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_ainfo-&gt;add_interp1d(</highlight><highlight class="stringliteral">&quot;mass_eff_C71&quot;</highlight><highlight class="normal">,<sp/>GAMBIT_DIR<sp/></highlight><highlight class="stringliteral">&quot;/ColliderBit/data/DMEFT/mass_eff_ATLAS_C71.txt&quot;</highlight><highlight class="normal">,<sp/>colnames);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_ainfo-&gt;add_interp1d(</highlight><highlight class="stringliteral">&quot;mass_eff_C72&quot;</highlight><highlight class="normal">,<sp/>GAMBIT_DIR<sp/></highlight><highlight class="stringliteral">&quot;/ColliderBit/data/DMEFT/mass_eff_ATLAS_C72.txt&quot;</highlight><highlight class="normal">,<sp/>colnames);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_ainfo-&gt;add_interp1d(</highlight><highlight class="stringliteral">&quot;mass_eff_C73&quot;</highlight><highlight class="normal">,<sp/>GAMBIT_DIR<sp/></highlight><highlight class="stringliteral">&quot;/ColliderBit/data/DMEFT/mass_eff_ATLAS_C73.txt&quot;</highlight><highlight class="normal">,<sp/>colnames);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_ainfo-&gt;add_interp1d(</highlight><highlight class="stringliteral">&quot;mass_eff_C74&quot;</highlight><highlight class="normal">,<sp/>GAMBIT_DIR<sp/></highlight><highlight class="stringliteral">&quot;/ColliderBit/data/DMEFT/mass_eff_ATLAS_C74.txt&quot;</highlight><highlight class="normal">,<sp/>colnames);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&apos;Clear&apos;<sp/>the<sp/>pointer<sp/>current_ainfo<sp/>before<sp/>moving<sp/>on<sp/>to<sp/>the<sp/>next<sp/>analysis<sp/>by<sp/>pointing<sp/>it<sp/>to<sp/>empty_analysis_info</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_ainfo<sp/>=<sp/>&amp;empty_analysis_info;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ColliderBit__InterpolatedYields_8cpp_1ac3973f4ef16dc84eb1ec3873f15c61b0" kindref="member">DMEFT_results</ref>(AnalysisDataPointers&amp;<sp/>result)</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Pipes::DMEFT_results;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>this<sp/>function<sp/>we<sp/>need<sp/>to<sp/>transfer<sp/>info<sp/>from<sp/>the<sp/>DMEFT-specific<sp/>DMEFT_analysis_info<sp/>objects</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>a<sp/>set<sp/>of<sp/>ColliderBit-native<sp/>AnalysisData<sp/>objects,<sp/>and<sp/>also<sp/>fill<sp/>these<sp/>with<sp/>the<sp/>DMEFT<sp/>signal<sp/>prediction.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>need<sp/>thread_local<sp/>AnalysisData<sp/>instances.<sp/>Let&apos;s<sp/>collect<sp/>them<sp/>in<sp/>a<sp/>map.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">thread_local</highlight><highlight class="normal"><sp/>std::map&lt;str,AnalysisData&gt;<sp/>analysis_data_map;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>first<sp/>time<sp/>this<sp/>function<sp/>is<sp/>run<sp/>we<sp/>must<sp/>initialize<sp/>the<sp/>global<sp/>analysis_info_map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>the<sp/>thread_local<sp/>analysis_data_map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first)</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ColliderBit__InterpolatedYields_8cpp_1a77e1e6f4e83205760ee6e97eac487757" kindref="member">fill_analysis_info_map</ref>();</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;str,const<sp/>DMEFT_analysis_info&amp;&gt;<sp/>aname_ainfo_pair<sp/>:<sp/>analysis_info_map)</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Extract<sp/>analysis<sp/>name<sp/>and<sp/>use<sp/>it<sp/>to<sp/>create<sp/>an<sp/>AnalysisData<sp/>element<sp/>in<sp/>the<sp/>analysis_data_map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str<sp/>aname<sp/>=<sp/>aname_ainfo_pair.first;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysis_data_map[aname]<sp/>=<sp/>AnalysisData(aname);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Clear<sp/>previous<sp/>vectors,<sp/>etc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.clear();</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>theory<sp/>spectrum<sp/>to<sp/>pass<sp/>on<sp/>masses<sp/>and<sp/>parameters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Spectrum&amp;<sp/>spec<sp/>=<sp/>*Dep::DMEFT_spectrum;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Loop<sp/>over<sp/>the<sp/>analyses<sp/>registered<sp/>in<sp/>the<sp/>analysis_info_map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;str,const<sp/>DMEFT_analysis_info&amp;&gt;<sp/>aname_ainfo_pair<sp/>:<sp/>analysis_info_map)</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Extract<sp/>analysis<sp/>name<sp/>and<sp/>reference<sp/>to<sp/>the<sp/>analysis_info<sp/>instance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str<sp/>aname<sp/>=<sp/>aname_ainfo_pair.first;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DMEFT_analysis_info&amp;<sp/>ainfo<sp/>=<sp/>aname_ainfo_pair.second;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Grab<sp/>a<sp/>reference<sp/>to<sp/>corresponding<sp/>AnalysisData<sp/>instance<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>clear<sp/>it<sp/>before<sp/>we<sp/>start<sp/>filling<sp/>it<sp/>for<sp/>the<sp/>current<sp/>parameter<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AnalysisData&amp;<sp/>adata<sp/>=<sp/>analysis_data_map.at(aname);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>adata.clear();</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Vector<sp/>to<sp/>contain<sp/>signal<sp/>yield<sp/>predictions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>sr_nums(ainfo.n_signal_regions,<sp/>0.);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Fill<sp/>the<sp/>signal<sp/>yield<sp/>vector<sp/>with<sp/>DMEFT<sp/>signal<sp/>predictions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ColliderBit__InterpolatedYields_8cpp_1add7205c37867015ac8b11e4a9987c43c" kindref="member">get_all_DMEFT_signal_yields</ref>(sr_nums,<sp/>ainfo,<sp/>spec);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>vector<sp/>of<sp/>SignalRegionData<sp/>instances</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;SignalRegionData&gt;<sp/>srdata_vector;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sr_index<sp/>=<sp/>0;<sp/>sr_index<sp/>&lt;<sp/>ainfo.n_signal_regions;<sp/>++sr_index)<sp/></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Generate<sp/>an<sp/>&apos;sr-N&apos;<sp/>label<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::stringstream<sp/>ss;<sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;sr-&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>sr_index;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Construct<sp/>a<sp/>SignalRegionData<sp/>instance<sp/>and<sp/>add<sp/>it<sp/>to<sp/>srdata_vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SignalRegionData<sp/>sr;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sr.sr_label<sp/>=<sp/>ss.str();</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sr.n_obs<sp/>=<sp/>ainfo.obsnum.at(sr_index);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sr.n_sig_MC<sp/>=<sp/>sr_nums.at(sr_index);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sr.n_sig_scaled<sp/>=<sp/>sr_nums.at(sr_index);<sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>have<sp/>already<sp/>scaled<sp/>the<sp/>signals<sp/>in<sp/>sr_nums<sp/>to<sp/>xsec<sp/>*<sp/>lumi</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sr.n_sig_MC_sys<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sr.n_bkg<sp/>=<sp/>ainfo.bkgnum.at(sr_index);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sr.n_bkg_err<sp/>=<sp/>ainfo.bkgerr.at(sr_index);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>srdata_vector.push_back(sr);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Save<sp/>our<sp/>vector<sp/>of<sp/>SignalRegionData<sp/>in<sp/>the<sp/>AnalysisData<sp/>instance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>adata.srdata<sp/>=<sp/>srdata_vector;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>this<sp/>analysis<sp/>has<sp/>a<sp/>background<sp/>covariance<sp/>matrix,<sp/>copy<sp/>it<sp/>to<sp/>the<sp/>AnalysisData<sp/>instance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ainfo.bkgcov.size()<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>adata.srcov<sp/>=<sp/>ainfo.bkgcov;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Save<sp/>a<sp/>pointer<sp/>to<sp/>our<sp/>AnalysisData<sp/>instance<sp/>in<sp/>the<sp/>&apos;result&apos;<sp/>variable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.push_back(&amp;adata);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>End<sp/>loop<sp/>over<sp/>analyses</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ColliderBit__InterpolatedYields_8cpp_1add7205c37867015ac8b11e4a9987c43c" kindref="member">get_all_DMEFT_signal_yields</ref>(std::vector&lt;double&gt;&amp;<sp/>sr_nums,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DMEFT_analysis_info&amp;<sp/>analysis_info,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Spectrum&amp;<sp/>spec)</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>parameters<sp/>we<sp/>need<sp/>from<sp/>the<sp/>theory<sp/>spectrum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>C61<sp/>=<sp/>spec.get(Par::dimensionless,<sp/></highlight><highlight class="stringliteral">&quot;C61&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>C62<sp/>=<sp/>spec.get(Par::dimensionless,<sp/></highlight><highlight class="stringliteral">&quot;C62&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>C63<sp/>=<sp/>spec.get(Par::dimensionless,<sp/></highlight><highlight class="stringliteral">&quot;C63&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>C64<sp/>=<sp/>spec.get(Par::dimensionless,<sp/></highlight><highlight class="stringliteral">&quot;C64&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>C71<sp/>=<sp/>spec.get(Par::dimensionless,<sp/></highlight><highlight class="stringliteral">&quot;C71&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>C72<sp/>=<sp/>spec.get(Par::dimensionless,<sp/></highlight><highlight class="stringliteral">&quot;C72&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>C73<sp/>=<sp/>spec.get(Par::dimensionless,<sp/></highlight><highlight class="stringliteral">&quot;C73&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>C74<sp/>=<sp/>spec.get(Par::dimensionless,<sp/></highlight><highlight class="stringliteral">&quot;C74&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lambda<sp/>=<sp/>spec.get(Par::mass1,<sp/></highlight><highlight class="stringliteral">&quot;Lambda&quot;</highlight><highlight class="normal">);<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>spec.get(Par::Pole_Mass,<sp/></highlight><highlight class="stringliteral">&quot;chi&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>dim-6<sp/>yields</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>C61+C64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>sig_C61_C64(analysis_info.n_signal_regions,<sp/>0.);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ColliderBit__InterpolatedYields_8cpp_1a89d3209ad6993f929779ec026e09f5a1" kindref="member">get_DMEFT_signal_yields_dim6_operator</ref>(sig_C61_C64,<sp/></highlight><highlight class="stringliteral">&quot;C61_C64&quot;</highlight><highlight class="normal">,<sp/>analysis_info,<sp/>m,<sp/>C61,<sp/>C64,<sp/>lambda);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>C62+C63</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>sig_C62_C63(analysis_info.n_signal_regions,<sp/>0.);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ColliderBit__InterpolatedYields_8cpp_1a89d3209ad6993f929779ec026e09f5a1" kindref="member">get_DMEFT_signal_yields_dim6_operator</ref>(sig_C62_C63,<sp/></highlight><highlight class="stringliteral">&quot;C62_C63&quot;</highlight><highlight class="normal">,<sp/>analysis_info,<sp/>m,<sp/>C62,<sp/>C63,<sp/>lambda);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>dim-7<sp/>yields</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>C71</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>sig_C71(analysis_info.n_signal_regions,<sp/>0.);</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ColliderBit__InterpolatedYields_8cpp_1abac0f0c989a899660856fc73b28e8a1d" kindref="member">get_DMEFT_signal_yields_dim7_operator</ref>(sig_C71,<sp/></highlight><highlight class="stringliteral">&quot;C71&quot;</highlight><highlight class="normal">,<sp/>analysis_info,<sp/>m,<sp/>C71,<sp/>lambda);</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>C72</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>sig_C72(analysis_info.n_signal_regions,<sp/>0.);</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ColliderBit__InterpolatedYields_8cpp_1abac0f0c989a899660856fc73b28e8a1d" kindref="member">get_DMEFT_signal_yields_dim7_operator</ref>(sig_C72,<sp/></highlight><highlight class="stringliteral">&quot;C72&quot;</highlight><highlight class="normal">,<sp/>analysis_info,<sp/>m,<sp/>C72,<sp/>lambda);</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>C73</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>sig_C73(analysis_info.n_signal_regions,<sp/>0.);</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ColliderBit__InterpolatedYields_8cpp_1abac0f0c989a899660856fc73b28e8a1d" kindref="member">get_DMEFT_signal_yields_dim7_operator</ref>(sig_C73,<sp/></highlight><highlight class="stringliteral">&quot;C73&quot;</highlight><highlight class="normal">,<sp/>analysis_info,<sp/>m,<sp/>C73,<sp/>lambda);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>C74</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>sig_C74(analysis_info.n_signal_regions,<sp/>0.);</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ColliderBit__InterpolatedYields_8cpp_1abac0f0c989a899660856fc73b28e8a1d" kindref="member">get_DMEFT_signal_yields_dim7_operator</ref>(sig_C74,<sp/></highlight><highlight class="stringliteral">&quot;C74&quot;</highlight><highlight class="normal">,<sp/>analysis_info,<sp/>m,<sp/>C74,<sp/>lambda);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>yields<sp/>and<sp/>save<sp/>in<sp/>sr_num</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>analysis_info.n_signal_regions;<sp/>++i)</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sr_nums[i]<sp/>=<sp/>sig_C61_C64[i]<sp/>+<sp/>sig_C62_C63[i]<sp/>+<sp/>sig_C71[i]<sp/>+<sp/>sig_C72[i]<sp/>+<sp/>sig_C73[i]<sp/>+<sp/>sig_C74[i];</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ColliderBit__InterpolatedYields_8cpp_1a89d3209ad6993f929779ec026e09f5a1" kindref="member">get_DMEFT_signal_yields_dim6_operator</ref>(std::vector&lt;double&gt;&amp;<sp/>signal_yields,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>str<sp/>operator_key,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DMEFT_analysis_info&amp;<sp/>analysis_info,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>m,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>O1,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>O2,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lambda)</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>theta</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>theta;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(O2==0)</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theta<sp/>=<sp/>0.5<sp/>*<sp/>pi;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theta<sp/>=<sp/>atan(O1<sp/>/<sp/>O2);</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>O1<sp/>/<sp/>O2<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theta<sp/>=<sp/>theta<sp/>+<sp/>pi;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>normalisation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>norm<sp/>=<sp/>O1*O1<sp/>+<sp/>O2*O2;</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(norm<sp/>&lt;<sp/>0.0)</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ColliderBit_error().raise(LOCAL_INFO,<sp/></highlight><highlight class="stringliteral">&quot;ERROR!<sp/>norm<sp/>&lt;<sp/>0<sp/>in<sp/>function<sp/>get_DMEFT_signal_yields_dim6_operator.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Scaling<sp/>with<sp/>lambda,<sp/>relative<sp/>to<sp/>lambda<sp/>=<sp/>1000<sp/>GeV<sp/>which<sp/>was<sp/>used<sp/>to<sp/>generate<sp/>the<sp/>data<sp/>tables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lambda_scaling<sp/>=<sp/>pow(1000.0<sp/>/<sp/>lambda,<sp/>4);</highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>interpolator<sp/>collections<sp/>for<sp/>the<sp/>given<sp/>operator_key</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Utils::interp2d_collection&amp;<sp/>xsec_interp<sp/>=<sp/>analysis_info.get_interp2d(</highlight><highlight class="stringliteral">&quot;mass_theta_xsecpb_&quot;</highlight><highlight class="normal"><sp/>+<sp/>operator_key);</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Utils::interp2d_collection&amp;<sp/>eff_interp<sp/>=<sp/>analysis_info.get_interp2d(</highlight><highlight class="stringliteral">&quot;mass_theta_eff_&quot;</highlight><highlight class="normal"><sp/>+<sp/>operator_key);</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>the<sp/>signal<sp/>yield<sp/>for<sp/>each<sp/>signal<sp/>region</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sr_i<sp/>=<sp/>0;<sp/>sr_i<sp/>&lt;<sp/>analysis_info.n_signal_regions;<sp/>++sr_i)</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>cross-section<sp/>at<sp/>the<sp/>point<sp/>(m,theta)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xsec_pb<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>(m,theta)<sp/>point<sp/>is<sp/>inside<sp/>interpolation<sp/>region</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/>xsec_interp.is_inside_range(m,theta))</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(theta<sp/>&lt;<sp/>xsec_interp.y_min<sp/>||<sp/>theta<sp/>&gt;<sp/>xsec_interp.y_max)</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ColliderBit_error().raise(LOCAL_INFO,<sp/></highlight><highlight class="stringliteral">&quot;ERROR!<sp/>Theta<sp/>parameter<sp/>out<sp/>of<sp/>range.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m<sp/>&lt;<sp/>xsec_interp.x_min)</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ColliderBit_error().raise(LOCAL_INFO,<sp/></highlight><highlight class="stringliteral">&quot;Mass<sp/>parameter<sp/>below<sp/>lowest<sp/>mass<sp/>point<sp/>in<sp/>the<sp/>cross-section<sp/>table.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m<sp/>&gt;<sp/>xsec_interp.x_min)</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>cross-section<sp/>to<sp/>0<sp/>for<sp/>masses<sp/>above<sp/>the<sp/>tabulated<sp/>range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xsec_pb<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>All<sp/>is<sp/>OK,<sp/>let&apos;s<sp/>evaluate<sp/>the<sp/>cross-section</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xsec_pb<sp/>=<sp/>xsec_interp.eval(m,<sp/>theta);</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>signal<sp/>efficiency<sp/>for<sp/>signal<sp/>region<sp/>sr_i<sp/>at<sp/>the<sp/>point<sp/>(m,theta)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eff<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>(m,theta)<sp/>point<sp/>is<sp/>inside<sp/>interpolation<sp/>region</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/>eff_interp.is_inside_range(m,theta))</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(theta<sp/>&lt;<sp/>eff_interp.y_min<sp/>||<sp/>theta<sp/>&gt;<sp/>eff_interp.y_max)</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ColliderBit_error().raise(LOCAL_INFO,<sp/></highlight><highlight class="stringliteral">&quot;ERROR!<sp/>Theta<sp/>parameter<sp/>out<sp/>of<sp/>range.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m<sp/>&lt;<sp/>eff_interp.x_min)</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ColliderBit_error().raise(LOCAL_INFO,<sp/></highlight><highlight class="stringliteral">&quot;Mass<sp/>parameter<sp/>below<sp/>lowest<sp/>mass<sp/>point<sp/>in<sp/>the<sp/>signal<sp/>efficiency<sp/>table.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m<sp/>&gt;<sp/>eff_interp.x_min)</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>efficiency<sp/>to<sp/>0<sp/>for<sp/>masses<sp/>above<sp/>the<sp/>tabulated<sp/>range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eff<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>All<sp/>is<sp/>OK,<sp/>let&apos;s<sp/>evaluate<sp/>the<sp/>efficiency</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eff<sp/>=<sp/>eff_interp.eval(m,<sp/>theta,<sp/>sr_i);</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>signal<sp/>prediction<sp/>and<sp/>save<sp/>it<sp/>in<sp/>the<sp/>signal_yields<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>signal_yields[sr_i]<sp/>=<sp/>analysis_info.lumi_invfb<sp/>*<sp/>(xsec_pb<sp/>*<sp/>1000.)<sp/>*<sp/>norm<sp/>*<sp/>lambda_scaling<sp/>*<sp/>eff;<sp/></highlight><highlight class="comment">//<sp/>converting<sp/>cross-section<sp/>from<sp/>pb<sp/>to<sp/>fb</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#ifdef<sp/>COLLIDERBIT_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/>std::scientific<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;DEBUG:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>operator:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>operator_key<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>analysis:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>analysis_info.name<sp/></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>sr_i:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>sr_i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>m:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>theta:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>theta<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>xsec_pb:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>xsec_pb<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>eff:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>eff<sp/></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>lambda_scaling:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>lambda_scaling<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>norm:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>norm<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>signal:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>signal_yields[sr_i]<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>End<sp/>loop<sp/>over<sp/>signal<sp/>regions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ColliderBit__InterpolatedYields_8cpp_1abac0f0c989a899660856fc73b28e8a1d" kindref="member">get_DMEFT_signal_yields_dim7_operator</ref>(std::vector&lt;double&gt;&amp;<sp/>signal_yields,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>str<sp/>operator_key,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DMEFT_analysis_info&amp;<sp/>analysis_info,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>m,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>O,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lambda)</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>normalisation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>norm<sp/>=<sp/>O*O;</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(norm<sp/>&lt;<sp/>0.0)</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ColliderBit_error().raise(LOCAL_INFO,<sp/></highlight><highlight class="stringliteral">&quot;ERROR!<sp/>norm<sp/>&lt;<sp/>0<sp/>in<sp/>function<sp/>get_DMEFT_signal_yields_dim7_operator.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Scaling<sp/>with<sp/>lambda,<sp/>relative<sp/>to<sp/>lambda<sp/>=<sp/>1000<sp/>GeV<sp/>which<sp/>was<sp/>used<sp/>to<sp/>generate<sp/>the<sp/>data<sp/>tables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lambda_scaling<sp/>=<sp/>pow(1000.0<sp/>/<sp/>lambda,<sp/>6);</highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>interpolator<sp/>collections<sp/>for<sp/>the<sp/>given<sp/>operator_key</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Utils::interp1d_collection&amp;<sp/>xsec_interp<sp/>=<sp/>analysis_info.get_interp1d(</highlight><highlight class="stringliteral">&quot;mass_xsecpb_&quot;</highlight><highlight class="normal"><sp/>+<sp/>operator_key);</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Utils::interp1d_collection&amp;<sp/>eff_interp<sp/>=<sp/>analysis_info.get_interp1d(</highlight><highlight class="stringliteral">&quot;mass_eff_&quot;</highlight><highlight class="normal"><sp/>+<sp/>operator_key);</highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>the<sp/>signal<sp/>yield<sp/>for<sp/>each<sp/>signal<sp/>region</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sr_i<sp/>=<sp/>0;<sp/>sr_i<sp/>&lt;<sp/>analysis_info.n_signal_regions;<sp/>++sr_i)</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>cross-section<sp/>for<sp/>mass<sp/>m</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xsec_pb<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>m<sp/>is<sp/>inside<sp/>interpolation<sp/>region</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/>xsec_interp.is_inside_range(m))</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m<sp/>&lt;<sp/>xsec_interp.x_min)</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ColliderBit_error().raise(LOCAL_INFO,<sp/></highlight><highlight class="stringliteral">&quot;Mass<sp/>parameter<sp/>below<sp/>lowest<sp/>mass<sp/>point<sp/>in<sp/>the<sp/>cross-section<sp/>table.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m<sp/>&gt;<sp/>xsec_interp.x_min)</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>cross-section<sp/>to<sp/>0<sp/>for<sp/>masses<sp/>above<sp/>the<sp/>tabulated<sp/>range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xsec_pb<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>All<sp/>is<sp/>OK,<sp/>let&apos;s<sp/>evaluate<sp/>the<sp/>cross-section</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xsec_pb<sp/>=<sp/>xsec_interp.eval(m);</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>signal<sp/>efficiency<sp/>for<sp/>signal<sp/>region<sp/>sr_i<sp/>and<sp/>mass<sp/>m</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eff<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>m<sp/>point<sp/>is<sp/>inside<sp/>interpolation<sp/>region</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/>eff_interp.is_inside_range(m))</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m<sp/>&lt;<sp/>eff_interp.x_min)</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ColliderBit_error().raise(LOCAL_INFO,<sp/></highlight><highlight class="stringliteral">&quot;Mass<sp/>parameter<sp/>below<sp/>lowest<sp/>mass<sp/>point<sp/>in<sp/>the<sp/>signal<sp/>efficiency<sp/>table.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m<sp/>&gt;<sp/>eff_interp.x_min)</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>efficiency<sp/>to<sp/>0<sp/>for<sp/>masses<sp/>above<sp/>the<sp/>tabulated<sp/>range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eff<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>All<sp/>is<sp/>OK,<sp/>let&apos;s<sp/>evaluate<sp/>the<sp/>efficiency</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eff<sp/>=<sp/>eff_interp.eval(m,<sp/>sr_i);</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>signal<sp/>prediction<sp/>and<sp/>save<sp/>it<sp/>in<sp/>the<sp/>signal_yields<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>signal_yields[sr_i]<sp/>=<sp/>analysis_info.lumi_invfb<sp/>*<sp/>(xsec_pb<sp/>*<sp/>1000.)<sp/>*<sp/>norm<sp/>*<sp/>lambda_scaling<sp/>*<sp/>eff;<sp/></highlight><highlight class="comment">//<sp/>converting<sp/>cross-section<sp/>from<sp/>pb<sp/>to<sp/>fb</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>End<sp/>loop<sp/>over<sp/>signal<sp/>regions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ColliderBit__InterpolatedYields_8cpp_1acfb2fa465de3e5f18ea2cd157765ca03" kindref="member">DMEFT_results_profiled</ref>(AnalysisDataPointers&amp;<sp/>result)</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Pipes::DMEFT_results_profiled;</highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Clear<sp/>previous<sp/>vectors,<sp/>etc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.clear();</highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>original<sp/>AnalysisDataPointers<sp/>that<sp/>we<sp/>will<sp/>adjust</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>*Dep::AllAnalysisNumbersUnmodified;</highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>best-fit<sp/>nuisance<sp/>parameter(s)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>map_str_dbl<sp/>bestfit_nuisance_pars<sp/>=<sp/>*Dep::DMEFT_profiled_LHC_nuisance_params;</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a_bestfit<sp/>=<sp/>bestfit_nuisance_pars.at(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>Lambda</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Spectrum&amp;<sp/>spec<sp/>=<sp/>*Dep::DMEFT_spectrum;</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lambda<sp/>=<sp/>spec.get(Par::mass1,<sp/></highlight><highlight class="stringliteral">&quot;Lambda&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Recalculate<sp/>AnalysisData<sp/>instances<sp/>in<sp/>&quot;result&quot;,<sp/>using<sp/>the<sp/>best-fit<sp/>a-value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(AnalysisData*<sp/>adata_ptr<sp/>:<sp/>result)</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ColliderBit__InterpolatedYields_8cpp_1a88c08c0921b8a5f711a41b82ac7d2a98" kindref="member">signal_modifier_function</ref>(*adata_ptr,<sp/>lambda,<sp/>a_bestfit);</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ColliderBit__InterpolatedYields_8cpp_1ad34ef94007d90c2c983ed20f99120386" kindref="member">DMEFT_results_cutoff</ref>(AnalysisDataPointers&amp;<sp/>result)</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Pipes::DMEFT_results_cutoff;</highlight></codeline>
<codeline lineno="715"><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Clear<sp/>previous<sp/>vectors,<sp/>etc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.clear();</highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>original<sp/>AnalysisDataPointers<sp/>that<sp/>we<sp/>will<sp/>adjust</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>*Dep::AllAnalysisNumbersUnmodified;</highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>Lambda</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Spectrum&amp;<sp/>spec<sp/>=<sp/>*Dep::DMEFT_spectrum;</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lambda<sp/>=<sp/>spec.get(Par::mass1,<sp/></highlight><highlight class="stringliteral">&quot;Lambda&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Apply<sp/>the<sp/>function<sp/>signal_cutoff_function<sp/>to<sp/>each<sp/>of<sp/>the<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AnalysisData<sp/>instances<sp/>in<sp/>&quot;result&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(AnalysisData*<sp/>adata_ptr<sp/>:<sp/>result)</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ColliderBit__InterpolatedYields_8cpp_1a8ecd6e8e0f57cfccadc7368d383dca43" kindref="member">signal_cutoff_function</ref>(*adata_ptr,<sp/>lambda);</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ColliderBit__InterpolatedYields_8cpp_1a88c08c0921b8a5f711a41b82ac7d2a98" kindref="member">signal_modifier_function</ref>(AnalysisData&amp;<sp/>adata,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lambda,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a)</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>we<sp/>have<sp/>analysis<sp/>info<sp/>for<sp/>the<sp/>given<sp/>analysis</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="ColliderBit__InterpolatedYields_8cpp_1af1fb89b8d6e6ddc3406d109c275b16f8" kindref="member">analysis_info_map</ref>.count(adata.analysis_name)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ColliderBit_error().raise(LOCAL_INFO,<sp/></highlight><highlight class="stringliteral">&quot;Unknown<sp/>analysis<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>+<sp/>adata.analysis_name<sp/>+</highlight><highlight class="stringliteral">&quot;&apos;<sp/>encountered<sp/>in<sp/>signal_modifier_function!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>a<sp/>shorthand<sp/>reference<sp/>to<sp/>the<sp/>DMEFT_analysis_info<sp/>instance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DMEFT_analysis_info&amp;<sp/>ainfo<sp/>=<sp/><ref refid="ColliderBit__InterpolatedYields_8cpp_1af1fb89b8d6e6ddc3406d109c275b16f8" kindref="member">analysis_info_map</ref>.at(adata.analysis_name);</highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Modify<sp/>signals</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bin_index<sp/>=<sp/>0;<sp/>bin_index<sp/>&lt;<sp/>ainfo.n_signal_regions;<sp/>++bin_index)<sp/></highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>MET_min<sp/>=<sp/>ainfo.extra_info.at(</highlight><highlight class="stringliteral">&quot;metmins&quot;</highlight><highlight class="normal">)[bin_index];</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>weight<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="754"><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lambda<sp/>&lt;<sp/>MET_min)</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>weight<sp/>=<sp/>pow(MET_min<sp/>/<sp/>lambda,<sp/>-a);</highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(weight<sp/>&lt;<sp/>1.0e-8)<sp/>{<sp/>weight<sp/>=<sp/>0.0;<sp/>}</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SignalRegionData&amp;<sp/>srdata<sp/>=<sp/>adata[bin_index];</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>srdata.n_sig_MC<sp/>*=<sp/>weight;</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>srdata.n_sig_scaled<sp/>*=<sp/>weight;</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ColliderBit__InterpolatedYields_8cpp_1a8ecd6e8e0f57cfccadc7368d383dca43" kindref="member">signal_cutoff_function</ref>(AnalysisData&amp;<sp/>adata,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lambda)</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>we<sp/>have<sp/>analysis<sp/>info<sp/>for<sp/>the<sp/>given<sp/>analysis</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="ColliderBit__InterpolatedYields_8cpp_1af1fb89b8d6e6ddc3406d109c275b16f8" kindref="member">analysis_info_map</ref>.count(adata.analysis_name)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ColliderBit_error().raise(LOCAL_INFO,<sp/></highlight><highlight class="stringliteral">&quot;Unknown<sp/>analysis<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>+<sp/>adata.analysis_name<sp/>+</highlight><highlight class="stringliteral">&quot;&apos;<sp/>encountered<sp/>in<sp/>signal_modifier_function!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>a<sp/>shorthand<sp/>reference<sp/>to<sp/>the<sp/>DMEFT_analysis_info<sp/>instance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DMEFT_analysis_info&amp;<sp/>ainfo<sp/>=<sp/><ref refid="ColliderBit__InterpolatedYields_8cpp_1af1fb89b8d6e6ddc3406d109c275b16f8" kindref="member">analysis_info_map</ref>.at(adata.analysis_name);</highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Modify<sp/>signals<sp/>with<sp/>a<sp/>hard<sp/>cutoff</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bin_index<sp/>=<sp/>0;<sp/>bin_index<sp/>&lt;<sp/>ainfo.n_signal_regions;<sp/>++bin_index)<sp/></highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>MET_min<sp/>=<sp/>ainfo.extra_info.at(</highlight><highlight class="stringliteral">&quot;metmins&quot;</highlight><highlight class="normal">)[bin_index];</highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lambda<sp/>&lt;<sp/>MET_min)</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SignalRegionData&amp;<sp/>srdata<sp/>=<sp/>adata[bin_index];</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>srdata.n_sig_MC<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>srdata.n_sig_scaled<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="795"><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="797"><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ColliderBit__InterpolatedYields_8cpp_1a2e4a667539a208c93c3eac8dc4e53d17" kindref="member">_gsl_target_func</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>n<sp/>*/</highlight><highlight class="normal"><sp/>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>a,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>fparams,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>fval)</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note:<sp/>We<sp/>don&apos;t<sp/>use<sp/>the<sp/>first<sp/>argument,<sp/>it&apos;s<sp/>just<sp/>there<sp/>for<sp/>the<sp/>GSL/multimin<sp/>interface</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>total_loglike<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="805"><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Cast<sp/>fparams<sp/>to<sp/>correct<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_gsl_target_func_params*<sp/>fpars<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">_gsl_target_func_params*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(fparams);</highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>AnalysisLogLikes<sp/>analoglikes;</highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>vector<sp/>with<sp/>temp<sp/>AnalysisData<sp/>instances<sp/>by<sp/>copying<sp/>the<sp/>original<sp/>ones</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;AnalysisData&gt;<sp/>temp_adata_vec;</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(AnalysisData*<sp/>adata_ptr<sp/>:<sp/>fpars-&gt;adata_ptrs_original)</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>str&amp;<sp/>analysis_name<sp/>=<sp/>adata_ptr-&gt;analysis_name;</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>analysis<sp/>name<sp/>is<sp/>in<sp/>skip_analyses,<sp/>don&apos;t<sp/>take<sp/>it<sp/>into<sp/>account<sp/>in<sp/>this<sp/>profiling</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::find(fpars-&gt;skip_analyses.begin(),<sp/>fpars-&gt;skip_analyses.end(),<sp/>analysis_name)<sp/>!=<sp/>fpars-&gt;skip_analyses.end())</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>AnalysisData<sp/>instance<sp/>that<sp/>adata_ptr<sp/>points<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp_adata_vec.push_back(<sp/>AnalysisData(*adata_ptr)<sp/>);</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="824"><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>loop<sp/>over<sp/>all<sp/>the<sp/>temp<sp/>AnalysisData<sp/>instances<sp/>and<sp/>calculate<sp/>the<sp/>total<sp/>loglike<sp/>for<sp/>the<sp/>current<sp/>a-value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(AnalysisData&amp;<sp/>adata<sp/>:<sp/>temp_adata_vec)</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ColliderBit__InterpolatedYields_8cpp_1a88c08c0921b8a5f711a41b82ac7d2a98" kindref="member">signal_modifier_function</ref>(adata,<sp/>fpars-&gt;lambda,<sp/>*a);</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analoglikes<sp/>=<sp/><ref refid="ColliderBit__InterpolatedYields_8cpp_1aa372076882c0888fc20fcf8f52a666e1" kindref="member">calc_loglikes_for_analysis</ref>(adata,<sp/>fpars-&gt;use_covar,<sp/>fpars-&gt;use_marg,<sp/>fpars-&gt;combine_nocovar_SRs,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>total_loglike<sp/>+=<sp/>analoglikes.combination_loglike;</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="832"><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*fval<sp/>=<sp/>-total_loglike;</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>DMEFT:<sp/>Profile<sp/>the<sp/>&apos;a&apos;<sp/>nuisance<sp/>parameter,<sp/>which<sp/>is<sp/>used<sp/>to<sp/>smoothly<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>suppress<sp/>signal<sp/>predictions<sp/>for<sp/>MET<sp/>bins<sp/>with<sp/>MET<sp/>&gt;<sp/>Lambda</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>calc_DMEFT_profiled_LHC_nuisance_params(map_str_dbl&amp;<sp/>result)</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Pipes::calc_DMEFT_profiled_LHC_nuisance_params;</highlight></codeline>
<codeline lineno="843"><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>user<sp/>has<sp/>requested<sp/>a<sp/>fixed<sp/>value<sp/>for<sp/>the<sp/>a<sp/>parameter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>use_fixed_value_a<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>fixed_a<sp/>=<sp/>-1e99;</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first)</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(runOptions-&gt;hasKey(</highlight><highlight class="stringliteral">&quot;use_fixed_value_a&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>use_fixed_value_a<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fixed_a<sp/>=<sp/>runOptions-&gt;getValue&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;(</highlight><highlight class="stringliteral">&quot;use_fixed_value_a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="858"><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(use_fixed_value_a)</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result[</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">]<sp/>=<sp/>fixed_a;</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="864"><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Steal<sp/>the<sp/>list<sp/>of<sp/>skipped<sp/>analyses<sp/>from<sp/>the<sp/>options<sp/>from<sp/>the<sp/>&quot;calc_combined_LHC_LogLike&quot;<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;str&gt;<sp/>default_skip_analyses;<sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>default<sp/>is<sp/>empty<sp/>lists<sp/>of<sp/>analyses<sp/>to<sp/>skip</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;str&gt;<sp/>skip_analyses<sp/>=<sp/>Pipes::calc_combined_LHC_LogLike::runOptions-&gt;getValueOrDef&lt;std::vector&lt;str&gt;<sp/>&gt;(default_skip_analyses,<sp/></highlight><highlight class="stringliteral">&quot;skip_analyses&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Steal<sp/>some<sp/>settings<sp/>from<sp/>the<sp/>&quot;calc_LHC_LogLikes&quot;<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>use_covar<sp/>=<sp/>Pipes::calc_LHC_LogLikes::runOptions-&gt;getValueOrDef&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&gt;(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;use_covariances&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>marginalisation<sp/>rather<sp/>than<sp/>profiling<sp/>(probably<sp/>less<sp/>stable)?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>use_marg<sp/>=<sp/>Pipes::calc_LHC_LogLikes::runOptions-&gt;getValueOrDef&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&gt;(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;use_marginalising&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>the<sp/>naive<sp/>sum<sp/>of<sp/>SR<sp/>loglikes<sp/>for<sp/>analyses<sp/>without<sp/>known<sp/>correlations?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>combine_nocovar_SRs<sp/>=<sp/>Pipes::calc_LHC_LogLikes::runOptions-&gt;getValueOrDef&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&gt;(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;combine_SRs_without_covariances&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="875"><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Clear<sp/>previous<sp/>result<sp/>map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.clear();</highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Optimiser<sp/>parameters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Params:<sp/>step1size,<sp/>tol,<sp/>maxiter,<sp/>epsabs,<sp/>simplex<sp/>maxsize,<sp/>method,<sp/>verbosity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Methods:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>0:<sp/>Fletcher-Reeves<sp/>conjugate<sp/>gradient</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>1:<sp/>Polak-Ribiere<sp/>conjugate<sp/>gradient</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>2:<sp/>Vector<sp/>Broyden-Fletcher-Goldfarb-Shanno<sp/>method</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>3:<sp/>Steepest<sp/>descent<sp/>algorithm</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>4:<sp/>Nelder-Mead<sp/>simplex</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>5:<sp/>Vector<sp/>Broyden-Fletcher-Goldfarb-Shanno<sp/>method<sp/>ver.<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>6:<sp/>Simplex<sp/>algorithm<sp/>of<sp/>Nelder<sp/>and<sp/>Mead<sp/>ver.<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>7:<sp/>Simplex<sp/>algorithm<sp/>of<sp/>Nelder<sp/>and<sp/>Mead:<sp/>random<sp/>initialization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>INITIAL_STEP<sp/>=<sp/>runOptions-&gt;getValueOrDef&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;(0.1,<sp/></highlight><highlight class="stringliteral">&quot;nuisance_prof_initstep&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>CONV_TOL<sp/>=<sp/>runOptions-&gt;getValueOrDef&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;(0.01,<sp/></highlight><highlight class="stringliteral">&quot;nuisance_prof_convtol&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>MAXSTEPS<sp/>=<sp/>runOptions-&gt;getValueOrDef&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">&gt;(10000,<sp/></highlight><highlight class="stringliteral">&quot;nuisance_prof_maxsteps&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>CONV_ACC<sp/>=<sp/>runOptions-&gt;getValueOrDef&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;(0.01,<sp/></highlight><highlight class="stringliteral">&quot;nuisance_prof_convacc&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>SIMPLEX_SIZE<sp/>=<sp/>runOptions-&gt;getValueOrDef&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;(1e-5,<sp/></highlight><highlight class="stringliteral">&quot;nuisance_prof_simplexsize&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>METHOD<sp/>=<sp/>runOptions-&gt;getValueOrDef&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">&gt;(6,<sp/></highlight><highlight class="stringliteral">&quot;nuisance_prof_method&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>VERBOSITY<sp/>=<sp/>runOptions-&gt;getValueOrDef&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">&gt;(0,<sp/></highlight><highlight class="stringliteral">&quot;nuisance_prof_verbosity&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="898"><highlight class="normal"></highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">multimin::multimin_params<sp/>oparams<sp/>=<sp/>{INITIAL_STEP,<sp/>CONV_TOL,<sp/>MAXSTEPS,<sp/>CONV_ACC,<sp/>SIMPLEX_SIZE,<sp/>METHOD,<sp/>VERBOSITY};</highlight></codeline>
<codeline lineno="900"><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>fixed<sp/>function<sp/>parameters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_gsl_target_func_params<sp/>fpars;</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fpars.lambda<sp/>=<sp/>Dep::DMEFT_spectrum-&gt;get(Par::mass1,<sp/></highlight><highlight class="stringliteral">&quot;Lambda&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fpars.adata_ptrs_original<sp/>=<sp/>*Dep::AllAnalysisNumbersUnmodified;</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fpars.skip_analyses<sp/>=<sp/>skip_analyses;</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fpars.use_covar<sp/>=<sp/>use_covar;</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fpars.use_marg<sp/>=<sp/>use_marg;</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fpars.combine_nocovar_SRs<sp/>=<sp/>combine_nocovar_SRs;</highlight></codeline>
<codeline lineno="909"><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>variable<sp/>to<sp/>store<sp/>the<sp/>best-fit<sp/>loglike</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>minus_loglike_bestfit<sp/>=<sp/>50000.;</highlight></codeline>
<codeline lineno="912"><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Nuisance<sp/>parameter(s)<sp/>to<sp/>be<sp/>profiled<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOTE:<sp/>Currently<sp/>we<sp/>only<sp/>profile<sp/>one<sp/>parameter<sp/>(&apos;a&apos;),<sp/>but<sp/>the<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>below<sp/>setup<sp/>can<sp/><sp/>easily<sp/>be<sp/>extended<sp/>to<sp/>more<sp/>parameters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;double&gt;<sp/>init_values_a<sp/>=<sp/>runOptions-&gt;getValue&lt;std::vector&lt;double&gt;&gt;(</highlight><highlight class="stringliteral">&quot;init_values_a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;double,double&gt;<sp/>range_a<sp/>=<sp/>runOptions-&gt;getValue&lt;std::pair&lt;double,double&gt;&gt;(</highlight><highlight class="stringliteral">&quot;range_a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>How<sp/>many<sp/>times<sp/>should<sp/>we<sp/>run<sp/>the<sp/>optimiser?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n_runs<sp/>=<sp/>init_values_a.size();</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>run_i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>current_bestfit_a<sp/>=<sp/>init_values_a.at(0);</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>current_bestfit_loglike<sp/>=<sp/>-minus_loglike_bestfit;</highlight></codeline>
<codeline lineno="924"><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Mute<sp/>stderr<sp/>while<sp/>running<sp/>multimin<sp/>(due<sp/>to<sp/>verbose<sp/>gsl<sp/>output)?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>silence_multimin<sp/>=<sp/>runOptions-&gt;getValueOrDef&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&gt;(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;silence_multimin&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="927"><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Do<sp/>profiling<sp/>n_runs<sp/>times</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(run_i<sp/>&lt;<sp/>n_runs)</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>nuisances<sp/>=<sp/>{init_values_a[run_i]};<sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>initial<sp/>guess<sp/>for<sp/>each<sp/>nuisance<sp/>parameter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>nuisances_min<sp/>=<sp/>{range_a.first};<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>min<sp/>value<sp/>for<sp/>each<sp/>nuisance<sp/>parameter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>nuisances_max<sp/>=<sp/>{range_a.second};<sp/></highlight><highlight class="comment">//<sp/>max<sp/>value<sp/>for<sp/>each<sp/>nuisance<sp/>parameter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n_profile_pars<sp/>=<sp/>nuisances.size();</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Choose<sp/>boundary<sp/>type<sp/>for<sp/>each<sp/>nuisance<sp/>param<sp/>(see<sp/>comment<sp/>below)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;unsigned<sp/>int&gt;<sp/>boundary_types<sp/>=<sp/>{6};</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="938"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>From<sp/>multimin.cpp:</highlight></codeline>
<codeline lineno="939"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Interval:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Transformation:</highlight></codeline>
<codeline lineno="940"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/>unconstrained<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x=y</highlight></codeline>
<codeline lineno="941"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1<sp/>semi-closed<sp/>right<sp/>half<sp/>line<sp/>[<sp/>xmin,+infty<sp/>)<sp/><sp/><sp/>x=xmin+y^2</highlight></codeline>
<codeline lineno="942"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2<sp/>semi-closed<sp/>left<sp/><sp/>half<sp/>line<sp/>(<sp/>-infty,xmax<sp/>]<sp/><sp/><sp/>x=xmax-y^2</highlight></codeline>
<codeline lineno="943"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>3<sp/>closed<sp/>interval<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[<sp/>xmin,xmax<sp/>]<sp/><sp/><sp/><sp/>x=SS+SD*sin(y)</highlight></codeline>
<codeline lineno="944"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>4<sp/>open<sp/>right<sp/>half<sp/>line<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>xmin,+infty<sp/>)<sp/><sp/><sp/>x=xmin+exp(y)</highlight></codeline>
<codeline lineno="945"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>5<sp/>open<sp/>left<sp/><sp/>half<sp/>line<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>-infty,xmax<sp/>)<sp/><sp/><sp/>x=xmax-exp(y)</highlight></codeline>
<codeline lineno="946"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>6<sp/>open<sp/>interval<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>xmin,xmax<sp/>)<sp/><sp/><sp/><sp/>x=SS+SD*tanh(y)</highlight></codeline>
<codeline lineno="947"><highlight class="comment"></highlight></codeline>
<codeline lineno="948"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>where<sp/>SS=.5(xmin+xmax)<sp/>SD=.5(xmax-xmin)</highlight></codeline>
<codeline lineno="949"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"></highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Call<sp/>the<sp/>optimiser</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(silence_multimin)</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CALL_WITH_SILENCED_STDERR(</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>multimin::multimin(n_profile_pars,<sp/>&amp;nuisances[0],<sp/>&amp;minus_loglike_bestfit,</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;boundary_types[0],<sp/>&amp;nuisances_min[0],<sp/>&amp;nuisances_max[0],</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;_gsl_target_func,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>&amp;fpars,<sp/>oparams)<sp/></highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>multimin::multimin(n_profile_pars,<sp/>&amp;nuisances[0],<sp/>&amp;minus_loglike_bestfit,</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;boundary_types[0],<sp/>&amp;nuisances_min[0],<sp/>&amp;nuisances_max[0],</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;_gsl_target_func,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>&amp;fpars,<sp/>oparams);</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="966"><highlight class="normal"></highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>run_i_bestfit_a<sp/>=<sp/>nuisances[0];</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>run_i_bestfit_loglike<sp/>=<sp/>-minus_loglike_bestfit;</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Save<sp/>info<sp/>for<sp/>this<sp/>run</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result[</highlight><highlight class="stringliteral">&quot;a_run&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(run_i)]<sp/>=<sp/>run_i_bestfit_a;</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result[</highlight><highlight class="stringliteral">&quot;loglike_run&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(run_i)]<sp/>=<sp/>run_i_bestfit_loglike;</highlight></codeline>
<codeline lineno="973"><highlight class="normal"></highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>the<sp/>global<sp/>result?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(run_i_bestfit_loglike<sp/>&gt;<sp/>current_bestfit_loglike)</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_bestfit_loglike<sp/>=<sp/>run_i_bestfit_loglike;</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_bestfit_a<sp/>=<sp/>run_i_bestfit_a;</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="980"><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>run_i++;</highlight></codeline>
<codeline lineno="982"><highlight class="normal"></highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>optimisation<sp/>loop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="984"><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Save<sp/>the<sp/>overall<sp/>best-fit<sp/>results</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result[</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">]<sp/>=<sp/>current_bestfit_a;</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result[</highlight><highlight class="stringliteral">&quot;loglike&quot;</highlight><highlight class="normal">]<sp/>=<sp/>current_bestfit_loglike;</highlight></codeline>
<codeline lineno="988"><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>DEBUG:<sp/>Do<sp/>a<sp/>grid<sp/>scan<sp/>of<sp/>a<sp/>and<sp/>Lambda<sp/>parameter<sp/>to<sp/>investigate<sp/>the<sp/>profiled<sp/>likelihood<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="991"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#ifdef<sp/>COLLIDERBIT_DEBUG_PROFILING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>log10_a_min<sp/>=<sp/>-1.0;</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>log10_a_max<sp/>=<sp/>3.0;</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>step_log10_a<sp/>=<sp/>0.02;</highlight></codeline>
<codeline lineno="995"><highlight class="normal"></highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>log10_a<sp/>=<sp/>log10_a_min;</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>a<sp/>=<sp/>{<sp/>pow(10.,<sp/>log10_a)<sp/>};</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ll_val<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="999"><highlight class="normal"></highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lambda_min<sp/>=<sp/>670.0;</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lambda_max<sp/>=<sp/>1070.0;</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>step_lambda<sp/>=<sp/>2.0;</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lambda<sp/>=<sp/>lambda_min;</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"></highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ofstream<sp/>f;</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f.open(</highlight><highlight class="stringliteral">&quot;lambda_a_loglike.dat&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(lambda<sp/>&lt;=<sp/>lambda_max)</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log10_a<sp/>=<sp/>log10_a_min;</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"></highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(log10_a<sp/>&lt;=<sp/>log10_a_max)</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;DEBUG:<sp/>lambda,<sp/>log10_a<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>lambda<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>log10_a<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a[0]<sp/>=<sp/>pow(10.,<sp/>log10_a);</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"></highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fpars.lambda<sp/>=<sp/>lambda;</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ColliderBit__InterpolatedYields_8cpp_1a2e4a667539a208c93c3eac8dc4e53d17" kindref="member">_gsl_target_func</ref>(n_profile_pars,<sp/>&amp;a[0],<sp/>&amp;fpars,<sp/>&amp;ll_val);</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f<sp/>&lt;&lt;<sp/>fixed<sp/>&lt;&lt;<sp/>setprecision(8)<sp/>&lt;&lt;<sp/>fpars.lambda<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>a[0]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>ll_val<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"></highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log10_a<sp/>+=<sp/>step_log10_a;</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lambda<sp/>+=<sp/>step_lambda;</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f.close();</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1029"><highlight class="normal"></highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"></highlight></codeline>
<codeline lineno="1032"><highlight class="normal"></highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ColliderBit__InterpolatedYields_8cpp_1a8f54236771955821c2aefcb85cd36b8c" kindref="member">InterpolatedMCInfo</ref>(MCLoopInfo&amp;<sp/>result)</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.event_gen_BYPASS<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.reset_flags();</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"></highlight></codeline>
<codeline lineno="1041"><highlight class="normal"></highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>ColliderBit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1044"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Gambit</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_InterpolatedYields.cpp"/>
  </compounddef>
</doxygen>
