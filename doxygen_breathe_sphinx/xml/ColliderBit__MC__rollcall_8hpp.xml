<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="ColliderBit__MC__rollcall_8hpp" kind="file" language="C++">
    <compoundname>ColliderBit_MC_rollcall.hpp</compoundname>
    <includes local="yes">gambit/Utils/util_types.hpp</includes>
    <includedby refid="ColliderBit__rollcall_8hpp" local="yes">C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_rollcall.hpp</includedby>
    <incdepgraph>
      <node id="1">
        <label>C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp</label>
        <link refid="ColliderBit__MC__rollcall_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>gambit/Utils/util_types.hpp</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp</label>
        <link refid="ColliderBit__MC__rollcall_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_eventloop.hpp</label>
        <link refid="ColliderBit__eventloop_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_rollcall.hpp</label>
        <link refid="ColliderBit__rollcall_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/generateEventPy8Collider.hpp</label>
        <link refid="generateEventPy8Collider_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/getPy8Collider.hpp</label>
        <link refid="getPy8Collider_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_Higgs.cpp</label>
        <link refid="ColliderBit__Higgs_8cpp"/>
      </node>
      <node id="20">
        <label>C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_InterpolatedYields.cpp</label>
        <link refid="ColliderBit__InterpolatedYields_8cpp"/>
      </node>
      <node id="21">
        <label>C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp</label>
        <link refid="ColliderBit__LEP_8cpp"/>
      </node>
      <node id="22">
        <label>C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_dummy.cpp</label>
        <link refid="ColliderBit__dummy_8cpp"/>
      </node>
      <node id="8">
        <label>C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_eventloop.cpp</label>
        <link refid="ColliderBit__eventloop_8cpp"/>
      </node>
      <node id="23">
        <label>C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/LHC_likelihoods.cpp</label>
        <link refid="LHC__likelihoods_8cpp"/>
      </node>
      <node id="9">
        <label>C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/collider_event_weights.cpp</label>
        <link refid="collider__event__weights_8cpp"/>
      </node>
      <node id="10">
        <label>C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/getActiveProcessCodes.cpp</label>
        <link refid="getActiveProcessCodes_8cpp"/>
      </node>
      <node id="11">
        <label>C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/getAnalysisContainer.cpp</label>
        <link refid="getAnalysisContainer_8cpp"/>
      </node>
      <node id="12">
        <label>C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/getBuckFast.cpp</label>
        <link refid="getBuckFast_8cpp"/>
      </node>
      <node id="13">
        <label>C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/getHepMCEvent.cpp</label>
        <link refid="getHepMCEvent_8cpp"/>
      </node>
      <node id="14">
        <label>C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/getLHEvent.cpp</label>
        <link refid="getLHEvent_8cpp"/>
      </node>
      <node id="15">
        <label>C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/getxsec.cpp</label>
        <link refid="getxsec_8cpp"/>
      </node>
      <node id="24">
        <label>C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/lep_mssm_xsecs.cpp</label>
        <link refid="lep__mssm__xsecs_8cpp"/>
      </node>
      <node id="5">
        <label>C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/models/SUSY.cpp</label>
        <link refid="SUSY_8cpp"/>
      </node>
      <node id="6">
        <label>C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/models/SUSY_extras.cpp</label>
        <link refid="SUSY__extras_8cpp"/>
      </node>
      <node id="16">
        <label>C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/process_code_PID_pair_mapping.cpp</label>
        <link refid="process__code__PID__pair__mapping_8cpp"/>
      </node>
      <node id="17">
        <label>C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/runAnalyses.cpp</label>
        <link refid="runAnalyses_8cpp"/>
      </node>
      <node id="18">
        <label>C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/smearEvent.cpp</label>
        <link refid="smearEvent_8cpp"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="user-defined">
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>RunMC</initializer>
        <briefdescription>
<para>Get a list of all the PID pairs related to active process codes. </para>
        </briefdescription>
        <detaileddescription>
<para>Collider sim event capability.</para>
<para>Collider sim capability.</para>
<para>Output some info about the event loop.</para>
<para>Calculate the total LHC log likelihood.</para>
<para>Extract the indices for the SRs used in the analysis loglikes (alphabetical SR ordering)</para>
<para>Extract the labels for the SRs used in the analysis loglikes.</para>
<para>Extract the combined log likelihood for each analysis to a simple map_str_dbl.</para>
<para>Extract the log likelihood for each SR to a simple map_str_dbl.</para>
<para>Calculate the log likelihood for each SR in each analysis using the analysis numbers.</para>
<para>Extract the signal predictions and uncertainties for all analyses.</para>
<para>Collect all the analysis numbers in one place.</para>
<para>A map between PID pairs and cross-sections.</para>
<para>Execute the main Monte Carlo event loop. Note: &quot;Non-loop&quot; capabilities that some in-loop capabilities depend on can be added as dependencies here to ensure that they are calculated before the loop starts.</para>
<para>Total cross-section</para>
<para>Output info on TotalCrossSection as a str-double map, for easy printing</para>
<para>Process codes and PID pairs</para>
<para>Get list of Pythia process codes for all active processes</para>
<para>Translate a list of Pythia process codes to list of (PID,PID) pairs for the two final state particles of the hard process.</para>
<para>Process-level cross-sections</para>
<para>A map between Pythia process codes and cross-sections</para>
<para>Output PID pair cross-sections as a str-dbl map, for easy printing</para>
<para>A consistency check that ensures that if each event is weighted by a process-level cross-section from an external calculator, then the total cross-section is taken from the event generator</para>
<para>Lists of analyses to run</para>
<para>Run all analyses and fill vector of analysis results.</para>
<para>Dummy observable that creates a dependency on TestModel1D, which is used to satisfy the normal GAMBIT model requrements in a minimal way. This is useful in the case where we just want to test ColliderBit on a single point with Pythia&apos;s SLHA interface, but not use the ColliderBit standalone interface.</para>
<para>Detector sim capabilities.</para>
<para>Run detector simulators and produce the standard event format.</para>
<para>Provide functions that can be used for event weighting, e.g. for process-level cross-section scaling. {@</para>
<para>Event weight functions that depend on model-specific Py8Collider versions should be declared in the corresponding model header in ColliderBit/models. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="47" column="11" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="521" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>operateLHCLoop</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>A nested function that reads in HepMC event files and converts them to HEPUtils::Event format.</para>
<para>Only activate these functions if HepMC is activated.</para>
<para>Weight events according to process cross-section.</para>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model</para>
<para>This function is intended as a fallback option that simply assigns a unit weight to all events</para>
<para>A nested function that reads in Les Houches Event files and converts them to HEPUtils::Event format </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="49" column="13" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="534" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>InterpolatedMCInfo</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>A nested function that reads in HepMC event files and converts them to HEPUtils::Event format.</para>
<para>Only activate these functions if HepMC is activated.</para>
<para>Weight events according to process cross-section.</para>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model</para>
<para>This function is intended as a fallback option that simply assigns a unit weight to all events</para>
<para>A nested function that reads in Les Houches Event files and converts them to HEPUtils::Event format </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="55" column="13" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="534" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>TotalEvGenCrossSection</initializer>
        <briefdescription>
<para>Get a list of all the PID pairs related to active process codes. </para>
        </briefdescription>
        <detaileddescription>
<para>Collider sim event capability.</para>
<para>Collider sim capability.</para>
<para>Output some info about the event loop.</para>
<para>Calculate the total LHC log likelihood.</para>
<para>Extract the indices for the SRs used in the analysis loglikes (alphabetical SR ordering)</para>
<para>Extract the labels for the SRs used in the analysis loglikes.</para>
<para>Extract the combined log likelihood for each analysis to a simple map_str_dbl.</para>
<para>Extract the log likelihood for each SR to a simple map_str_dbl.</para>
<para>Calculate the log likelihood for each SR in each analysis using the analysis numbers.</para>
<para>Extract the signal predictions and uncertainties for all analyses.</para>
<para>Collect all the analysis numbers in one place.</para>
<para>A map between PID pairs and cross-sections.</para>
<para>Execute the main Monte Carlo event loop. Note: &quot;Non-loop&quot; capabilities that some in-loop capabilities depend on can be added as dependencies here to ensure that they are calculated before the loop starts.</para>
<para>Total cross-section</para>
<para>Output info on TotalCrossSection as a str-double map, for easy printing</para>
<para>Process codes and PID pairs</para>
<para>Get list of Pythia process codes for all active processes</para>
<para>Translate a list of Pythia process codes to list of (PID,PID) pairs for the two final state particles of the hard process.</para>
<para>Process-level cross-sections</para>
<para>A map between Pythia process codes and cross-sections</para>
<para>Output PID pair cross-sections as a str-dbl map, for easy printing</para>
<para>A consistency check that ensures that if each event is weighted by a process-level cross-section from an external calculator, then the total cross-section is taken from the event generator</para>
<para>Lists of analyses to run</para>
<para>Run all analyses and fill vector of analysis results.</para>
<para>Dummy observable that creates a dependency on TestModel1D, which is used to satisfy the normal GAMBIT model requrements in a minimal way. This is useful in the case where we just want to test ColliderBit on a single point with Pythia&apos;s SLHA interface, but not use the ColliderBit standalone interface.</para>
<para>Detector sim capabilities.</para>
<para>Run detector simulators and produce the standard event format.</para>
<para>Provide functions that can be used for event weighting, e.g. for process-level cross-section scaling. {@</para>
<para>Event weight functions that depend on model-specific Py8Collider versions should be declared in the corresponding model header in ColliderBit/models. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="65" column="11" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="521" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>getEvGenCrossSection</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>A nested function that reads in HepMC event files and converts them to HEPUtils::Event format.</para>
<para>Only activate these functions if HepMC is activated.</para>
<para>Weight events according to process cross-section.</para>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model</para>
<para>This function is intended as a fallback option that simply assigns a unit weight to all events</para>
<para>A nested function that reads in Les Houches Event files and converts them to HEPUtils::Event format </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="67" column="13" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="534" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>TotalCrossSection</initializer>
        <briefdescription>
<para>Get a list of all the PID pairs related to active process codes. </para>
        </briefdescription>
        <detaileddescription>
<para>Collider sim event capability.</para>
<para>Collider sim capability.</para>
<para>Output some info about the event loop.</para>
<para>Calculate the total LHC log likelihood.</para>
<para>Extract the indices for the SRs used in the analysis loglikes (alphabetical SR ordering)</para>
<para>Extract the labels for the SRs used in the analysis loglikes.</para>
<para>Extract the combined log likelihood for each analysis to a simple map_str_dbl.</para>
<para>Extract the log likelihood for each SR to a simple map_str_dbl.</para>
<para>Calculate the log likelihood for each SR in each analysis using the analysis numbers.</para>
<para>Extract the signal predictions and uncertainties for all analyses.</para>
<para>Collect all the analysis numbers in one place.</para>
<para>A map between PID pairs and cross-sections.</para>
<para>Execute the main Monte Carlo event loop. Note: &quot;Non-loop&quot; capabilities that some in-loop capabilities depend on can be added as dependencies here to ensure that they are calculated before the loop starts.</para>
<para>Total cross-section</para>
<para>Output info on TotalCrossSection as a str-double map, for easy printing</para>
<para>Process codes and PID pairs</para>
<para>Get list of Pythia process codes for all active processes</para>
<para>Translate a list of Pythia process codes to list of (PID,PID) pairs for the two final state particles of the hard process.</para>
<para>Process-level cross-sections</para>
<para>A map between Pythia process codes and cross-sections</para>
<para>Output PID pair cross-sections as a str-dbl map, for easy printing</para>
<para>A consistency check that ensures that if each event is weighted by a process-level cross-section from an external calculator, then the total cross-section is taken from the event generator</para>
<para>Lists of analyses to run</para>
<para>Run all analyses and fill vector of analysis results.</para>
<para>Dummy observable that creates a dependency on TestModel1D, which is used to satisfy the normal GAMBIT model requrements in a minimal way. This is useful in the case where we just want to test ColliderBit on a single point with Pythia&apos;s SLHA interface, but not use the ColliderBit standalone interface.</para>
<para>Detector sim capabilities.</para>
<para>Run detector simulators and produce the standard event format.</para>
<para>Provide functions that can be used for event weighting, e.g. for process-level cross-section scaling. {@</para>
<para>Event weight functions that depend on model-specific Py8Collider versions should be declared in the corresponding model header in ColliderBit/models. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="74" column="11" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="521" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>getEvGenCrossSection_as_base</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>A nested function that reads in HepMC event files and converts them to HEPUtils::Event format.</para>
<para>Only activate these functions if HepMC is activated.</para>
<para>Weight events according to process cross-section.</para>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model</para>
<para>This function is intended as a fallback option that simply assigns a unit weight to all events</para>
<para>A nested function that reads in Les Houches Event files and converts them to HEPUtils::Event format </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="78" column="13" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="534" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>getNLLFastCrossSection</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>A nested function that reads in HepMC event files and converts them to HEPUtils::Event format.</para>
<para>Only activate these functions if HepMC is activated.</para>
<para>Weight events according to process cross-section.</para>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model</para>
<para>This function is intended as a fallback option that simply assigns a unit weight to all events</para>
<para>A nested function that reads in Les Houches Event files and converts them to HEPUtils::Event format </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="85" column="13" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="534" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>getYAMLCrossSection</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>A nested function that reads in HepMC event files and converts them to HEPUtils::Event format.</para>
<para>Only activate these functions if HepMC is activated.</para>
<para>Weight events according to process cross-section.</para>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model</para>
<para>This function is intended as a fallback option that simply assigns a unit weight to all events</para>
<para>A nested function that reads in Les Houches Event files and converts them to HEPUtils::Event format </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="92" column="13" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="534" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>getYAMLCrossSection_SLHA</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>A nested function that reads in HepMC event files and converts them to HEPUtils::Event format.</para>
<para>Only activate these functions if HepMC is activated.</para>
<para>Weight events according to process cross-section.</para>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model</para>
<para>This function is intended as a fallback option that simply assigns a unit weight to all events</para>
<para>A nested function that reads in Les Houches Event files and converts them to HEPUtils::Event format </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="99" column="13" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="534" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>getYAMLCrossSection_param</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>A nested function that reads in HepMC event files and converts them to HEPUtils::Event format.</para>
<para>Only activate these functions if HepMC is activated.</para>
<para>Weight events according to process cross-section.</para>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model</para>
<para>This function is intended as a fallback option that simply assigns a unit weight to all events</para>
<para>A nested function that reads in Les Houches Event files and converts them to HEPUtils::Event format </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="108" column="13" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="534" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>TotalCrossSectionAsMap</initializer>
        <briefdescription>
<para>Get a list of all the PID pairs related to active process codes. </para>
        </briefdescription>
        <detaileddescription>
<para>Collider sim event capability.</para>
<para>Collider sim capability.</para>
<para>Output some info about the event loop.</para>
<para>Calculate the total LHC log likelihood.</para>
<para>Extract the indices for the SRs used in the analysis loglikes (alphabetical SR ordering)</para>
<para>Extract the labels for the SRs used in the analysis loglikes.</para>
<para>Extract the combined log likelihood for each analysis to a simple map_str_dbl.</para>
<para>Extract the log likelihood for each SR to a simple map_str_dbl.</para>
<para>Calculate the log likelihood for each SR in each analysis using the analysis numbers.</para>
<para>Extract the signal predictions and uncertainties for all analyses.</para>
<para>Collect all the analysis numbers in one place.</para>
<para>A map between PID pairs and cross-sections.</para>
<para>Execute the main Monte Carlo event loop. Note: &quot;Non-loop&quot; capabilities that some in-loop capabilities depend on can be added as dependencies here to ensure that they are calculated before the loop starts.</para>
<para>Total cross-section</para>
<para>Output info on TotalCrossSection as a str-double map, for easy printing</para>
<para>Process codes and PID pairs</para>
<para>Get list of Pythia process codes for all active processes</para>
<para>Translate a list of Pythia process codes to list of (PID,PID) pairs for the two final state particles of the hard process.</para>
<para>Process-level cross-sections</para>
<para>A map between Pythia process codes and cross-sections</para>
<para>Output PID pair cross-sections as a str-dbl map, for easy printing</para>
<para>A consistency check that ensures that if each event is weighted by a process-level cross-section from an external calculator, then the total cross-section is taken from the event generator</para>
<para>Lists of analyses to run</para>
<para>Run all analyses and fill vector of analysis results.</para>
<para>Dummy observable that creates a dependency on TestModel1D, which is used to satisfy the normal GAMBIT model requrements in a minimal way. This is useful in the case where we just want to test ColliderBit on a single point with Pythia&apos;s SLHA interface, but not use the ColliderBit standalone interface.</para>
<para>Detector sim capabilities.</para>
<para>Run detector simulators and produce the standard event format.</para>
<para>Provide functions that can be used for event weighting, e.g. for process-level cross-section scaling. {@</para>
<para>Event weight functions that depend on model-specific Py8Collider versions should be declared in the corresponding model header in ColliderBit/models. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="117" column="11" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="521" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>getTotalCrossSectionAsMap</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>A nested function that reads in HepMC event files and converts them to HEPUtils::Event format.</para>
<para>Only activate these functions if HepMC is activated.</para>
<para>Weight events according to process cross-section.</para>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model</para>
<para>This function is intended as a fallback option that simply assigns a unit weight to all events</para>
<para>A nested function that reads in Les Houches Event files and converts them to HEPUtils::Event format </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="119" column="13" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="534" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>ActiveProcessCodes</initializer>
        <briefdescription>
<para>Get a list of all the PID pairs related to active process codes. </para>
        </briefdescription>
        <detaileddescription>
<para>Collider sim event capability.</para>
<para>Collider sim capability.</para>
<para>Output some info about the event loop.</para>
<para>Calculate the total LHC log likelihood.</para>
<para>Extract the indices for the SRs used in the analysis loglikes (alphabetical SR ordering)</para>
<para>Extract the labels for the SRs used in the analysis loglikes.</para>
<para>Extract the combined log likelihood for each analysis to a simple map_str_dbl.</para>
<para>Extract the log likelihood for each SR to a simple map_str_dbl.</para>
<para>Calculate the log likelihood for each SR in each analysis using the analysis numbers.</para>
<para>Extract the signal predictions and uncertainties for all analyses.</para>
<para>Collect all the analysis numbers in one place.</para>
<para>A map between PID pairs and cross-sections.</para>
<para>Execute the main Monte Carlo event loop. Note: &quot;Non-loop&quot; capabilities that some in-loop capabilities depend on can be added as dependencies here to ensure that they are calculated before the loop starts.</para>
<para>Total cross-section</para>
<para>Output info on TotalCrossSection as a str-double map, for easy printing</para>
<para>Process codes and PID pairs</para>
<para>Get list of Pythia process codes for all active processes</para>
<para>Translate a list of Pythia process codes to list of (PID,PID) pairs for the two final state particles of the hard process.</para>
<para>Process-level cross-sections</para>
<para>A map between Pythia process codes and cross-sections</para>
<para>Output PID pair cross-sections as a str-dbl map, for easy printing</para>
<para>A consistency check that ensures that if each event is weighted by a process-level cross-section from an external calculator, then the total cross-section is taken from the event generator</para>
<para>Lists of analyses to run</para>
<para>Run all analyses and fill vector of analysis results.</para>
<para>Dummy observable that creates a dependency on TestModel1D, which is used to satisfy the normal GAMBIT model requrements in a minimal way. This is useful in the case where we just want to test ColliderBit on a single point with Pythia&apos;s SLHA interface, but not use the ColliderBit standalone interface.</para>
<para>Detector sim capabilities.</para>
<para>Run detector simulators and produce the standard event format.</para>
<para>Provide functions that can be used for event weighting, e.g. for process-level cross-section scaling. {@</para>
<para>Event weight functions that depend on model-specific Py8Collider versions should be declared in the corresponding model header in ColliderBit/models. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="131" column="11" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="521" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>getActiveProcessCodes</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>A nested function that reads in HepMC event files and converts them to HEPUtils::Event format.</para>
<para>Only activate these functions if HepMC is activated.</para>
<para>Weight events according to process cross-section.</para>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model</para>
<para>This function is intended as a fallback option that simply assigns a unit weight to all events</para>
<para>A nested function that reads in Les Houches Event files and converts them to HEPUtils::Event format </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="133" column="13" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="534" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>ActivePIDPairs</initializer>
        <briefdescription>
<para>Get a list of all the PID pairs related to active process codes. </para>
        </briefdescription>
        <detaileddescription>
<para>Collider sim event capability.</para>
<para>Collider sim capability.</para>
<para>Output some info about the event loop.</para>
<para>Calculate the total LHC log likelihood.</para>
<para>Extract the indices for the SRs used in the analysis loglikes (alphabetical SR ordering)</para>
<para>Extract the labels for the SRs used in the analysis loglikes.</para>
<para>Extract the combined log likelihood for each analysis to a simple map_str_dbl.</para>
<para>Extract the log likelihood for each SR to a simple map_str_dbl.</para>
<para>Calculate the log likelihood for each SR in each analysis using the analysis numbers.</para>
<para>Extract the signal predictions and uncertainties for all analyses.</para>
<para>Collect all the analysis numbers in one place.</para>
<para>A map between PID pairs and cross-sections.</para>
<para>Execute the main Monte Carlo event loop. Note: &quot;Non-loop&quot; capabilities that some in-loop capabilities depend on can be added as dependencies here to ensure that they are calculated before the loop starts.</para>
<para>Total cross-section</para>
<para>Output info on TotalCrossSection as a str-double map, for easy printing</para>
<para>Process codes and PID pairs</para>
<para>Get list of Pythia process codes for all active processes</para>
<para>Translate a list of Pythia process codes to list of (PID,PID) pairs for the two final state particles of the hard process.</para>
<para>Process-level cross-sections</para>
<para>A map between Pythia process codes and cross-sections</para>
<para>Output PID pair cross-sections as a str-dbl map, for easy printing</para>
<para>A consistency check that ensures that if each event is weighted by a process-level cross-section from an external calculator, then the total cross-section is taken from the event generator</para>
<para>Lists of analyses to run</para>
<para>Run all analyses and fill vector of analysis results.</para>
<para>Dummy observable that creates a dependency on TestModel1D, which is used to satisfy the normal GAMBIT model requrements in a minimal way. This is useful in the case where we just want to test ColliderBit on a single point with Pythia&apos;s SLHA interface, but not use the ColliderBit standalone interface.</para>
<para>Detector sim capabilities.</para>
<para>Run detector simulators and produce the standard event format.</para>
<para>Provide functions that can be used for event weighting, e.g. for process-level cross-section scaling. {@</para>
<para>Event weight functions that depend on model-specific Py8Collider versions should be declared in the corresponding model header in ColliderBit/models. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="141" column="11" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="521" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>getActivePIDPairs</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>A nested function that reads in HepMC event files and converts them to HEPUtils::Event format.</para>
<para>Only activate these functions if HepMC is activated.</para>
<para>Weight events according to process cross-section.</para>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model</para>
<para>This function is intended as a fallback option that simply assigns a unit weight to all events</para>
<para>A nested function that reads in Les Houches Event files and converts them to HEPUtils::Event format </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="143" column="13" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="534" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>ActiveProcessCodeToPIDPairsMap</initializer>
        <briefdescription>
<para>Get a list of all the PID pairs related to active process codes. </para>
        </briefdescription>
        <detaileddescription>
<para>Collider sim event capability.</para>
<para>Collider sim capability.</para>
<para>Output some info about the event loop.</para>
<para>Calculate the total LHC log likelihood.</para>
<para>Extract the indices for the SRs used in the analysis loglikes (alphabetical SR ordering)</para>
<para>Extract the labels for the SRs used in the analysis loglikes.</para>
<para>Extract the combined log likelihood for each analysis to a simple map_str_dbl.</para>
<para>Extract the log likelihood for each SR to a simple map_str_dbl.</para>
<para>Calculate the log likelihood for each SR in each analysis using the analysis numbers.</para>
<para>Extract the signal predictions and uncertainties for all analyses.</para>
<para>Collect all the analysis numbers in one place.</para>
<para>A map between PID pairs and cross-sections.</para>
<para>Execute the main Monte Carlo event loop. Note: &quot;Non-loop&quot; capabilities that some in-loop capabilities depend on can be added as dependencies here to ensure that they are calculated before the loop starts.</para>
<para>Total cross-section</para>
<para>Output info on TotalCrossSection as a str-double map, for easy printing</para>
<para>Process codes and PID pairs</para>
<para>Get list of Pythia process codes for all active processes</para>
<para>Translate a list of Pythia process codes to list of (PID,PID) pairs for the two final state particles of the hard process.</para>
<para>Process-level cross-sections</para>
<para>A map between Pythia process codes and cross-sections</para>
<para>Output PID pair cross-sections as a str-dbl map, for easy printing</para>
<para>A consistency check that ensures that if each event is weighted by a process-level cross-section from an external calculator, then the total cross-section is taken from the event generator</para>
<para>Lists of analyses to run</para>
<para>Run all analyses and fill vector of analysis results.</para>
<para>Dummy observable that creates a dependency on TestModel1D, which is used to satisfy the normal GAMBIT model requrements in a minimal way. This is useful in the case where we just want to test ColliderBit on a single point with Pythia&apos;s SLHA interface, but not use the ColliderBit standalone interface.</para>
<para>Detector sim capabilities.</para>
<para>Run detector simulators and produce the standard event format.</para>
<para>Provide functions that can be used for event weighting, e.g. for process-level cross-section scaling. {@</para>
<para>Event weight functions that depend on model-specific Py8Collider versions should be declared in the corresponding model header in ColliderBit/models. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="152" column="11" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="521" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>getActiveProcessCodeToPIDPairsMap</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>A nested function that reads in HepMC event files and converts them to HEPUtils::Event format.</para>
<para>Only activate these functions if HepMC is activated.</para>
<para>Weight events according to process cross-section.</para>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model</para>
<para>This function is intended as a fallback option that simply assigns a unit weight to all events</para>
<para>A nested function that reads in Les Houches Event files and converts them to HEPUtils::Event format </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="154" column="13" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="534" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>ProcessCrossSectionsMap</initializer>
        <briefdescription>
<para>Get a list of all the PID pairs related to active process codes. </para>
        </briefdescription>
        <detaileddescription>
<para>Collider sim event capability.</para>
<para>Collider sim capability.</para>
<para>Output some info about the event loop.</para>
<para>Calculate the total LHC log likelihood.</para>
<para>Extract the indices for the SRs used in the analysis loglikes (alphabetical SR ordering)</para>
<para>Extract the labels for the SRs used in the analysis loglikes.</para>
<para>Extract the combined log likelihood for each analysis to a simple map_str_dbl.</para>
<para>Extract the log likelihood for each SR to a simple map_str_dbl.</para>
<para>Calculate the log likelihood for each SR in each analysis using the analysis numbers.</para>
<para>Extract the signal predictions and uncertainties for all analyses.</para>
<para>Collect all the analysis numbers in one place.</para>
<para>A map between PID pairs and cross-sections.</para>
<para>Execute the main Monte Carlo event loop. Note: &quot;Non-loop&quot; capabilities that some in-loop capabilities depend on can be added as dependencies here to ensure that they are calculated before the loop starts.</para>
<para>Total cross-section</para>
<para>Output info on TotalCrossSection as a str-double map, for easy printing</para>
<para>Process codes and PID pairs</para>
<para>Get list of Pythia process codes for all active processes</para>
<para>Translate a list of Pythia process codes to list of (PID,PID) pairs for the two final state particles of the hard process.</para>
<para>Process-level cross-sections</para>
<para>A map between Pythia process codes and cross-sections</para>
<para>Output PID pair cross-sections as a str-dbl map, for easy printing</para>
<para>A consistency check that ensures that if each event is weighted by a process-level cross-section from an external calculator, then the total cross-section is taken from the event generator</para>
<para>Lists of analyses to run</para>
<para>Run all analyses and fill vector of analysis results.</para>
<para>Dummy observable that creates a dependency on TestModel1D, which is used to satisfy the normal GAMBIT model requrements in a minimal way. This is useful in the case where we just want to test ColliderBit on a single point with Pythia&apos;s SLHA interface, but not use the ColliderBit standalone interface.</para>
<para>Detector sim capabilities.</para>
<para>Run detector simulators and produce the standard event format.</para>
<para>Provide functions that can be used for event weighting, e.g. for process-level cross-section scaling. {@</para>
<para>Event weight functions that depend on model-specific Py8Collider versions should be declared in the corresponding model header in ColliderBit/models. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="167" column="11" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="521" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>getProcessCrossSectionsMap</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>A nested function that reads in HepMC event files and converts them to HEPUtils::Event format.</para>
<para>Only activate these functions if HepMC is activated.</para>
<para>Weight events according to process cross-section.</para>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model</para>
<para>This function is intended as a fallback option that simply assigns a unit weight to all events</para>
<para>A nested function that reads in Les Houches Event files and converts them to HEPUtils::Event format </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="169" column="13" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="534" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>PIDPairCrossSectionsMap</initializer>
        <briefdescription>
<para>Get a list of all the PID pairs related to active process codes. </para>
        </briefdescription>
        <detaileddescription>
<para>Collider sim event capability.</para>
<para>Collider sim capability.</para>
<para>Output some info about the event loop.</para>
<para>Calculate the total LHC log likelihood.</para>
<para>Extract the indices for the SRs used in the analysis loglikes (alphabetical SR ordering)</para>
<para>Extract the labels for the SRs used in the analysis loglikes.</para>
<para>Extract the combined log likelihood for each analysis to a simple map_str_dbl.</para>
<para>Extract the log likelihood for each SR to a simple map_str_dbl.</para>
<para>Calculate the log likelihood for each SR in each analysis using the analysis numbers.</para>
<para>Extract the signal predictions and uncertainties for all analyses.</para>
<para>Collect all the analysis numbers in one place.</para>
<para>A map between PID pairs and cross-sections.</para>
<para>Execute the main Monte Carlo event loop. Note: &quot;Non-loop&quot; capabilities that some in-loop capabilities depend on can be added as dependencies here to ensure that they are calculated before the loop starts.</para>
<para>Total cross-section</para>
<para>Output info on TotalCrossSection as a str-double map, for easy printing</para>
<para>Process codes and PID pairs</para>
<para>Get list of Pythia process codes for all active processes</para>
<para>Translate a list of Pythia process codes to list of (PID,PID) pairs for the two final state particles of the hard process.</para>
<para>Process-level cross-sections</para>
<para>A map between Pythia process codes and cross-sections</para>
<para>Output PID pair cross-sections as a str-dbl map, for easy printing</para>
<para>A consistency check that ensures that if each event is weighted by a process-level cross-section from an external calculator, then the total cross-section is taken from the event generator</para>
<para>Lists of analyses to run</para>
<para>Run all analyses and fill vector of analysis results.</para>
<para>Dummy observable that creates a dependency on TestModel1D, which is used to satisfy the normal GAMBIT model requrements in a minimal way. This is useful in the case where we just want to test ColliderBit on a single point with Pythia&apos;s SLHA interface, but not use the ColliderBit standalone interface.</para>
<para>Detector sim capabilities.</para>
<para>Run detector simulators and produce the standard event format.</para>
<para>Provide functions that can be used for event weighting, e.g. for process-level cross-section scaling. {@</para>
<para>Event weight functions that depend on model-specific Py8Collider versions should be declared in the corresponding model header in ColliderBit/models. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="179" column="11" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="521" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>getPIDPairCrossSectionsMap_testing</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>A nested function that reads in HepMC event files and converts them to HEPUtils::Event format.</para>
<para>Only activate these functions if HepMC is activated.</para>
<para>Weight events according to process cross-section.</para>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model</para>
<para>This function is intended as a fallback option that simply assigns a unit weight to all events</para>
<para>A nested function that reads in Les Houches Event files and converts them to HEPUtils::Event format </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="181" column="13" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="534" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>PIDPairCrossSectionsInfo</initializer>
        <briefdescription>
<para>Get a list of all the PID pairs related to active process codes. </para>
        </briefdescription>
        <detaileddescription>
<para>Collider sim event capability.</para>
<para>Collider sim capability.</para>
<para>Output some info about the event loop.</para>
<para>Calculate the total LHC log likelihood.</para>
<para>Extract the indices for the SRs used in the analysis loglikes (alphabetical SR ordering)</para>
<para>Extract the labels for the SRs used in the analysis loglikes.</para>
<para>Extract the combined log likelihood for each analysis to a simple map_str_dbl.</para>
<para>Extract the log likelihood for each SR to a simple map_str_dbl.</para>
<para>Calculate the log likelihood for each SR in each analysis using the analysis numbers.</para>
<para>Extract the signal predictions and uncertainties for all analyses.</para>
<para>Collect all the analysis numbers in one place.</para>
<para>A map between PID pairs and cross-sections.</para>
<para>Execute the main Monte Carlo event loop. Note: &quot;Non-loop&quot; capabilities that some in-loop capabilities depend on can be added as dependencies here to ensure that they are calculated before the loop starts.</para>
<para>Total cross-section</para>
<para>Output info on TotalCrossSection as a str-double map, for easy printing</para>
<para>Process codes and PID pairs</para>
<para>Get list of Pythia process codes for all active processes</para>
<para>Translate a list of Pythia process codes to list of (PID,PID) pairs for the two final state particles of the hard process.</para>
<para>Process-level cross-sections</para>
<para>A map between Pythia process codes and cross-sections</para>
<para>Output PID pair cross-sections as a str-dbl map, for easy printing</para>
<para>A consistency check that ensures that if each event is weighted by a process-level cross-section from an external calculator, then the total cross-section is taken from the event generator</para>
<para>Lists of analyses to run</para>
<para>Run all analyses and fill vector of analysis results.</para>
<para>Dummy observable that creates a dependency on TestModel1D, which is used to satisfy the normal GAMBIT model requrements in a minimal way. This is useful in the case where we just want to test ColliderBit on a single point with Pythia&apos;s SLHA interface, but not use the ColliderBit standalone interface.</para>
<para>Detector sim capabilities.</para>
<para>Run detector simulators and produce the standard event format.</para>
<para>Provide functions that can be used for event weighting, e.g. for process-level cross-section scaling. {@</para>
<para>Event weight functions that depend on model-specific Py8Collider versions should be declared in the corresponding model header in ColliderBit/models. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="190" column="11" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="521" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>getPIDPairCrossSectionsInfo</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>A nested function that reads in HepMC event files and converts them to HEPUtils::Event format.</para>
<para>Only activate these functions if HepMC is activated.</para>
<para>Weight events according to process cross-section.</para>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model</para>
<para>This function is intended as a fallback option that simply assigns a unit weight to all events</para>
<para>A nested function that reads in Les Houches Event files and converts them to HEPUtils::Event format </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="192" column="13" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="534" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>CrossSectionConsistencyCheck</initializer>
        <briefdescription>
<para>Get a list of all the PID pairs related to active process codes. </para>
        </briefdescription>
        <detaileddescription>
<para>Collider sim event capability.</para>
<para>Collider sim capability.</para>
<para>Output some info about the event loop.</para>
<para>Calculate the total LHC log likelihood.</para>
<para>Extract the indices for the SRs used in the analysis loglikes (alphabetical SR ordering)</para>
<para>Extract the labels for the SRs used in the analysis loglikes.</para>
<para>Extract the combined log likelihood for each analysis to a simple map_str_dbl.</para>
<para>Extract the log likelihood for each SR to a simple map_str_dbl.</para>
<para>Calculate the log likelihood for each SR in each analysis using the analysis numbers.</para>
<para>Extract the signal predictions and uncertainties for all analyses.</para>
<para>Collect all the analysis numbers in one place.</para>
<para>A map between PID pairs and cross-sections.</para>
<para>Execute the main Monte Carlo event loop. Note: &quot;Non-loop&quot; capabilities that some in-loop capabilities depend on can be added as dependencies here to ensure that they are calculated before the loop starts.</para>
<para>Total cross-section</para>
<para>Output info on TotalCrossSection as a str-double map, for easy printing</para>
<para>Process codes and PID pairs</para>
<para>Get list of Pythia process codes for all active processes</para>
<para>Translate a list of Pythia process codes to list of (PID,PID) pairs for the two final state particles of the hard process.</para>
<para>Process-level cross-sections</para>
<para>A map between Pythia process codes and cross-sections</para>
<para>Output PID pair cross-sections as a str-dbl map, for easy printing</para>
<para>A consistency check that ensures that if each event is weighted by a process-level cross-section from an external calculator, then the total cross-section is taken from the event generator</para>
<para>Lists of analyses to run</para>
<para>Run all analyses and fill vector of analysis results.</para>
<para>Dummy observable that creates a dependency on TestModel1D, which is used to satisfy the normal GAMBIT model requrements in a minimal way. This is useful in the case where we just want to test ColliderBit on a single point with Pythia&apos;s SLHA interface, but not use the ColliderBit standalone interface.</para>
<para>Detector sim capabilities.</para>
<para>Run detector simulators and produce the standard event format.</para>
<para>Provide functions that can be used for event weighting, e.g. for process-level cross-section scaling. {@</para>
<para>Event weight functions that depend on model-specific Py8Collider versions should be declared in the corresponding model header in ColliderBit/models. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="203" column="11" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="521" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>doCrossSectionConsistencyCheck</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>A nested function that reads in HepMC event files and converts them to HEPUtils::Event format.</para>
<para>Only activate these functions if HepMC is activated.</para>
<para>Weight events according to process cross-section.</para>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model</para>
<para>This function is intended as a fallback option that simply assigns a unit weight to all events</para>
<para>A nested function that reads in Les Houches Event files and converts them to HEPUtils::Event format </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="205" column="13" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="534" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>ATLASAnalysisContainer</initializer>
        <briefdescription>
<para>Get a list of all the PID pairs related to active process codes. </para>
        </briefdescription>
        <detaileddescription>
<para>Collider sim event capability.</para>
<para>Collider sim capability.</para>
<para>Output some info about the event loop.</para>
<para>Calculate the total LHC log likelihood.</para>
<para>Extract the indices for the SRs used in the analysis loglikes (alphabetical SR ordering)</para>
<para>Extract the labels for the SRs used in the analysis loglikes.</para>
<para>Extract the combined log likelihood for each analysis to a simple map_str_dbl.</para>
<para>Extract the log likelihood for each SR to a simple map_str_dbl.</para>
<para>Calculate the log likelihood for each SR in each analysis using the analysis numbers.</para>
<para>Extract the signal predictions and uncertainties for all analyses.</para>
<para>Collect all the analysis numbers in one place.</para>
<para>A map between PID pairs and cross-sections.</para>
<para>Execute the main Monte Carlo event loop. Note: &quot;Non-loop&quot; capabilities that some in-loop capabilities depend on can be added as dependencies here to ensure that they are calculated before the loop starts.</para>
<para>Total cross-section</para>
<para>Output info on TotalCrossSection as a str-double map, for easy printing</para>
<para>Process codes and PID pairs</para>
<para>Get list of Pythia process codes for all active processes</para>
<para>Translate a list of Pythia process codes to list of (PID,PID) pairs for the two final state particles of the hard process.</para>
<para>Process-level cross-sections</para>
<para>A map between Pythia process codes and cross-sections</para>
<para>Output PID pair cross-sections as a str-dbl map, for easy printing</para>
<para>A consistency check that ensures that if each event is weighted by a process-level cross-section from an external calculator, then the total cross-section is taken from the event generator</para>
<para>Lists of analyses to run</para>
<para>Run all analyses and fill vector of analysis results.</para>
<para>Dummy observable that creates a dependency on TestModel1D, which is used to satisfy the normal GAMBIT model requrements in a minimal way. This is useful in the case where we just want to test ColliderBit on a single point with Pythia&apos;s SLHA interface, but not use the ColliderBit standalone interface.</para>
<para>Detector sim capabilities.</para>
<para>Run detector simulators and produce the standard event format.</para>
<para>Provide functions that can be used for event weighting, e.g. for process-level cross-section scaling. {@</para>
<para>Event weight functions that depend on model-specific Py8Collider versions should be declared in the corresponding model header in ColliderBit/models. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="216" column="11" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="521" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>getATLASAnalysisContainer</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>A nested function that reads in HepMC event files and converts them to HEPUtils::Event format.</para>
<para>Only activate these functions if HepMC is activated.</para>
<para>Weight events according to process cross-section.</para>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model</para>
<para>This function is intended as a fallback option that simply assigns a unit weight to all events</para>
<para>A nested function that reads in Les Houches Event files and converts them to HEPUtils::Event format </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="218" column="13" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="534" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>CMSAnalysisContainer</initializer>
        <briefdescription>
<para>Get a list of all the PID pairs related to active process codes. </para>
        </briefdescription>
        <detaileddescription>
<para>Collider sim event capability.</para>
<para>Collider sim capability.</para>
<para>Output some info about the event loop.</para>
<para>Calculate the total LHC log likelihood.</para>
<para>Extract the indices for the SRs used in the analysis loglikes (alphabetical SR ordering)</para>
<para>Extract the labels for the SRs used in the analysis loglikes.</para>
<para>Extract the combined log likelihood for each analysis to a simple map_str_dbl.</para>
<para>Extract the log likelihood for each SR to a simple map_str_dbl.</para>
<para>Calculate the log likelihood for each SR in each analysis using the analysis numbers.</para>
<para>Extract the signal predictions and uncertainties for all analyses.</para>
<para>Collect all the analysis numbers in one place.</para>
<para>A map between PID pairs and cross-sections.</para>
<para>Execute the main Monte Carlo event loop. Note: &quot;Non-loop&quot; capabilities that some in-loop capabilities depend on can be added as dependencies here to ensure that they are calculated before the loop starts.</para>
<para>Total cross-section</para>
<para>Output info on TotalCrossSection as a str-double map, for easy printing</para>
<para>Process codes and PID pairs</para>
<para>Get list of Pythia process codes for all active processes</para>
<para>Translate a list of Pythia process codes to list of (PID,PID) pairs for the two final state particles of the hard process.</para>
<para>Process-level cross-sections</para>
<para>A map between Pythia process codes and cross-sections</para>
<para>Output PID pair cross-sections as a str-dbl map, for easy printing</para>
<para>A consistency check that ensures that if each event is weighted by a process-level cross-section from an external calculator, then the total cross-section is taken from the event generator</para>
<para>Lists of analyses to run</para>
<para>Run all analyses and fill vector of analysis results.</para>
<para>Dummy observable that creates a dependency on TestModel1D, which is used to satisfy the normal GAMBIT model requrements in a minimal way. This is useful in the case where we just want to test ColliderBit on a single point with Pythia&apos;s SLHA interface, but not use the ColliderBit standalone interface.</para>
<para>Detector sim capabilities.</para>
<para>Run detector simulators and produce the standard event format.</para>
<para>Provide functions that can be used for event weighting, e.g. for process-level cross-section scaling. {@</para>
<para>Event weight functions that depend on model-specific Py8Collider versions should be declared in the corresponding model header in ColliderBit/models. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="225" column="11" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="521" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>getCMSAnalysisContainer</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>A nested function that reads in HepMC event files and converts them to HEPUtils::Event format.</para>
<para>Only activate these functions if HepMC is activated.</para>
<para>Weight events according to process cross-section.</para>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model</para>
<para>This function is intended as a fallback option that simply assigns a unit weight to all events</para>
<para>A nested function that reads in Les Houches Event files and converts them to HEPUtils::Event format </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="227" column="13" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="534" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>IdentityAnalysisContainer</initializer>
        <briefdescription>
<para>Get a list of all the PID pairs related to active process codes. </para>
        </briefdescription>
        <detaileddescription>
<para>Collider sim event capability.</para>
<para>Collider sim capability.</para>
<para>Output some info about the event loop.</para>
<para>Calculate the total LHC log likelihood.</para>
<para>Extract the indices for the SRs used in the analysis loglikes (alphabetical SR ordering)</para>
<para>Extract the labels for the SRs used in the analysis loglikes.</para>
<para>Extract the combined log likelihood for each analysis to a simple map_str_dbl.</para>
<para>Extract the log likelihood for each SR to a simple map_str_dbl.</para>
<para>Calculate the log likelihood for each SR in each analysis using the analysis numbers.</para>
<para>Extract the signal predictions and uncertainties for all analyses.</para>
<para>Collect all the analysis numbers in one place.</para>
<para>A map between PID pairs and cross-sections.</para>
<para>Execute the main Monte Carlo event loop. Note: &quot;Non-loop&quot; capabilities that some in-loop capabilities depend on can be added as dependencies here to ensure that they are calculated before the loop starts.</para>
<para>Total cross-section</para>
<para>Output info on TotalCrossSection as a str-double map, for easy printing</para>
<para>Process codes and PID pairs</para>
<para>Get list of Pythia process codes for all active processes</para>
<para>Translate a list of Pythia process codes to list of (PID,PID) pairs for the two final state particles of the hard process.</para>
<para>Process-level cross-sections</para>
<para>A map between Pythia process codes and cross-sections</para>
<para>Output PID pair cross-sections as a str-dbl map, for easy printing</para>
<para>A consistency check that ensures that if each event is weighted by a process-level cross-section from an external calculator, then the total cross-section is taken from the event generator</para>
<para>Lists of analyses to run</para>
<para>Run all analyses and fill vector of analysis results.</para>
<para>Dummy observable that creates a dependency on TestModel1D, which is used to satisfy the normal GAMBIT model requrements in a minimal way. This is useful in the case where we just want to test ColliderBit on a single point with Pythia&apos;s SLHA interface, but not use the ColliderBit standalone interface.</para>
<para>Detector sim capabilities.</para>
<para>Run detector simulators and produce the standard event format.</para>
<para>Provide functions that can be used for event weighting, e.g. for process-level cross-section scaling. {@</para>
<para>Event weight functions that depend on model-specific Py8Collider versions should be declared in the corresponding model header in ColliderBit/models. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="234" column="11" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="521" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>getIdentityAnalysisContainer</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>A nested function that reads in HepMC event files and converts them to HEPUtils::Event format.</para>
<para>Only activate these functions if HepMC is activated.</para>
<para>Weight events according to process cross-section.</para>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model</para>
<para>This function is intended as a fallback option that simply assigns a unit weight to all events</para>
<para>A nested function that reads in Les Houches Event files and converts them to HEPUtils::Event format </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="236" column="13" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="534" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>ATLASAnalysisNumbers</initializer>
        <briefdescription>
<para>Get a list of all the PID pairs related to active process codes. </para>
        </briefdescription>
        <detaileddescription>
<para>Collider sim event capability.</para>
<para>Collider sim capability.</para>
<para>Output some info about the event loop.</para>
<para>Calculate the total LHC log likelihood.</para>
<para>Extract the indices for the SRs used in the analysis loglikes (alphabetical SR ordering)</para>
<para>Extract the labels for the SRs used in the analysis loglikes.</para>
<para>Extract the combined log likelihood for each analysis to a simple map_str_dbl.</para>
<para>Extract the log likelihood for each SR to a simple map_str_dbl.</para>
<para>Calculate the log likelihood for each SR in each analysis using the analysis numbers.</para>
<para>Extract the signal predictions and uncertainties for all analyses.</para>
<para>Collect all the analysis numbers in one place.</para>
<para>A map between PID pairs and cross-sections.</para>
<para>Execute the main Monte Carlo event loop. Note: &quot;Non-loop&quot; capabilities that some in-loop capabilities depend on can be added as dependencies here to ensure that they are calculated before the loop starts.</para>
<para>Total cross-section</para>
<para>Output info on TotalCrossSection as a str-double map, for easy printing</para>
<para>Process codes and PID pairs</para>
<para>Get list of Pythia process codes for all active processes</para>
<para>Translate a list of Pythia process codes to list of (PID,PID) pairs for the two final state particles of the hard process.</para>
<para>Process-level cross-sections</para>
<para>A map between Pythia process codes and cross-sections</para>
<para>Output PID pair cross-sections as a str-dbl map, for easy printing</para>
<para>A consistency check that ensures that if each event is weighted by a process-level cross-section from an external calculator, then the total cross-section is taken from the event generator</para>
<para>Lists of analyses to run</para>
<para>Run all analyses and fill vector of analysis results.</para>
<para>Dummy observable that creates a dependency on TestModel1D, which is used to satisfy the normal GAMBIT model requrements in a minimal way. This is useful in the case where we just want to test ColliderBit on a single point with Pythia&apos;s SLHA interface, but not use the ColliderBit standalone interface.</para>
<para>Detector sim capabilities.</para>
<para>Run detector simulators and produce the standard event format.</para>
<para>Provide functions that can be used for event weighting, e.g. for process-level cross-section scaling. {@</para>
<para>Event weight functions that depend on model-specific Py8Collider versions should be declared in the corresponding model header in ColliderBit/models. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="246" column="11" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="521" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>runATLASAnalyses</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>A nested function that reads in HepMC event files and converts them to HEPUtils::Event format.</para>
<para>Only activate these functions if HepMC is activated.</para>
<para>Weight events according to process cross-section.</para>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model</para>
<para>This function is intended as a fallback option that simply assigns a unit weight to all events</para>
<para>A nested function that reads in Les Houches Event files and converts them to HEPUtils::Event format </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="248" column="13" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="534" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>CMSAnalysisNumbers</initializer>
        <briefdescription>
<para>Get a list of all the PID pairs related to active process codes. </para>
        </briefdescription>
        <detaileddescription>
<para>Collider sim event capability.</para>
<para>Collider sim capability.</para>
<para>Output some info about the event loop.</para>
<para>Calculate the total LHC log likelihood.</para>
<para>Extract the indices for the SRs used in the analysis loglikes (alphabetical SR ordering)</para>
<para>Extract the labels for the SRs used in the analysis loglikes.</para>
<para>Extract the combined log likelihood for each analysis to a simple map_str_dbl.</para>
<para>Extract the log likelihood for each SR to a simple map_str_dbl.</para>
<para>Calculate the log likelihood for each SR in each analysis using the analysis numbers.</para>
<para>Extract the signal predictions and uncertainties for all analyses.</para>
<para>Collect all the analysis numbers in one place.</para>
<para>A map between PID pairs and cross-sections.</para>
<para>Execute the main Monte Carlo event loop. Note: &quot;Non-loop&quot; capabilities that some in-loop capabilities depend on can be added as dependencies here to ensure that they are calculated before the loop starts.</para>
<para>Total cross-section</para>
<para>Output info on TotalCrossSection as a str-double map, for easy printing</para>
<para>Process codes and PID pairs</para>
<para>Get list of Pythia process codes for all active processes</para>
<para>Translate a list of Pythia process codes to list of (PID,PID) pairs for the two final state particles of the hard process.</para>
<para>Process-level cross-sections</para>
<para>A map between Pythia process codes and cross-sections</para>
<para>Output PID pair cross-sections as a str-dbl map, for easy printing</para>
<para>A consistency check that ensures that if each event is weighted by a process-level cross-section from an external calculator, then the total cross-section is taken from the event generator</para>
<para>Lists of analyses to run</para>
<para>Run all analyses and fill vector of analysis results.</para>
<para>Dummy observable that creates a dependency on TestModel1D, which is used to satisfy the normal GAMBIT model requrements in a minimal way. This is useful in the case where we just want to test ColliderBit on a single point with Pythia&apos;s SLHA interface, but not use the ColliderBit standalone interface.</para>
<para>Detector sim capabilities.</para>
<para>Run detector simulators and produce the standard event format.</para>
<para>Provide functions that can be used for event weighting, e.g. for process-level cross-section scaling. {@</para>
<para>Event weight functions that depend on model-specific Py8Collider versions should be declared in the corresponding model header in ColliderBit/models. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="256" column="11" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="521" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>runCMSAnalyses</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>A nested function that reads in HepMC event files and converts them to HEPUtils::Event format.</para>
<para>Only activate these functions if HepMC is activated.</para>
<para>Weight events according to process cross-section.</para>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model</para>
<para>This function is intended as a fallback option that simply assigns a unit weight to all events</para>
<para>A nested function that reads in Les Houches Event files and converts them to HEPUtils::Event format </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="258" column="13" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="534" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>IdentityAnalysisNumbers</initializer>
        <briefdescription>
<para>Get a list of all the PID pairs related to active process codes. </para>
        </briefdescription>
        <detaileddescription>
<para>Collider sim event capability.</para>
<para>Collider sim capability.</para>
<para>Output some info about the event loop.</para>
<para>Calculate the total LHC log likelihood.</para>
<para>Extract the indices for the SRs used in the analysis loglikes (alphabetical SR ordering)</para>
<para>Extract the labels for the SRs used in the analysis loglikes.</para>
<para>Extract the combined log likelihood for each analysis to a simple map_str_dbl.</para>
<para>Extract the log likelihood for each SR to a simple map_str_dbl.</para>
<para>Calculate the log likelihood for each SR in each analysis using the analysis numbers.</para>
<para>Extract the signal predictions and uncertainties for all analyses.</para>
<para>Collect all the analysis numbers in one place.</para>
<para>A map between PID pairs and cross-sections.</para>
<para>Execute the main Monte Carlo event loop. Note: &quot;Non-loop&quot; capabilities that some in-loop capabilities depend on can be added as dependencies here to ensure that they are calculated before the loop starts.</para>
<para>Total cross-section</para>
<para>Output info on TotalCrossSection as a str-double map, for easy printing</para>
<para>Process codes and PID pairs</para>
<para>Get list of Pythia process codes for all active processes</para>
<para>Translate a list of Pythia process codes to list of (PID,PID) pairs for the two final state particles of the hard process.</para>
<para>Process-level cross-sections</para>
<para>A map between Pythia process codes and cross-sections</para>
<para>Output PID pair cross-sections as a str-dbl map, for easy printing</para>
<para>A consistency check that ensures that if each event is weighted by a process-level cross-section from an external calculator, then the total cross-section is taken from the event generator</para>
<para>Lists of analyses to run</para>
<para>Run all analyses and fill vector of analysis results.</para>
<para>Dummy observable that creates a dependency on TestModel1D, which is used to satisfy the normal GAMBIT model requrements in a minimal way. This is useful in the case where we just want to test ColliderBit on a single point with Pythia&apos;s SLHA interface, but not use the ColliderBit standalone interface.</para>
<para>Detector sim capabilities.</para>
<para>Run detector simulators and produce the standard event format.</para>
<para>Provide functions that can be used for event weighting, e.g. for process-level cross-section scaling. {@</para>
<para>Event weight functions that depend on model-specific Py8Collider versions should be declared in the corresponding model header in ColliderBit/models. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="266" column="11" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="521" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>runIdentityAnalyses</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>A nested function that reads in HepMC event files and converts them to HEPUtils::Event format.</para>
<para>Only activate these functions if HepMC is activated.</para>
<para>Weight events according to process cross-section.</para>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model</para>
<para>This function is intended as a fallback option that simply assigns a unit weight to all events</para>
<para>A nested function that reads in Les Houches Event files and converts them to HEPUtils::Event format </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="268" column="13" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="534" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>AllAnalysisNumbers</initializer>
        <briefdescription>
<para>Get a list of all the PID pairs related to active process codes. </para>
        </briefdescription>
        <detaileddescription>
<para>Collider sim event capability.</para>
<para>Collider sim capability.</para>
<para>Output some info about the event loop.</para>
<para>Calculate the total LHC log likelihood.</para>
<para>Extract the indices for the SRs used in the analysis loglikes (alphabetical SR ordering)</para>
<para>Extract the labels for the SRs used in the analysis loglikes.</para>
<para>Extract the combined log likelihood for each analysis to a simple map_str_dbl.</para>
<para>Extract the log likelihood for each SR to a simple map_str_dbl.</para>
<para>Calculate the log likelihood for each SR in each analysis using the analysis numbers.</para>
<para>Extract the signal predictions and uncertainties for all analyses.</para>
<para>Collect all the analysis numbers in one place.</para>
<para>A map between PID pairs and cross-sections.</para>
<para>Execute the main Monte Carlo event loop. Note: &quot;Non-loop&quot; capabilities that some in-loop capabilities depend on can be added as dependencies here to ensure that they are calculated before the loop starts.</para>
<para>Total cross-section</para>
<para>Output info on TotalCrossSection as a str-double map, for easy printing</para>
<para>Process codes and PID pairs</para>
<para>Get list of Pythia process codes for all active processes</para>
<para>Translate a list of Pythia process codes to list of (PID,PID) pairs for the two final state particles of the hard process.</para>
<para>Process-level cross-sections</para>
<para>A map between Pythia process codes and cross-sections</para>
<para>Output PID pair cross-sections as a str-dbl map, for easy printing</para>
<para>A consistency check that ensures that if each event is weighted by a process-level cross-section from an external calculator, then the total cross-section is taken from the event generator</para>
<para>Lists of analyses to run</para>
<para>Run all analyses and fill vector of analysis results.</para>
<para>Dummy observable that creates a dependency on TestModel1D, which is used to satisfy the normal GAMBIT model requrements in a minimal way. This is useful in the case where we just want to test ColliderBit on a single point with Pythia&apos;s SLHA interface, but not use the ColliderBit standalone interface.</para>
<para>Detector sim capabilities.</para>
<para>Run detector simulators and produce the standard event format.</para>
<para>Provide functions that can be used for event weighting, e.g. for process-level cross-section scaling. {@</para>
<para>Event weight functions that depend on model-specific Py8Collider versions should be declared in the corresponding model header in ColliderBit/models. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="278" column="11" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="521" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>CollectAnalyses</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>A nested function that reads in HepMC event files and converts them to HEPUtils::Event format.</para>
<para>Only activate these functions if HepMC is activated.</para>
<para>Weight events according to process cross-section.</para>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model</para>
<para>This function is intended as a fallback option that simply assigns a unit weight to all events</para>
<para>A nested function that reads in Les Houches Event files and converts them to HEPUtils::Event format </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="280" column="13" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="534" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>DMEFT_results_profiled</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>A nested function that reads in HepMC event files and converts them to HEPUtils::Event format.</para>
<para>Only activate these functions if HepMC is activated.</para>
<para>Weight events according to process cross-section.</para>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model</para>
<para>This function is intended as a fallback option that simply assigns a unit weight to all events</para>
<para>A nested function that reads in Les Houches Event files and converts them to HEPUtils::Event format </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="288" column="13" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="534" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>DMEFT_results_cutoff</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>A nested function that reads in HepMC event files and converts them to HEPUtils::Event format.</para>
<para>Only activate these functions if HepMC is activated.</para>
<para>Weight events according to process cross-section.</para>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model</para>
<para>This function is intended as a fallback option that simply assigns a unit weight to all events</para>
<para>A nested function that reads in Les Houches Event files and converts them to HEPUtils::Event format </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="296" column="13" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="534" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>AllAnalysisNumbersUnmodified</initializer>
        <briefdescription>
<para>Get a list of all the PID pairs related to active process codes. </para>
        </briefdescription>
        <detaileddescription>
<para>Collider sim event capability.</para>
<para>Collider sim capability.</para>
<para>Output some info about the event loop.</para>
<para>Calculate the total LHC log likelihood.</para>
<para>Extract the indices for the SRs used in the analysis loglikes (alphabetical SR ordering)</para>
<para>Extract the labels for the SRs used in the analysis loglikes.</para>
<para>Extract the combined log likelihood for each analysis to a simple map_str_dbl.</para>
<para>Extract the log likelihood for each SR to a simple map_str_dbl.</para>
<para>Calculate the log likelihood for each SR in each analysis using the analysis numbers.</para>
<para>Extract the signal predictions and uncertainties for all analyses.</para>
<para>Collect all the analysis numbers in one place.</para>
<para>A map between PID pairs and cross-sections.</para>
<para>Execute the main Monte Carlo event loop. Note: &quot;Non-loop&quot; capabilities that some in-loop capabilities depend on can be added as dependencies here to ensure that they are calculated before the loop starts.</para>
<para>Total cross-section</para>
<para>Output info on TotalCrossSection as a str-double map, for easy printing</para>
<para>Process codes and PID pairs</para>
<para>Get list of Pythia process codes for all active processes</para>
<para>Translate a list of Pythia process codes to list of (PID,PID) pairs for the two final state particles of the hard process.</para>
<para>Process-level cross-sections</para>
<para>A map between Pythia process codes and cross-sections</para>
<para>Output PID pair cross-sections as a str-dbl map, for easy printing</para>
<para>A consistency check that ensures that if each event is weighted by a process-level cross-section from an external calculator, then the total cross-section is taken from the event generator</para>
<para>Lists of analyses to run</para>
<para>Run all analyses and fill vector of analysis results.</para>
<para>Dummy observable that creates a dependency on TestModel1D, which is used to satisfy the normal GAMBIT model requrements in a minimal way. This is useful in the case where we just want to test ColliderBit on a single point with Pythia&apos;s SLHA interface, but not use the ColliderBit standalone interface.</para>
<para>Detector sim capabilities.</para>
<para>Run detector simulators and produce the standard event format.</para>
<para>Provide functions that can be used for event weighting, e.g. for process-level cross-section scaling. {@</para>
<para>Event weight functions that depend on model-specific Py8Collider versions should be declared in the corresponding model header in ColliderBit/models. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="304" column="11" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="521" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>DMEFT_results</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>A nested function that reads in HepMC event files and converts them to HEPUtils::Event format.</para>
<para>Only activate these functions if HepMC is activated.</para>
<para>Weight events according to process cross-section.</para>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model</para>
<para>This function is intended as a fallback option that simply assigns a unit weight to all events</para>
<para>A nested function that reads in Les Houches Event files and converts them to HEPUtils::Event format </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="305" column="13" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="534" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>DMEFT_profiled_LHC_nuisance_params</initializer>
        <briefdescription>
<para>Get a list of all the PID pairs related to active process codes. </para>
        </briefdescription>
        <detaileddescription>
<para>Collider sim event capability.</para>
<para>Collider sim capability.</para>
<para>Output some info about the event loop.</para>
<para>Calculate the total LHC log likelihood.</para>
<para>Extract the indices for the SRs used in the analysis loglikes (alphabetical SR ordering)</para>
<para>Extract the labels for the SRs used in the analysis loglikes.</para>
<para>Extract the combined log likelihood for each analysis to a simple map_str_dbl.</para>
<para>Extract the log likelihood for each SR to a simple map_str_dbl.</para>
<para>Calculate the log likelihood for each SR in each analysis using the analysis numbers.</para>
<para>Extract the signal predictions and uncertainties for all analyses.</para>
<para>Collect all the analysis numbers in one place.</para>
<para>A map between PID pairs and cross-sections.</para>
<para>Execute the main Monte Carlo event loop. Note: &quot;Non-loop&quot; capabilities that some in-loop capabilities depend on can be added as dependencies here to ensure that they are calculated before the loop starts.</para>
<para>Total cross-section</para>
<para>Output info on TotalCrossSection as a str-double map, for easy printing</para>
<para>Process codes and PID pairs</para>
<para>Get list of Pythia process codes for all active processes</para>
<para>Translate a list of Pythia process codes to list of (PID,PID) pairs for the two final state particles of the hard process.</para>
<para>Process-level cross-sections</para>
<para>A map between Pythia process codes and cross-sections</para>
<para>Output PID pair cross-sections as a str-dbl map, for easy printing</para>
<para>A consistency check that ensures that if each event is weighted by a process-level cross-section from an external calculator, then the total cross-section is taken from the event generator</para>
<para>Lists of analyses to run</para>
<para>Run all analyses and fill vector of analysis results.</para>
<para>Dummy observable that creates a dependency on TestModel1D, which is used to satisfy the normal GAMBIT model requrements in a minimal way. This is useful in the case where we just want to test ColliderBit on a single point with Pythia&apos;s SLHA interface, but not use the ColliderBit standalone interface.</para>
<para>Detector sim capabilities.</para>
<para>Run detector simulators and produce the standard event format.</para>
<para>Provide functions that can be used for event weighting, e.g. for process-level cross-section scaling. {@</para>
<para>Event weight functions that depend on model-specific Py8Collider versions should be declared in the corresponding model header in ColliderBit/models. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="312" column="11" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="521" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>calc_DMEFT_profiled_LHC_nuisance_params</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>A nested function that reads in HepMC event files and converts them to HEPUtils::Event format.</para>
<para>Only activate these functions if HepMC is activated.</para>
<para>Weight events according to process cross-section.</para>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model</para>
<para>This function is intended as a fallback option that simply assigns a unit weight to all events</para>
<para>A nested function that reads in Les Houches Event files and converts them to HEPUtils::Event format </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="313" column="13" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="534" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>LHC_signals</initializer>
        <briefdescription>
<para>Get a list of all the PID pairs related to active process codes. </para>
        </briefdescription>
        <detaileddescription>
<para>Collider sim event capability.</para>
<para>Collider sim capability.</para>
<para>Output some info about the event loop.</para>
<para>Calculate the total LHC log likelihood.</para>
<para>Extract the indices for the SRs used in the analysis loglikes (alphabetical SR ordering)</para>
<para>Extract the labels for the SRs used in the analysis loglikes.</para>
<para>Extract the combined log likelihood for each analysis to a simple map_str_dbl.</para>
<para>Extract the log likelihood for each SR to a simple map_str_dbl.</para>
<para>Calculate the log likelihood for each SR in each analysis using the analysis numbers.</para>
<para>Extract the signal predictions and uncertainties for all analyses.</para>
<para>Collect all the analysis numbers in one place.</para>
<para>A map between PID pairs and cross-sections.</para>
<para>Execute the main Monte Carlo event loop. Note: &quot;Non-loop&quot; capabilities that some in-loop capabilities depend on can be added as dependencies here to ensure that they are calculated before the loop starts.</para>
<para>Total cross-section</para>
<para>Output info on TotalCrossSection as a str-double map, for easy printing</para>
<para>Process codes and PID pairs</para>
<para>Get list of Pythia process codes for all active processes</para>
<para>Translate a list of Pythia process codes to list of (PID,PID) pairs for the two final state particles of the hard process.</para>
<para>Process-level cross-sections</para>
<para>A map between Pythia process codes and cross-sections</para>
<para>Output PID pair cross-sections as a str-dbl map, for easy printing</para>
<para>A consistency check that ensures that if each event is weighted by a process-level cross-section from an external calculator, then the total cross-section is taken from the event generator</para>
<para>Lists of analyses to run</para>
<para>Run all analyses and fill vector of analysis results.</para>
<para>Dummy observable that creates a dependency on TestModel1D, which is used to satisfy the normal GAMBIT model requrements in a minimal way. This is useful in the case where we just want to test ColliderBit on a single point with Pythia&apos;s SLHA interface, but not use the ColliderBit standalone interface.</para>
<para>Detector sim capabilities.</para>
<para>Run detector simulators and produce the standard event format.</para>
<para>Provide functions that can be used for event weighting, e.g. for process-level cross-section scaling. {@</para>
<para>Event weight functions that depend on model-specific Py8Collider versions should be declared in the corresponding model header in ColliderBit/models. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="323" column="11" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="521" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>calc_LHC_signals</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>A nested function that reads in HepMC event files and converts them to HEPUtils::Event format.</para>
<para>Only activate these functions if HepMC is activated.</para>
<para>Weight events according to process cross-section.</para>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model</para>
<para>This function is intended as a fallback option that simply assigns a unit weight to all events</para>
<para>A nested function that reads in Les Houches Event files and converts them to HEPUtils::Event format </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="325" column="13" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="534" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>LHC_LogLikes</initializer>
        <briefdescription>
<para>Get a list of all the PID pairs related to active process codes. </para>
        </briefdescription>
        <detaileddescription>
<para>Collider sim event capability.</para>
<para>Collider sim capability.</para>
<para>Output some info about the event loop.</para>
<para>Calculate the total LHC log likelihood.</para>
<para>Extract the indices for the SRs used in the analysis loglikes (alphabetical SR ordering)</para>
<para>Extract the labels for the SRs used in the analysis loglikes.</para>
<para>Extract the combined log likelihood for each analysis to a simple map_str_dbl.</para>
<para>Extract the log likelihood for each SR to a simple map_str_dbl.</para>
<para>Calculate the log likelihood for each SR in each analysis using the analysis numbers.</para>
<para>Extract the signal predictions and uncertainties for all analyses.</para>
<para>Collect all the analysis numbers in one place.</para>
<para>A map between PID pairs and cross-sections.</para>
<para>Execute the main Monte Carlo event loop. Note: &quot;Non-loop&quot; capabilities that some in-loop capabilities depend on can be added as dependencies here to ensure that they are calculated before the loop starts.</para>
<para>Total cross-section</para>
<para>Output info on TotalCrossSection as a str-double map, for easy printing</para>
<para>Process codes and PID pairs</para>
<para>Get list of Pythia process codes for all active processes</para>
<para>Translate a list of Pythia process codes to list of (PID,PID) pairs for the two final state particles of the hard process.</para>
<para>Process-level cross-sections</para>
<para>A map between Pythia process codes and cross-sections</para>
<para>Output PID pair cross-sections as a str-dbl map, for easy printing</para>
<para>A consistency check that ensures that if each event is weighted by a process-level cross-section from an external calculator, then the total cross-section is taken from the event generator</para>
<para>Lists of analyses to run</para>
<para>Run all analyses and fill vector of analysis results.</para>
<para>Dummy observable that creates a dependency on TestModel1D, which is used to satisfy the normal GAMBIT model requrements in a minimal way. This is useful in the case where we just want to test ColliderBit on a single point with Pythia&apos;s SLHA interface, but not use the ColliderBit standalone interface.</para>
<para>Detector sim capabilities.</para>
<para>Run detector simulators and produce the standard event format.</para>
<para>Provide functions that can be used for event weighting, e.g. for process-level cross-section scaling. {@</para>
<para>Event weight functions that depend on model-specific Py8Collider versions should be declared in the corresponding model header in ColliderBit/models. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="332" column="11" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="521" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>calc_LHC_LogLikes</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>A nested function that reads in HepMC event files and converts them to HEPUtils::Event format.</para>
<para>Only activate these functions if HepMC is activated.</para>
<para>Weight events according to process cross-section.</para>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model</para>
<para>This function is intended as a fallback option that simply assigns a unit weight to all events</para>
<para>A nested function that reads in Les Houches Event files and converts them to HEPUtils::Event format </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="334" column="13" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="534" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>LHC_LogLike_per_SR</initializer>
        <briefdescription>
<para>Get a list of all the PID pairs related to active process codes. </para>
        </briefdescription>
        <detaileddescription>
<para>Collider sim event capability.</para>
<para>Collider sim capability.</para>
<para>Output some info about the event loop.</para>
<para>Calculate the total LHC log likelihood.</para>
<para>Extract the indices for the SRs used in the analysis loglikes (alphabetical SR ordering)</para>
<para>Extract the labels for the SRs used in the analysis loglikes.</para>
<para>Extract the combined log likelihood for each analysis to a simple map_str_dbl.</para>
<para>Extract the log likelihood for each SR to a simple map_str_dbl.</para>
<para>Calculate the log likelihood for each SR in each analysis using the analysis numbers.</para>
<para>Extract the signal predictions and uncertainties for all analyses.</para>
<para>Collect all the analysis numbers in one place.</para>
<para>A map between PID pairs and cross-sections.</para>
<para>Execute the main Monte Carlo event loop. Note: &quot;Non-loop&quot; capabilities that some in-loop capabilities depend on can be added as dependencies here to ensure that they are calculated before the loop starts.</para>
<para>Total cross-section</para>
<para>Output info on TotalCrossSection as a str-double map, for easy printing</para>
<para>Process codes and PID pairs</para>
<para>Get list of Pythia process codes for all active processes</para>
<para>Translate a list of Pythia process codes to list of (PID,PID) pairs for the two final state particles of the hard process.</para>
<para>Process-level cross-sections</para>
<para>A map between Pythia process codes and cross-sections</para>
<para>Output PID pair cross-sections as a str-dbl map, for easy printing</para>
<para>A consistency check that ensures that if each event is weighted by a process-level cross-section from an external calculator, then the total cross-section is taken from the event generator</para>
<para>Lists of analyses to run</para>
<para>Run all analyses and fill vector of analysis results.</para>
<para>Dummy observable that creates a dependency on TestModel1D, which is used to satisfy the normal GAMBIT model requrements in a minimal way. This is useful in the case where we just want to test ColliderBit on a single point with Pythia&apos;s SLHA interface, but not use the ColliderBit standalone interface.</para>
<para>Detector sim capabilities.</para>
<para>Run detector simulators and produce the standard event format.</para>
<para>Provide functions that can be used for event weighting, e.g. for process-level cross-section scaling. {@</para>
<para>Event weight functions that depend on model-specific Py8Collider versions should be declared in the corresponding model header in ColliderBit/models. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="345" column="11" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="521" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>get_LHC_LogLike_per_SR</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>A nested function that reads in HepMC event files and converts them to HEPUtils::Event format.</para>
<para>Only activate these functions if HepMC is activated.</para>
<para>Weight events according to process cross-section.</para>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model</para>
<para>This function is intended as a fallback option that simply assigns a unit weight to all events</para>
<para>A nested function that reads in Les Houches Event files and converts them to HEPUtils::Event format </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="347" column="13" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="534" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>LHC_LogLike_per_analysis</initializer>
        <briefdescription>
<para>Get a list of all the PID pairs related to active process codes. </para>
        </briefdescription>
        <detaileddescription>
<para>Collider sim event capability.</para>
<para>Collider sim capability.</para>
<para>Output some info about the event loop.</para>
<para>Calculate the total LHC log likelihood.</para>
<para>Extract the indices for the SRs used in the analysis loglikes (alphabetical SR ordering)</para>
<para>Extract the labels for the SRs used in the analysis loglikes.</para>
<para>Extract the combined log likelihood for each analysis to a simple map_str_dbl.</para>
<para>Extract the log likelihood for each SR to a simple map_str_dbl.</para>
<para>Calculate the log likelihood for each SR in each analysis using the analysis numbers.</para>
<para>Extract the signal predictions and uncertainties for all analyses.</para>
<para>Collect all the analysis numbers in one place.</para>
<para>A map between PID pairs and cross-sections.</para>
<para>Execute the main Monte Carlo event loop. Note: &quot;Non-loop&quot; capabilities that some in-loop capabilities depend on can be added as dependencies here to ensure that they are calculated before the loop starts.</para>
<para>Total cross-section</para>
<para>Output info on TotalCrossSection as a str-double map, for easy printing</para>
<para>Process codes and PID pairs</para>
<para>Get list of Pythia process codes for all active processes</para>
<para>Translate a list of Pythia process codes to list of (PID,PID) pairs for the two final state particles of the hard process.</para>
<para>Process-level cross-sections</para>
<para>A map between Pythia process codes and cross-sections</para>
<para>Output PID pair cross-sections as a str-dbl map, for easy printing</para>
<para>A consistency check that ensures that if each event is weighted by a process-level cross-section from an external calculator, then the total cross-section is taken from the event generator</para>
<para>Lists of analyses to run</para>
<para>Run all analyses and fill vector of analysis results.</para>
<para>Dummy observable that creates a dependency on TestModel1D, which is used to satisfy the normal GAMBIT model requrements in a minimal way. This is useful in the case where we just want to test ColliderBit on a single point with Pythia&apos;s SLHA interface, but not use the ColliderBit standalone interface.</para>
<para>Detector sim capabilities.</para>
<para>Run detector simulators and produce the standard event format.</para>
<para>Provide functions that can be used for event weighting, e.g. for process-level cross-section scaling. {@</para>
<para>Event weight functions that depend on model-specific Py8Collider versions should be declared in the corresponding model header in ColliderBit/models. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="354" column="11" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="521" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>get_LHC_LogLike_per_analysis</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>A nested function that reads in HepMC event files and converts them to HEPUtils::Event format.</para>
<para>Only activate these functions if HepMC is activated.</para>
<para>Weight events according to process cross-section.</para>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model</para>
<para>This function is intended as a fallback option that simply assigns a unit weight to all events</para>
<para>A nested function that reads in Les Houches Event files and converts them to HEPUtils::Event format </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="356" column="13" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="534" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>LHC_LogLike_SR_labels</initializer>
        <briefdescription>
<para>Get a list of all the PID pairs related to active process codes. </para>
        </briefdescription>
        <detaileddescription>
<para>Collider sim event capability.</para>
<para>Collider sim capability.</para>
<para>Output some info about the event loop.</para>
<para>Calculate the total LHC log likelihood.</para>
<para>Extract the indices for the SRs used in the analysis loglikes (alphabetical SR ordering)</para>
<para>Extract the labels for the SRs used in the analysis loglikes.</para>
<para>Extract the combined log likelihood for each analysis to a simple map_str_dbl.</para>
<para>Extract the log likelihood for each SR to a simple map_str_dbl.</para>
<para>Calculate the log likelihood for each SR in each analysis using the analysis numbers.</para>
<para>Extract the signal predictions and uncertainties for all analyses.</para>
<para>Collect all the analysis numbers in one place.</para>
<para>A map between PID pairs and cross-sections.</para>
<para>Execute the main Monte Carlo event loop. Note: &quot;Non-loop&quot; capabilities that some in-loop capabilities depend on can be added as dependencies here to ensure that they are calculated before the loop starts.</para>
<para>Total cross-section</para>
<para>Output info on TotalCrossSection as a str-double map, for easy printing</para>
<para>Process codes and PID pairs</para>
<para>Get list of Pythia process codes for all active processes</para>
<para>Translate a list of Pythia process codes to list of (PID,PID) pairs for the two final state particles of the hard process.</para>
<para>Process-level cross-sections</para>
<para>A map between Pythia process codes and cross-sections</para>
<para>Output PID pair cross-sections as a str-dbl map, for easy printing</para>
<para>A consistency check that ensures that if each event is weighted by a process-level cross-section from an external calculator, then the total cross-section is taken from the event generator</para>
<para>Lists of analyses to run</para>
<para>Run all analyses and fill vector of analysis results.</para>
<para>Dummy observable that creates a dependency on TestModel1D, which is used to satisfy the normal GAMBIT model requrements in a minimal way. This is useful in the case where we just want to test ColliderBit on a single point with Pythia&apos;s SLHA interface, but not use the ColliderBit standalone interface.</para>
<para>Detector sim capabilities.</para>
<para>Run detector simulators and produce the standard event format.</para>
<para>Provide functions that can be used for event weighting, e.g. for process-level cross-section scaling. {@</para>
<para>Event weight functions that depend on model-specific Py8Collider versions should be declared in the corresponding model header in ColliderBit/models. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="363" column="11" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="521" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>get_LHC_LogLike_SR_labels</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>A nested function that reads in HepMC event files and converts them to HEPUtils::Event format.</para>
<para>Only activate these functions if HepMC is activated.</para>
<para>Weight events according to process cross-section.</para>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model</para>
<para>This function is intended as a fallback option that simply assigns a unit weight to all events</para>
<para>A nested function that reads in Les Houches Event files and converts them to HEPUtils::Event format </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="365" column="13" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="534" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>LHC_LogLike_SR_indices</initializer>
        <briefdescription>
<para>Get a list of all the PID pairs related to active process codes. </para>
        </briefdescription>
        <detaileddescription>
<para>Collider sim event capability.</para>
<para>Collider sim capability.</para>
<para>Output some info about the event loop.</para>
<para>Calculate the total LHC log likelihood.</para>
<para>Extract the indices for the SRs used in the analysis loglikes (alphabetical SR ordering)</para>
<para>Extract the labels for the SRs used in the analysis loglikes.</para>
<para>Extract the combined log likelihood for each analysis to a simple map_str_dbl.</para>
<para>Extract the log likelihood for each SR to a simple map_str_dbl.</para>
<para>Calculate the log likelihood for each SR in each analysis using the analysis numbers.</para>
<para>Extract the signal predictions and uncertainties for all analyses.</para>
<para>Collect all the analysis numbers in one place.</para>
<para>A map between PID pairs and cross-sections.</para>
<para>Execute the main Monte Carlo event loop. Note: &quot;Non-loop&quot; capabilities that some in-loop capabilities depend on can be added as dependencies here to ensure that they are calculated before the loop starts.</para>
<para>Total cross-section</para>
<para>Output info on TotalCrossSection as a str-double map, for easy printing</para>
<para>Process codes and PID pairs</para>
<para>Get list of Pythia process codes for all active processes</para>
<para>Translate a list of Pythia process codes to list of (PID,PID) pairs for the two final state particles of the hard process.</para>
<para>Process-level cross-sections</para>
<para>A map between Pythia process codes and cross-sections</para>
<para>Output PID pair cross-sections as a str-dbl map, for easy printing</para>
<para>A consistency check that ensures that if each event is weighted by a process-level cross-section from an external calculator, then the total cross-section is taken from the event generator</para>
<para>Lists of analyses to run</para>
<para>Run all analyses and fill vector of analysis results.</para>
<para>Dummy observable that creates a dependency on TestModel1D, which is used to satisfy the normal GAMBIT model requrements in a minimal way. This is useful in the case where we just want to test ColliderBit on a single point with Pythia&apos;s SLHA interface, but not use the ColliderBit standalone interface.</para>
<para>Detector sim capabilities.</para>
<para>Run detector simulators and produce the standard event format.</para>
<para>Provide functions that can be used for event weighting, e.g. for process-level cross-section scaling. {@</para>
<para>Event weight functions that depend on model-specific Py8Collider versions should be declared in the corresponding model header in ColliderBit/models. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="372" column="11" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="521" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>get_LHC_LogLike_SR_indices</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>A nested function that reads in HepMC event files and converts them to HEPUtils::Event format.</para>
<para>Only activate these functions if HepMC is activated.</para>
<para>Weight events according to process cross-section.</para>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model</para>
<para>This function is intended as a fallback option that simply assigns a unit weight to all events</para>
<para>A nested function that reads in Les Houches Event files and converts them to HEPUtils::Event format </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="374" column="13" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="534" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>LHC_Combined_LogLike</initializer>
        <briefdescription>
<para>Get a list of all the PID pairs related to active process codes. </para>
        </briefdescription>
        <detaileddescription>
<para>Collider sim event capability.</para>
<para>Collider sim capability.</para>
<para>Output some info about the event loop.</para>
<para>Calculate the total LHC log likelihood.</para>
<para>Extract the indices for the SRs used in the analysis loglikes (alphabetical SR ordering)</para>
<para>Extract the labels for the SRs used in the analysis loglikes.</para>
<para>Extract the combined log likelihood for each analysis to a simple map_str_dbl.</para>
<para>Extract the log likelihood for each SR to a simple map_str_dbl.</para>
<para>Calculate the log likelihood for each SR in each analysis using the analysis numbers.</para>
<para>Extract the signal predictions and uncertainties for all analyses.</para>
<para>Collect all the analysis numbers in one place.</para>
<para>A map between PID pairs and cross-sections.</para>
<para>Execute the main Monte Carlo event loop. Note: &quot;Non-loop&quot; capabilities that some in-loop capabilities depend on can be added as dependencies here to ensure that they are calculated before the loop starts.</para>
<para>Total cross-section</para>
<para>Output info on TotalCrossSection as a str-double map, for easy printing</para>
<para>Process codes and PID pairs</para>
<para>Get list of Pythia process codes for all active processes</para>
<para>Translate a list of Pythia process codes to list of (PID,PID) pairs for the two final state particles of the hard process.</para>
<para>Process-level cross-sections</para>
<para>A map between Pythia process codes and cross-sections</para>
<para>Output PID pair cross-sections as a str-dbl map, for easy printing</para>
<para>A consistency check that ensures that if each event is weighted by a process-level cross-section from an external calculator, then the total cross-section is taken from the event generator</para>
<para>Lists of analyses to run</para>
<para>Run all analyses and fill vector of analysis results.</para>
<para>Dummy observable that creates a dependency on TestModel1D, which is used to satisfy the normal GAMBIT model requrements in a minimal way. This is useful in the case where we just want to test ColliderBit on a single point with Pythia&apos;s SLHA interface, but not use the ColliderBit standalone interface.</para>
<para>Detector sim capabilities.</para>
<para>Run detector simulators and produce the standard event format.</para>
<para>Provide functions that can be used for event weighting, e.g. for process-level cross-section scaling. {@</para>
<para>Event weight functions that depend on model-specific Py8Collider versions should be declared in the corresponding model header in ColliderBit/models. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="381" column="11" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="521" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>calc_combined_LHC_LogLike</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>A nested function that reads in HepMC event files and converts them to HEPUtils::Event format.</para>
<para>Only activate these functions if HepMC is activated.</para>
<para>Weight events according to process cross-section.</para>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model</para>
<para>This function is intended as a fallback option that simply assigns a unit weight to all events</para>
<para>A nested function that reads in Les Houches Event files and converts them to HEPUtils::Event format </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="383" column="13" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="534" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>LHC_LogLike_scan_guide</initializer>
        <briefdescription>
<para>Get a list of all the PID pairs related to active process codes. </para>
        </briefdescription>
        <detaileddescription>
<para>Collider sim event capability.</para>
<para>Collider sim capability.</para>
<para>Output some info about the event loop.</para>
<para>Calculate the total LHC log likelihood.</para>
<para>Extract the indices for the SRs used in the analysis loglikes (alphabetical SR ordering)</para>
<para>Extract the labels for the SRs used in the analysis loglikes.</para>
<para>Extract the combined log likelihood for each analysis to a simple map_str_dbl.</para>
<para>Extract the log likelihood for each SR to a simple map_str_dbl.</para>
<para>Calculate the log likelihood for each SR in each analysis using the analysis numbers.</para>
<para>Extract the signal predictions and uncertainties for all analyses.</para>
<para>Collect all the analysis numbers in one place.</para>
<para>A map between PID pairs and cross-sections.</para>
<para>Execute the main Monte Carlo event loop. Note: &quot;Non-loop&quot; capabilities that some in-loop capabilities depend on can be added as dependencies here to ensure that they are calculated before the loop starts.</para>
<para>Total cross-section</para>
<para>Output info on TotalCrossSection as a str-double map, for easy printing</para>
<para>Process codes and PID pairs</para>
<para>Get list of Pythia process codes for all active processes</para>
<para>Translate a list of Pythia process codes to list of (PID,PID) pairs for the two final state particles of the hard process.</para>
<para>Process-level cross-sections</para>
<para>A map between Pythia process codes and cross-sections</para>
<para>Output PID pair cross-sections as a str-dbl map, for easy printing</para>
<para>A consistency check that ensures that if each event is weighted by a process-level cross-section from an external calculator, then the total cross-section is taken from the event generator</para>
<para>Lists of analyses to run</para>
<para>Run all analyses and fill vector of analysis results.</para>
<para>Dummy observable that creates a dependency on TestModel1D, which is used to satisfy the normal GAMBIT model requrements in a minimal way. This is useful in the case where we just want to test ColliderBit on a single point with Pythia&apos;s SLHA interface, but not use the ColliderBit standalone interface.</para>
<para>Detector sim capabilities.</para>
<para>Run detector simulators and produce the standard event format.</para>
<para>Provide functions that can be used for event weighting, e.g. for process-level cross-section scaling. {@</para>
<para>Event weight functions that depend on model-specific Py8Collider versions should be declared in the corresponding model header in ColliderBit/models. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="391" column="11" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="521" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>calc_LHC_LogLike_scan_guide</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>A nested function that reads in HepMC event files and converts them to HEPUtils::Event format.</para>
<para>Only activate these functions if HepMC is activated.</para>
<para>Weight events according to process cross-section.</para>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model</para>
<para>This function is intended as a fallback option that simply assigns a unit weight to all events</para>
<para>A nested function that reads in Les Houches Event files and converts them to HEPUtils::Event format </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="393" column="13" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="534" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>LHCEventLoopInfo</initializer>
        <briefdescription>
<para>Get a list of all the PID pairs related to active process codes. </para>
        </briefdescription>
        <detaileddescription>
<para>Collider sim event capability.</para>
<para>Collider sim capability.</para>
<para>Output some info about the event loop.</para>
<para>Calculate the total LHC log likelihood.</para>
<para>Extract the indices for the SRs used in the analysis loglikes (alphabetical SR ordering)</para>
<para>Extract the labels for the SRs used in the analysis loglikes.</para>
<para>Extract the combined log likelihood for each analysis to a simple map_str_dbl.</para>
<para>Extract the log likelihood for each SR to a simple map_str_dbl.</para>
<para>Calculate the log likelihood for each SR in each analysis using the analysis numbers.</para>
<para>Extract the signal predictions and uncertainties for all analyses.</para>
<para>Collect all the analysis numbers in one place.</para>
<para>A map between PID pairs and cross-sections.</para>
<para>Execute the main Monte Carlo event loop. Note: &quot;Non-loop&quot; capabilities that some in-loop capabilities depend on can be added as dependencies here to ensure that they are calculated before the loop starts.</para>
<para>Total cross-section</para>
<para>Output info on TotalCrossSection as a str-double map, for easy printing</para>
<para>Process codes and PID pairs</para>
<para>Get list of Pythia process codes for all active processes</para>
<para>Translate a list of Pythia process codes to list of (PID,PID) pairs for the two final state particles of the hard process.</para>
<para>Process-level cross-sections</para>
<para>A map between Pythia process codes and cross-sections</para>
<para>Output PID pair cross-sections as a str-dbl map, for easy printing</para>
<para>A consistency check that ensures that if each event is weighted by a process-level cross-section from an external calculator, then the total cross-section is taken from the event generator</para>
<para>Lists of analyses to run</para>
<para>Run all analyses and fill vector of analysis results.</para>
<para>Dummy observable that creates a dependency on TestModel1D, which is used to satisfy the normal GAMBIT model requrements in a minimal way. This is useful in the case where we just want to test ColliderBit on a single point with Pythia&apos;s SLHA interface, but not use the ColliderBit standalone interface.</para>
<para>Detector sim capabilities.</para>
<para>Run detector simulators and produce the standard event format.</para>
<para>Provide functions that can be used for event weighting, e.g. for process-level cross-section scaling. {@</para>
<para>Event weight functions that depend on model-specific Py8Collider versions should be declared in the corresponding model header in ColliderBit/models. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="401" column="11" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="521" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>getLHCEventLoopInfo</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>A nested function that reads in HepMC event files and converts them to HEPUtils::Event format.</para>
<para>Only activate these functions if HepMC is activated.</para>
<para>Weight events according to process cross-section.</para>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model</para>
<para>This function is intended as a fallback option that simply assigns a unit weight to all events</para>
<para>A nested function that reads in Les Houches Event files and converts them to HEPUtils::Event format </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="403" column="13" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="534" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>DummyColliderObservable</initializer>
        <briefdescription>
<para>Get a list of all the PID pairs related to active process codes. </para>
        </briefdescription>
        <detaileddescription>
<para>Collider sim event capability.</para>
<para>Collider sim capability.</para>
<para>Output some info about the event loop.</para>
<para>Calculate the total LHC log likelihood.</para>
<para>Extract the indices for the SRs used in the analysis loglikes (alphabetical SR ordering)</para>
<para>Extract the labels for the SRs used in the analysis loglikes.</para>
<para>Extract the combined log likelihood for each analysis to a simple map_str_dbl.</para>
<para>Extract the log likelihood for each SR to a simple map_str_dbl.</para>
<para>Calculate the log likelihood for each SR in each analysis using the analysis numbers.</para>
<para>Extract the signal predictions and uncertainties for all analyses.</para>
<para>Collect all the analysis numbers in one place.</para>
<para>A map between PID pairs and cross-sections.</para>
<para>Execute the main Monte Carlo event loop. Note: &quot;Non-loop&quot; capabilities that some in-loop capabilities depend on can be added as dependencies here to ensure that they are calculated before the loop starts.</para>
<para>Total cross-section</para>
<para>Output info on TotalCrossSection as a str-double map, for easy printing</para>
<para>Process codes and PID pairs</para>
<para>Get list of Pythia process codes for all active processes</para>
<para>Translate a list of Pythia process codes to list of (PID,PID) pairs for the two final state particles of the hard process.</para>
<para>Process-level cross-sections</para>
<para>A map between Pythia process codes and cross-sections</para>
<para>Output PID pair cross-sections as a str-dbl map, for easy printing</para>
<para>A consistency check that ensures that if each event is weighted by a process-level cross-section from an external calculator, then the total cross-section is taken from the event generator</para>
<para>Lists of analyses to run</para>
<para>Run all analyses and fill vector of analysis results.</para>
<para>Dummy observable that creates a dependency on TestModel1D, which is used to satisfy the normal GAMBIT model requrements in a minimal way. This is useful in the case where we just want to test ColliderBit on a single point with Pythia&apos;s SLHA interface, but not use the ColliderBit standalone interface.</para>
<para>Detector sim capabilities.</para>
<para>Run detector simulators and produce the standard event format.</para>
<para>Provide functions that can be used for event weighting, e.g. for process-level cross-section scaling. {@</para>
<para>Event weight functions that depend on model-specific Py8Collider versions should be declared in the corresponding model header in ColliderBit/models. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="413" column="11" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="521" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>getDummyColliderObservable</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>A nested function that reads in HepMC event files and converts them to HEPUtils::Event format.</para>
<para>Only activate these functions if HepMC is activated.</para>
<para>Weight events according to process cross-section.</para>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model</para>
<para>This function is intended as a fallback option that simply assigns a unit weight to all events</para>
<para>A nested function that reads in Les Houches Event files and converts them to HEPUtils::Event format </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="415" column="13" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="534" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>ATLASDetectorSim</initializer>
        <briefdescription>
<para>Get a list of all the PID pairs related to active process codes. </para>
        </briefdescription>
        <detaileddescription>
<para>Collider sim event capability.</para>
<para>Collider sim capability.</para>
<para>Output some info about the event loop.</para>
<para>Calculate the total LHC log likelihood.</para>
<para>Extract the indices for the SRs used in the analysis loglikes (alphabetical SR ordering)</para>
<para>Extract the labels for the SRs used in the analysis loglikes.</para>
<para>Extract the combined log likelihood for each analysis to a simple map_str_dbl.</para>
<para>Extract the log likelihood for each SR to a simple map_str_dbl.</para>
<para>Calculate the log likelihood for each SR in each analysis using the analysis numbers.</para>
<para>Extract the signal predictions and uncertainties for all analyses.</para>
<para>Collect all the analysis numbers in one place.</para>
<para>A map between PID pairs and cross-sections.</para>
<para>Execute the main Monte Carlo event loop. Note: &quot;Non-loop&quot; capabilities that some in-loop capabilities depend on can be added as dependencies here to ensure that they are calculated before the loop starts.</para>
<para>Total cross-section</para>
<para>Output info on TotalCrossSection as a str-double map, for easy printing</para>
<para>Process codes and PID pairs</para>
<para>Get list of Pythia process codes for all active processes</para>
<para>Translate a list of Pythia process codes to list of (PID,PID) pairs for the two final state particles of the hard process.</para>
<para>Process-level cross-sections</para>
<para>A map between Pythia process codes and cross-sections</para>
<para>Output PID pair cross-sections as a str-dbl map, for easy printing</para>
<para>A consistency check that ensures that if each event is weighted by a process-level cross-section from an external calculator, then the total cross-section is taken from the event generator</para>
<para>Lists of analyses to run</para>
<para>Run all analyses and fill vector of analysis results.</para>
<para>Dummy observable that creates a dependency on TestModel1D, which is used to satisfy the normal GAMBIT model requrements in a minimal way. This is useful in the case where we just want to test ColliderBit on a single point with Pythia&apos;s SLHA interface, but not use the ColliderBit standalone interface.</para>
<para>Detector sim capabilities.</para>
<para>Run detector simulators and produce the standard event format.</para>
<para>Provide functions that can be used for event weighting, e.g. for process-level cross-section scaling. {@</para>
<para>Event weight functions that depend on model-specific Py8Collider versions should be declared in the corresponding model header in ColliderBit/models. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="423" column="11" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="521" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>getBuckFastATLAS</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>A nested function that reads in HepMC event files and converts them to HEPUtils::Event format.</para>
<para>Only activate these functions if HepMC is activated.</para>
<para>Weight events according to process cross-section.</para>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model</para>
<para>This function is intended as a fallback option that simply assigns a unit weight to all events</para>
<para>A nested function that reads in Les Houches Event files and converts them to HEPUtils::Event format </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="425" column="13" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="534" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>CMSDetectorSim</initializer>
        <briefdescription>
<para>Get a list of all the PID pairs related to active process codes. </para>
        </briefdescription>
        <detaileddescription>
<para>Collider sim event capability.</para>
<para>Collider sim capability.</para>
<para>Output some info about the event loop.</para>
<para>Calculate the total LHC log likelihood.</para>
<para>Extract the indices for the SRs used in the analysis loglikes (alphabetical SR ordering)</para>
<para>Extract the labels for the SRs used in the analysis loglikes.</para>
<para>Extract the combined log likelihood for each analysis to a simple map_str_dbl.</para>
<para>Extract the log likelihood for each SR to a simple map_str_dbl.</para>
<para>Calculate the log likelihood for each SR in each analysis using the analysis numbers.</para>
<para>Extract the signal predictions and uncertainties for all analyses.</para>
<para>Collect all the analysis numbers in one place.</para>
<para>A map between PID pairs and cross-sections.</para>
<para>Execute the main Monte Carlo event loop. Note: &quot;Non-loop&quot; capabilities that some in-loop capabilities depend on can be added as dependencies here to ensure that they are calculated before the loop starts.</para>
<para>Total cross-section</para>
<para>Output info on TotalCrossSection as a str-double map, for easy printing</para>
<para>Process codes and PID pairs</para>
<para>Get list of Pythia process codes for all active processes</para>
<para>Translate a list of Pythia process codes to list of (PID,PID) pairs for the two final state particles of the hard process.</para>
<para>Process-level cross-sections</para>
<para>A map between Pythia process codes and cross-sections</para>
<para>Output PID pair cross-sections as a str-dbl map, for easy printing</para>
<para>A consistency check that ensures that if each event is weighted by a process-level cross-section from an external calculator, then the total cross-section is taken from the event generator</para>
<para>Lists of analyses to run</para>
<para>Run all analyses and fill vector of analysis results.</para>
<para>Dummy observable that creates a dependency on TestModel1D, which is used to satisfy the normal GAMBIT model requrements in a minimal way. This is useful in the case where we just want to test ColliderBit on a single point with Pythia&apos;s SLHA interface, but not use the ColliderBit standalone interface.</para>
<para>Detector sim capabilities.</para>
<para>Run detector simulators and produce the standard event format.</para>
<para>Provide functions that can be used for event weighting, e.g. for process-level cross-section scaling. {@</para>
<para>Event weight functions that depend on model-specific Py8Collider versions should be declared in the corresponding model header in ColliderBit/models. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="431" column="11" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="521" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>getBuckFastCMS</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>A nested function that reads in HepMC event files and converts them to HEPUtils::Event format.</para>
<para>Only activate these functions if HepMC is activated.</para>
<para>Weight events according to process cross-section.</para>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model</para>
<para>This function is intended as a fallback option that simply assigns a unit weight to all events</para>
<para>A nested function that reads in Les Houches Event files and converts them to HEPUtils::Event format </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="433" column="13" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="534" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>IdentityDetectorSim</initializer>
        <briefdescription>
<para>Get a list of all the PID pairs related to active process codes. </para>
        </briefdescription>
        <detaileddescription>
<para>Collider sim event capability.</para>
<para>Collider sim capability.</para>
<para>Output some info about the event loop.</para>
<para>Calculate the total LHC log likelihood.</para>
<para>Extract the indices for the SRs used in the analysis loglikes (alphabetical SR ordering)</para>
<para>Extract the labels for the SRs used in the analysis loglikes.</para>
<para>Extract the combined log likelihood for each analysis to a simple map_str_dbl.</para>
<para>Extract the log likelihood for each SR to a simple map_str_dbl.</para>
<para>Calculate the log likelihood for each SR in each analysis using the analysis numbers.</para>
<para>Extract the signal predictions and uncertainties for all analyses.</para>
<para>Collect all the analysis numbers in one place.</para>
<para>A map between PID pairs and cross-sections.</para>
<para>Execute the main Monte Carlo event loop. Note: &quot;Non-loop&quot; capabilities that some in-loop capabilities depend on can be added as dependencies here to ensure that they are calculated before the loop starts.</para>
<para>Total cross-section</para>
<para>Output info on TotalCrossSection as a str-double map, for easy printing</para>
<para>Process codes and PID pairs</para>
<para>Get list of Pythia process codes for all active processes</para>
<para>Translate a list of Pythia process codes to list of (PID,PID) pairs for the two final state particles of the hard process.</para>
<para>Process-level cross-sections</para>
<para>A map between Pythia process codes and cross-sections</para>
<para>Output PID pair cross-sections as a str-dbl map, for easy printing</para>
<para>A consistency check that ensures that if each event is weighted by a process-level cross-section from an external calculator, then the total cross-section is taken from the event generator</para>
<para>Lists of analyses to run</para>
<para>Run all analyses and fill vector of analysis results.</para>
<para>Dummy observable that creates a dependency on TestModel1D, which is used to satisfy the normal GAMBIT model requrements in a minimal way. This is useful in the case where we just want to test ColliderBit on a single point with Pythia&apos;s SLHA interface, but not use the ColliderBit standalone interface.</para>
<para>Detector sim capabilities.</para>
<para>Run detector simulators and produce the standard event format.</para>
<para>Provide functions that can be used for event weighting, e.g. for process-level cross-section scaling. {@</para>
<para>Event weight functions that depend on model-specific Py8Collider versions should be declared in the corresponding model header in ColliderBit/models. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="439" column="11" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="521" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>getBuckFastIdentity</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>A nested function that reads in HepMC event files and converts them to HEPUtils::Event format.</para>
<para>Only activate these functions if HepMC is activated.</para>
<para>Weight events according to process cross-section.</para>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model</para>
<para>This function is intended as a fallback option that simply assigns a unit weight to all events</para>
<para>A nested function that reads in Les Houches Event files and converts them to HEPUtils::Event format </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="441" column="13" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="534" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>ATLASSmearedEvent</initializer>
        <briefdescription>
<para>Get a list of all the PID pairs related to active process codes. </para>
        </briefdescription>
        <detaileddescription>
<para>Collider sim event capability.</para>
<para>Collider sim capability.</para>
<para>Output some info about the event loop.</para>
<para>Calculate the total LHC log likelihood.</para>
<para>Extract the indices for the SRs used in the analysis loglikes (alphabetical SR ordering)</para>
<para>Extract the labels for the SRs used in the analysis loglikes.</para>
<para>Extract the combined log likelihood for each analysis to a simple map_str_dbl.</para>
<para>Extract the log likelihood for each SR to a simple map_str_dbl.</para>
<para>Calculate the log likelihood for each SR in each analysis using the analysis numbers.</para>
<para>Extract the signal predictions and uncertainties for all analyses.</para>
<para>Collect all the analysis numbers in one place.</para>
<para>A map between PID pairs and cross-sections.</para>
<para>Execute the main Monte Carlo event loop. Note: &quot;Non-loop&quot; capabilities that some in-loop capabilities depend on can be added as dependencies here to ensure that they are calculated before the loop starts.</para>
<para>Total cross-section</para>
<para>Output info on TotalCrossSection as a str-double map, for easy printing</para>
<para>Process codes and PID pairs</para>
<para>Get list of Pythia process codes for all active processes</para>
<para>Translate a list of Pythia process codes to list of (PID,PID) pairs for the two final state particles of the hard process.</para>
<para>Process-level cross-sections</para>
<para>A map between Pythia process codes and cross-sections</para>
<para>Output PID pair cross-sections as a str-dbl map, for easy printing</para>
<para>A consistency check that ensures that if each event is weighted by a process-level cross-section from an external calculator, then the total cross-section is taken from the event generator</para>
<para>Lists of analyses to run</para>
<para>Run all analyses and fill vector of analysis results.</para>
<para>Dummy observable that creates a dependency on TestModel1D, which is used to satisfy the normal GAMBIT model requrements in a minimal way. This is useful in the case where we just want to test ColliderBit on a single point with Pythia&apos;s SLHA interface, but not use the ColliderBit standalone interface.</para>
<para>Detector sim capabilities.</para>
<para>Run detector simulators and produce the standard event format.</para>
<para>Provide functions that can be used for event weighting, e.g. for process-level cross-section scaling. {@</para>
<para>Event weight functions that depend on model-specific Py8Collider versions should be declared in the corresponding model header in ColliderBit/models. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="450" column="11" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="521" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>smearEventATLAS</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>A nested function that reads in HepMC event files and converts them to HEPUtils::Event format.</para>
<para>Only activate these functions if HepMC is activated.</para>
<para>Weight events according to process cross-section.</para>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model</para>
<para>This function is intended as a fallback option that simply assigns a unit weight to all events</para>
<para>A nested function that reads in Les Houches Event files and converts them to HEPUtils::Event format </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="452" column="13" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="534" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>CMSSmearedEvent</initializer>
        <briefdescription>
<para>Get a list of all the PID pairs related to active process codes. </para>
        </briefdescription>
        <detaileddescription>
<para>Collider sim event capability.</para>
<para>Collider sim capability.</para>
<para>Output some info about the event loop.</para>
<para>Calculate the total LHC log likelihood.</para>
<para>Extract the indices for the SRs used in the analysis loglikes (alphabetical SR ordering)</para>
<para>Extract the labels for the SRs used in the analysis loglikes.</para>
<para>Extract the combined log likelihood for each analysis to a simple map_str_dbl.</para>
<para>Extract the log likelihood for each SR to a simple map_str_dbl.</para>
<para>Calculate the log likelihood for each SR in each analysis using the analysis numbers.</para>
<para>Extract the signal predictions and uncertainties for all analyses.</para>
<para>Collect all the analysis numbers in one place.</para>
<para>A map between PID pairs and cross-sections.</para>
<para>Execute the main Monte Carlo event loop. Note: &quot;Non-loop&quot; capabilities that some in-loop capabilities depend on can be added as dependencies here to ensure that they are calculated before the loop starts.</para>
<para>Total cross-section</para>
<para>Output info on TotalCrossSection as a str-double map, for easy printing</para>
<para>Process codes and PID pairs</para>
<para>Get list of Pythia process codes for all active processes</para>
<para>Translate a list of Pythia process codes to list of (PID,PID) pairs for the two final state particles of the hard process.</para>
<para>Process-level cross-sections</para>
<para>A map between Pythia process codes and cross-sections</para>
<para>Output PID pair cross-sections as a str-dbl map, for easy printing</para>
<para>A consistency check that ensures that if each event is weighted by a process-level cross-section from an external calculator, then the total cross-section is taken from the event generator</para>
<para>Lists of analyses to run</para>
<para>Run all analyses and fill vector of analysis results.</para>
<para>Dummy observable that creates a dependency on TestModel1D, which is used to satisfy the normal GAMBIT model requrements in a minimal way. This is useful in the case where we just want to test ColliderBit on a single point with Pythia&apos;s SLHA interface, but not use the ColliderBit standalone interface.</para>
<para>Detector sim capabilities.</para>
<para>Run detector simulators and produce the standard event format.</para>
<para>Provide functions that can be used for event weighting, e.g. for process-level cross-section scaling. {@</para>
<para>Event weight functions that depend on model-specific Py8Collider versions should be declared in the corresponding model header in ColliderBit/models. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="460" column="11" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="521" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>smearEventCMS</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>A nested function that reads in HepMC event files and converts them to HEPUtils::Event format.</para>
<para>Only activate these functions if HepMC is activated.</para>
<para>Weight events according to process cross-section.</para>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model</para>
<para>This function is intended as a fallback option that simply assigns a unit weight to all events</para>
<para>A nested function that reads in Les Houches Event files and converts them to HEPUtils::Event format </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="462" column="13" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="534" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>CopiedEvent</initializer>
        <briefdescription>
<para>Get a list of all the PID pairs related to active process codes. </para>
        </briefdescription>
        <detaileddescription>
<para>Collider sim event capability.</para>
<para>Collider sim capability.</para>
<para>Output some info about the event loop.</para>
<para>Calculate the total LHC log likelihood.</para>
<para>Extract the indices for the SRs used in the analysis loglikes (alphabetical SR ordering)</para>
<para>Extract the labels for the SRs used in the analysis loglikes.</para>
<para>Extract the combined log likelihood for each analysis to a simple map_str_dbl.</para>
<para>Extract the log likelihood for each SR to a simple map_str_dbl.</para>
<para>Calculate the log likelihood for each SR in each analysis using the analysis numbers.</para>
<para>Extract the signal predictions and uncertainties for all analyses.</para>
<para>Collect all the analysis numbers in one place.</para>
<para>A map between PID pairs and cross-sections.</para>
<para>Execute the main Monte Carlo event loop. Note: &quot;Non-loop&quot; capabilities that some in-loop capabilities depend on can be added as dependencies here to ensure that they are calculated before the loop starts.</para>
<para>Total cross-section</para>
<para>Output info on TotalCrossSection as a str-double map, for easy printing</para>
<para>Process codes and PID pairs</para>
<para>Get list of Pythia process codes for all active processes</para>
<para>Translate a list of Pythia process codes to list of (PID,PID) pairs for the two final state particles of the hard process.</para>
<para>Process-level cross-sections</para>
<para>A map between Pythia process codes and cross-sections</para>
<para>Output PID pair cross-sections as a str-dbl map, for easy printing</para>
<para>A consistency check that ensures that if each event is weighted by a process-level cross-section from an external calculator, then the total cross-section is taken from the event generator</para>
<para>Lists of analyses to run</para>
<para>Run all analyses and fill vector of analysis results.</para>
<para>Dummy observable that creates a dependency on TestModel1D, which is used to satisfy the normal GAMBIT model requrements in a minimal way. This is useful in the case where we just want to test ColliderBit on a single point with Pythia&apos;s SLHA interface, but not use the ColliderBit standalone interface.</para>
<para>Detector sim capabilities.</para>
<para>Run detector simulators and produce the standard event format.</para>
<para>Provide functions that can be used for event weighting, e.g. for process-level cross-section scaling. {@</para>
<para>Event weight functions that depend on model-specific Py8Collider versions should be declared in the corresponding model header in ColliderBit/models. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="470" column="11" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="521" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>copyEvent</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>A nested function that reads in HepMC event files and converts them to HEPUtils::Event format.</para>
<para>Only activate these functions if HepMC is activated.</para>
<para>Weight events according to process cross-section.</para>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model</para>
<para>This function is intended as a fallback option that simply assigns a unit weight to all events</para>
<para>A nested function that reads in Les Houches Event files and converts them to HEPUtils::Event format </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="472" column="13" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="534" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>EventWeighterFunction</initializer>
        <briefdescription>
<para>Get a list of all the PID pairs related to active process codes. </para>
        </briefdescription>
        <detaileddescription>
<para>Collider sim event capability.</para>
<para>Collider sim capability.</para>
<para>Output some info about the event loop.</para>
<para>Calculate the total LHC log likelihood.</para>
<para>Extract the indices for the SRs used in the analysis loglikes (alphabetical SR ordering)</para>
<para>Extract the labels for the SRs used in the analysis loglikes.</para>
<para>Extract the combined log likelihood for each analysis to a simple map_str_dbl.</para>
<para>Extract the log likelihood for each SR to a simple map_str_dbl.</para>
<para>Calculate the log likelihood for each SR in each analysis using the analysis numbers.</para>
<para>Extract the signal predictions and uncertainties for all analyses.</para>
<para>Collect all the analysis numbers in one place.</para>
<para>A map between PID pairs and cross-sections.</para>
<para>Execute the main Monte Carlo event loop. Note: &quot;Non-loop&quot; capabilities that some in-loop capabilities depend on can be added as dependencies here to ensure that they are calculated before the loop starts.</para>
<para>Total cross-section</para>
<para>Output info on TotalCrossSection as a str-double map, for easy printing</para>
<para>Process codes and PID pairs</para>
<para>Get list of Pythia process codes for all active processes</para>
<para>Translate a list of Pythia process codes to list of (PID,PID) pairs for the two final state particles of the hard process.</para>
<para>Process-level cross-sections</para>
<para>A map between Pythia process codes and cross-sections</para>
<para>Output PID pair cross-sections as a str-dbl map, for easy printing</para>
<para>A consistency check that ensures that if each event is weighted by a process-level cross-section from an external calculator, then the total cross-section is taken from the event generator</para>
<para>Lists of analyses to run</para>
<para>Run all analyses and fill vector of analysis results.</para>
<para>Dummy observable that creates a dependency on TestModel1D, which is used to satisfy the normal GAMBIT model requrements in a minimal way. This is useful in the case where we just want to test ColliderBit on a single point with Pythia&apos;s SLHA interface, but not use the ColliderBit standalone interface.</para>
<para>Detector sim capabilities.</para>
<para>Run detector simulators and produce the standard event format.</para>
<para>Provide functions that can be used for event weighting, e.g. for process-level cross-section scaling. {@</para>
<para>Event weight functions that depend on model-specific Py8Collider versions should be declared in the corresponding model header in ColliderBit/models. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="484" column="11" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="521" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>setEventWeight_unity</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>A nested function that reads in HepMC event files and converts them to HEPUtils::Event format.</para>
<para>Only activate these functions if HepMC is activated.</para>
<para>Weight events according to process cross-section.</para>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model</para>
<para>This function is intended as a fallback option that simply assigns a unit weight to all events</para>
<para>A nested function that reads in Les Houches Event files and converts them to HEPUtils::Event format </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="489" column="13" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="534" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>setEventWeight_fromCrossSection</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>A nested function that reads in HepMC event files and converts them to HEPUtils::Event format.</para>
<para>Only activate these functions if HepMC is activated.</para>
<para>Weight events according to process cross-section.</para>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model</para>
<para>This function is intended as a fallback option that simply assigns a unit weight to all events</para>
<para>A nested function that reads in Les Houches Event files and converts them to HEPUtils::Event format </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="494" column="13" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="534" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>SpectrumAndDecaysForPythia</initializer>
        <briefdescription>
<para>Get a list of all the PID pairs related to active process codes. </para>
        </briefdescription>
        <detaileddescription>
<para>Collider sim event capability.</para>
<para>Collider sim capability.</para>
<para>Output some info about the event loop.</para>
<para>Calculate the total LHC log likelihood.</para>
<para>Extract the indices for the SRs used in the analysis loglikes (alphabetical SR ordering)</para>
<para>Extract the labels for the SRs used in the analysis loglikes.</para>
<para>Extract the combined log likelihood for each analysis to a simple map_str_dbl.</para>
<para>Extract the log likelihood for each SR to a simple map_str_dbl.</para>
<para>Calculate the log likelihood for each SR in each analysis using the analysis numbers.</para>
<para>Extract the signal predictions and uncertainties for all analyses.</para>
<para>Collect all the analysis numbers in one place.</para>
<para>A map between PID pairs and cross-sections.</para>
<para>Execute the main Monte Carlo event loop. Note: &quot;Non-loop&quot; capabilities that some in-loop capabilities depend on can be added as dependencies here to ensure that they are calculated before the loop starts.</para>
<para>Total cross-section</para>
<para>Output info on TotalCrossSection as a str-double map, for easy printing</para>
<para>Process codes and PID pairs</para>
<para>Get list of Pythia process codes for all active processes</para>
<para>Translate a list of Pythia process codes to list of (PID,PID) pairs for the two final state particles of the hard process.</para>
<para>Process-level cross-sections</para>
<para>A map between Pythia process codes and cross-sections</para>
<para>Output PID pair cross-sections as a str-dbl map, for easy printing</para>
<para>A consistency check that ensures that if each event is weighted by a process-level cross-section from an external calculator, then the total cross-section is taken from the event generator</para>
<para>Lists of analyses to run</para>
<para>Run all analyses and fill vector of analysis results.</para>
<para>Dummy observable that creates a dependency on TestModel1D, which is used to satisfy the normal GAMBIT model requrements in a minimal way. This is useful in the case where we just want to test ColliderBit on a single point with Pythia&apos;s SLHA interface, but not use the ColliderBit standalone interface.</para>
<para>Detector sim capabilities.</para>
<para>Run detector simulators and produce the standard event format.</para>
<para>Provide functions that can be used for event weighting, e.g. for process-level cross-section scaling. {@</para>
<para>Event weight functions that depend on model-specific Py8Collider versions should be declared in the corresponding model header in ColliderBit/models. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="511" column="11" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="521" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>HardScatteringSim</initializer>
        <briefdescription>
<para>Get a list of all the PID pairs related to active process codes. </para>
        </briefdescription>
        <detaileddescription>
<para>Collider sim event capability.</para>
<para>Collider sim capability.</para>
<para>Output some info about the event loop.</para>
<para>Calculate the total LHC log likelihood.</para>
<para>Extract the indices for the SRs used in the analysis loglikes (alphabetical SR ordering)</para>
<para>Extract the labels for the SRs used in the analysis loglikes.</para>
<para>Extract the combined log likelihood for each analysis to a simple map_str_dbl.</para>
<para>Extract the log likelihood for each SR to a simple map_str_dbl.</para>
<para>Calculate the log likelihood for each SR in each analysis using the analysis numbers.</para>
<para>Extract the signal predictions and uncertainties for all analyses.</para>
<para>Collect all the analysis numbers in one place.</para>
<para>A map between PID pairs and cross-sections.</para>
<para>Execute the main Monte Carlo event loop. Note: &quot;Non-loop&quot; capabilities that some in-loop capabilities depend on can be added as dependencies here to ensure that they are calculated before the loop starts.</para>
<para>Total cross-section</para>
<para>Output info on TotalCrossSection as a str-double map, for easy printing</para>
<para>Process codes and PID pairs</para>
<para>Get list of Pythia process codes for all active processes</para>
<para>Translate a list of Pythia process codes to list of (PID,PID) pairs for the two final state particles of the hard process.</para>
<para>Process-level cross-sections</para>
<para>A map between Pythia process codes and cross-sections</para>
<para>Output PID pair cross-sections as a str-dbl map, for easy printing</para>
<para>A consistency check that ensures that if each event is weighted by a process-level cross-section from an external calculator, then the total cross-section is taken from the event generator</para>
<para>Lists of analyses to run</para>
<para>Run all analyses and fill vector of analysis results.</para>
<para>Dummy observable that creates a dependency on TestModel1D, which is used to satisfy the normal GAMBIT model requrements in a minimal way. This is useful in the case where we just want to test ColliderBit on a single point with Pythia&apos;s SLHA interface, but not use the ColliderBit standalone interface.</para>
<para>Detector sim capabilities.</para>
<para>Run detector simulators and produce the standard event format.</para>
<para>Provide functions that can be used for event weighting, e.g. for process-level cross-section scaling. {@</para>
<para>Event weight functions that depend on model-specific Py8Collider versions should be declared in the corresponding model header in ColliderBit/models. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="516" column="11" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="521" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>HardScatteringEvent</initializer>
        <briefdescription>
<para>Get a list of all the PID pairs related to active process codes. </para>
        </briefdescription>
        <detaileddescription>
<para>Collider sim event capability.</para>
<para>Collider sim capability.</para>
<para>Output some info about the event loop.</para>
<para>Calculate the total LHC log likelihood.</para>
<para>Extract the indices for the SRs used in the analysis loglikes (alphabetical SR ordering)</para>
<para>Extract the labels for the SRs used in the analysis loglikes.</para>
<para>Extract the combined log likelihood for each analysis to a simple map_str_dbl.</para>
<para>Extract the log likelihood for each SR to a simple map_str_dbl.</para>
<para>Calculate the log likelihood for each SR in each analysis using the analysis numbers.</para>
<para>Extract the signal predictions and uncertainties for all analyses.</para>
<para>Collect all the analysis numbers in one place.</para>
<para>A map between PID pairs and cross-sections.</para>
<para>Execute the main Monte Carlo event loop. Note: &quot;Non-loop&quot; capabilities that some in-loop capabilities depend on can be added as dependencies here to ensure that they are calculated before the loop starts.</para>
<para>Total cross-section</para>
<para>Output info on TotalCrossSection as a str-double map, for easy printing</para>
<para>Process codes and PID pairs</para>
<para>Get list of Pythia process codes for all active processes</para>
<para>Translate a list of Pythia process codes to list of (PID,PID) pairs for the two final state particles of the hard process.</para>
<para>Process-level cross-sections</para>
<para>A map between Pythia process codes and cross-sections</para>
<para>Output PID pair cross-sections as a str-dbl map, for easy printing</para>
<para>A consistency check that ensures that if each event is weighted by a process-level cross-section from an external calculator, then the total cross-section is taken from the event generator</para>
<para>Lists of analyses to run</para>
<para>Run all analyses and fill vector of analysis results.</para>
<para>Dummy observable that creates a dependency on TestModel1D, which is used to satisfy the normal GAMBIT model requrements in a minimal way. This is useful in the case where we just want to test ColliderBit on a single point with Pythia&apos;s SLHA interface, but not use the ColliderBit standalone interface.</para>
<para>Detector sim capabilities.</para>
<para>Run detector simulators and produce the standard event format.</para>
<para>Provide functions that can be used for event weighting, e.g. for process-level cross-section scaling. {@</para>
<para>Event weight functions that depend on model-specific Py8Collider versions should be declared in the corresponding model header in ColliderBit/models. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="521" column="11" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="521" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>getLHEvent</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>A nested function that reads in HepMC event files and converts them to HEPUtils::Event format.</para>
<para>Only activate these functions if HepMC is activated.</para>
<para>Weight events according to process cross-section.</para>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model</para>
<para>This function is intended as a fallback option that simply assigns a unit weight to all events</para>
<para>A nested function that reads in Les Houches Event files and converts them to HEPUtils::Event format </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="528" column="15" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="534" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>getHepMCEvent</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>A nested function that reads in HepMC event files and converts them to HEPUtils::Event format.</para>
<para>Only activate these functions if HepMC is activated.</para>
<para>Weight events according to process cross-section.</para>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model</para>
<para>This function is intended as a fallback option that simply assigns a unit weight to all events</para>
<para>A nested function that reads in Les Houches Event files and converts them to HEPUtils::Event format </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="534" column="15" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="534" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1a2c63ae95fe7c6106ae1ec9c283afa486" prot="public" static="no">
        <name>MODULE</name>
        <initializer>ColliderBit</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="40" column="9" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="40" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="ColliderBit__MC__rollcall_8hpp_1a831b74f6fd9f8b6566cc5e954672c6b4" prot="public" static="no" mutable="no">
        <type></type>
        <definition>lnlike_marg_poisson_gaussian_error</definition>
        <argsstring></argsstring>
        <name>lnlike_marg_poisson_gaussian_error</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="339" column="6" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="339" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="ColliderBit__MC__rollcall_8hpp_1a45c855d65dd0e2b57b08024500ff9159" prot="public" static="no" mutable="no">
        <type></type>
        <definition>double</definition>
        <argsstring></argsstring>
        <name>double</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="339" column="42" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="339" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="ColliderBit__MC__rollcall_8hpp_1af949739165c340ceffda04cdda8e8c04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BACKEND_REQ_FROM_GROUP</definition>
        <argsstring>(lnlike_marg_poisson, lnlike_marg_poisson_lognormal_error,(), double,(const int &amp;, const double &amp;, const double &amp;, const double &amp;)) BACKEND_REQ_FROM_GROUP(lnlike_marg_poisson</argsstring>
        <name>BACKEND_REQ_FROM_GROUP</name>
        <param>
          <type>lnlike_marg_poisson</type>
        </param>
        <param>
          <type>lnlike_marg_poisson_lognormal_error</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>(const int &amp;, const double &amp;, const double &amp;, const double &amp;)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="338" column="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Rollcall header for ColliderBit module.</para>
<para><hruler/>
</para>
<para>Authors (add name and date if you modify):</para>
<para><simplesect kind="author"><para>Abram Krislock (<ulink url="mailto:a.m.b.krislock@fys.uio.no">a.m.b.krislock@fys.uio.no</ulink>)</para>
</simplesect>
<simplesect kind="author"><para>Aldo Saavedra</para>
</simplesect>
<simplesect kind="author"><para>Christopher Rogan (<ulink url="mailto:christophersrogan@gmail.com">christophersrogan@gmail.com</ulink>) </para>
</simplesect>
<simplesect kind="date"><para>2015 Apr</para>
</simplesect>
<simplesect kind="author"><para>Pat Scott (<ulink url="mailto:p.scott@imperial.ac.uk">p.scott@imperial.ac.uk</ulink>) </para>
</simplesect>
<simplesect kind="date"><para>2015 Jul </para>
</simplesect>
<simplesect kind="date"><para>2018 Jan </para>
</simplesect>
<simplesect kind="date"><para>2019 Jan, Feb</para>
</simplesect>
<simplesect kind="author"><para>Andy Buckley (<ulink url="mailto:andy.buckley@cern.ch">andy.buckley@cern.ch</ulink>) </para>
</simplesect>
<simplesect kind="date"><para>2017 Jun</para>
</simplesect>
<simplesect kind="author"><para>Anders Kvellestad (<ulink url="mailto:a.kvellestad@imperial.ac.uk">a.kvellestad@imperial.ac.uk</ulink>) </para>
</simplesect>
<simplesect kind="date"><para>2019 Sep</para>
</simplesect>
<hruler/>
 </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/><sp/><sp/>GAMBIT:<sp/>Global<sp/>and<sp/>Modular<sp/>BSM<sp/>Inference<sp/>Tool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>*********************************************</highlight></codeline>
<codeline lineno="35"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gambit/Utils/util_types.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MODULE<sp/>ColliderBit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>RunMC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>START_CAPABILITY</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>operateLHCLoop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(MCLoopInfo,<sp/>CAN_MANAGE_LOOPS)</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>MODEL_CONDITIONAL_DEPENDENCY(SLHAFileNameAndContent,<sp/>pair_str_SLHAstruct,<sp/>ColliderBit_SLHA_file_model,<sp/>ColliderBit_SLHA_scan_model)</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>a<sp/>dummy<sp/>MCLoopInfo<sp/>object<sp/>for<sp/>interpolated<sp/>yield<sp/>&quot;colliders&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>InterpolatedMCInfo</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(MCLoopInfo)</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>total<sp/>cross-section<sp/>as<sp/>calculated<sp/>by<sp/>the<sp/>event<sp/>generator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>TotalEvGenCrossSection</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>START_CAPABILITY</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>getEvGenCrossSection</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(MC_xsec_container)</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>NEEDS_MANAGER(RunMC,<sp/>MCLoopInfo)</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>DEPENDENCY(HardScatteringSim,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BaseCollider*)</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>TotalCrossSection</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>START_CAPABILITY</highlight></codeline>
<codeline lineno="78"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>getEvGenCrossSection_as_base</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(xsec_container)</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>NEEDS_MANAGER(RunMC,<sp/>MCLoopInfo)</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>DEPENDENCY(TotalEvGenCrossSection,<sp/>MC_xsec_container)</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>getNLLFastCrossSection</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(xsec_container)</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>NEEDS_MANAGER(RunMC,<sp/>MCLoopInfo)</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>getYAMLCrossSection</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(xsec_container)</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>NEEDS_MANAGER(RunMC,<sp/>MCLoopInfo)</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>getYAMLCrossSection_SLHA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(xsec_container)</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>NEEDS_MANAGER(RunMC,<sp/>MCLoopInfo)</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>ALLOW_MODELS(ColliderBit_SLHA_file_model)</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>DEPENDENCY(SLHAFileNameAndContent,<sp/>pair_str_SLHAstruct)</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>getYAMLCrossSection_param</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(xsec_container)</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>NEEDS_MANAGER(RunMC,<sp/>MCLoopInfo)</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>ALLOW_MODELS(ColliderBit_SLHA_scan_model)</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>TotalCrossSectionAsMap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>START_CAPABILITY</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>getTotalCrossSectionAsMap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(map_str_dbl)</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>NEEDS_MANAGER(RunMC,<sp/>MCLoopInfo)</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>DEPENDENCY(TotalCrossSection,<sp/>xsec_container)</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>ActiveProcessCodes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>START_CAPABILITY</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>getActiveProcessCodes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(std::vector&lt;int&gt;)</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>NEEDS_MANAGER(RunMC,<sp/>MCLoopInfo)</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>DEPENDENCY(HardScatteringSim,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BaseCollider*)</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>ActivePIDPairs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>START_CAPABILITY</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>getActivePIDPairs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(vec_PID_pair)</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>NEEDS_MANAGER(RunMC,<sp/>MCLoopInfo)</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>DEPENDENCY(ActiveProcessCodeToPIDPairsMap,<sp/>multimap_int_PID_pair)</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>ActiveProcessCodeToPIDPairsMap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>START_CAPABILITY</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>getActiveProcessCodeToPIDPairsMap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(multimap_int_PID_pair)</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>NEEDS_MANAGER(RunMC,<sp/>MCLoopInfo)</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>DEPENDENCY(ActiveProcessCodes,<sp/>std::vector&lt;int&gt;)</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY<sp/></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>ProcessCrossSectionsMap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>START_CAPABILITY</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>getProcessCrossSectionsMap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(map_int_process_xsec)</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>NEEDS_MANAGER(RunMC,<sp/>MCLoopInfo)</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>DEPENDENCY(ActiveProcessCodes,<sp/>std::vector&lt;int&gt;)</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>DEPENDENCY(ActiveProcessCodeToPIDPairsMap,<sp/>multimap_int_PID_pair)</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>DEPENDENCY(PIDPairCrossSectionsMap,<sp/>map_PID_pair_PID_pair_xsec)<sp/></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>PIDPairCrossSectionsMap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/>START_CAPABILITY</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>getPIDPairCrossSectionsMap_testing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(map_PID_pair_PID_pair_xsec)</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>NEEDS_MANAGER(RunMC,<sp/>MCLoopInfo)</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>DEPENDENCY(ActivePIDPairs,<sp/>vec_PID_pair)</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>PIDPairCrossSectionsInfo</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/>START_CAPABILITY</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>getPIDPairCrossSectionsInfo</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(map_str_dbl)</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>NEEDS_MANAGER(RunMC,<sp/>MCLoopInfo)</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>DEPENDENCY(PIDPairCrossSectionsMap,<sp/>map_PID_pair_PID_pair_xsec)</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight></codeline>
<codeline lineno="199"></codeline>
<codeline lineno="203"><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>CrossSectionConsistencyCheck</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/>START_CAPABILITY</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>doCrossSectionConsistencyCheck</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NEEDS_MANAGER(RunMC,<sp/>MCLoopInfo)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>DEPENDENCY(TotalCrossSection,<sp/>xsec_container)</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>DEPENDENCY(EventWeighterFunction,<sp/>EventWeighterFunctionType)</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>ATLASAnalysisContainer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/>START_CAPABILITY</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>getATLASAnalysisContainer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(AnalysisContainer)</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>NEEDS_MANAGER(RunMC,<sp/>MCLoopInfo)</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>DEPENDENCY(TotalCrossSection,<sp/>xsec_container)</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>CMSAnalysisContainer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>START_CAPABILITY</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>getCMSAnalysisContainer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(AnalysisContainer)</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>NEEDS_MANAGER(RunMC,<sp/>MCLoopInfo)</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>DEPENDENCY(TotalCrossSection,<sp/>xsec_container)</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>IdentityAnalysisContainer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/>START_CAPABILITY</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>getIdentityAnalysisContainer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(AnalysisContainer)</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>NEEDS_MANAGER(RunMC,<sp/>MCLoopInfo)</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>DEPENDENCY(TotalCrossSection,<sp/>xsec_container)</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight></codeline>
<codeline lineno="243"></codeline>
<codeline lineno="246"><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>ATLASAnalysisNumbers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/>START_CAPABILITY</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>runATLASAnalyses</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(AnalysisDataPointers)</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>NEEDS_MANAGER(RunMC,<sp/>MCLoopInfo)</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>DEPENDENCY(ATLASSmearedEvent,<sp/>HEPUtils::Event)</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>DEPENDENCY(ATLASAnalysisContainer,<sp/>AnalysisContainer)</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>CMSAnalysisNumbers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/>START_CAPABILITY</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>runCMSAnalyses</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(AnalysisDataPointers)</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>NEEDS_MANAGER(RunMC,<sp/>MCLoopInfo)</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>DEPENDENCY(CMSSmearedEvent,<sp/>HEPUtils::Event)</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>DEPENDENCY(CMSAnalysisContainer,<sp/>AnalysisContainer)</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>IdentityAnalysisNumbers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/>START_CAPABILITY</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>runIdentityAnalyses</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(AnalysisDataPointers)</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>NEEDS_MANAGER(RunMC,<sp/>MCLoopInfo)</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>DEPENDENCY(CopiedEvent,<sp/>HEPUtils::Event)</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>DEPENDENCY(IdentityAnalysisContainer,<sp/>AnalysisContainer)</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight></codeline>
<codeline lineno="276"></codeline>
<codeline lineno="278"><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>AllAnalysisNumbers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/>START_CAPABILITY</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>CollectAnalyses</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(AnalysisDataPointers)</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>DEPENDENCY(CrossSectionConsistencyCheck,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>DEPENDENCY(ATLASAnalysisNumbers,<sp/>AnalysisDataPointers)</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>DEPENDENCY(CMSAnalysisNumbers,<sp/>AnalysisDataPointers)</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>DEPENDENCY(IdentityAnalysisNumbers,<sp/>AnalysisDataPointers)</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>DMEFT_results_profiled</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(AnalysisDataPointers)</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>DEPENDENCY(AllAnalysisNumbersUnmodified,<sp/>AnalysisDataPointers)</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>DEPENDENCY(DMEFT_profiled_LHC_nuisance_params,<sp/>map_str_dbl)</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>DEPENDENCY(DMEFT_spectrum,<sp/>Spectrum)</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>ALLOW_MODELS(DMEFT)</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>DMEFT_results_cutoff</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(AnalysisDataPointers)</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>DEPENDENCY(AllAnalysisNumbersUnmodified,<sp/>AnalysisDataPointers)</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>DEPENDENCY(DMEFT_spectrum,<sp/>Spectrum)</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>ALLOW_MODELS(DMEFT)</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>AllAnalysisNumbersUnmodified</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>DMEFT_results</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(AnalysisDataPointers)</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>DEPENDENCY(DMEFT_spectrum,<sp/>Spectrum)</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>ALLOW_MODELS(DMEFT)</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>DMEFT_profiled_LHC_nuisance_params</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>calc_DMEFT_profiled_LHC_nuisance_params</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(map_str_dbl)</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>DEPENDENCY(AllAnalysisNumbersUnmodified,<sp/>AnalysisDataPointers)</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>DEPENDENCY(DMEFT_spectrum,<sp/>Spectrum)</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>ALLOW_MODELS(DMEFT)</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>LHC_signals</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/>START_CAPABILITY</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>calc_LHC_signals</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(map_str_dbl)</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>DEPENDENCY(AllAnalysisNumbers,<sp/>AnalysisDataPointers)</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>LHC_LogLikes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/>START_CAPABILITY</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>calc_LHC_LogLikes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(map_str_AnalysisLogLikes)</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>DEPENDENCY(AllAnalysisNumbers,<sp/>AnalysisDataPointers)</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>DEPENDENCY(RunMC,<sp/>MCLoopInfo)</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>BACKEND_REQ_FROM_GROUP(lnlike_marg_poisson,<sp/>lnlike_marg_poisson_lognormal_error,<sp/>(),<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;)<sp/>)</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>BACKEND_REQ_FROM_GROUP(lnlike_marg_poisson,<sp/>lnlike_marg_poisson_gaussian_error,<sp/>(),<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;)<sp/>)</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>BACKEND_GROUP(lnlike_marg_poisson)</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>LHC_LogLike_per_SR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/>START_CAPABILITY</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>get_LHC_LogLike_per_SR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(map_str_dbl)</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>DEPENDENCY(LHC_LogLikes,<sp/>map_str_AnalysisLogLikes)</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>LHC_LogLike_per_analysis</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/>START_CAPABILITY</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>get_LHC_LogLike_per_analysis</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(map_str_dbl)</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>DEPENDENCY(LHC_LogLikes,<sp/>map_str_AnalysisLogLikes)</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>LHC_LogLike_SR_labels</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/>START_CAPABILITY</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>get_LHC_LogLike_SR_labels</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(map_str_str)</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>DEPENDENCY(LHC_LogLikes,<sp/>map_str_AnalysisLogLikes)</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>LHC_LogLike_SR_indices</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/>START_CAPABILITY</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>get_LHC_LogLike_SR_indices</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(map_str_dbl)</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>DEPENDENCY(LHC_LogLikes,<sp/>map_str_AnalysisLogLikes)</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>LHC_Combined_LogLike</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/>START_CAPABILITY</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>calc_combined_LHC_LogLike</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>DEPENDENCY(LHC_LogLike_per_analysis,<sp/>map_str_dbl)</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/>DEPENDENCY(RunMC,<sp/>MCLoopInfo)</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>LHC_LogLike_scan_guide</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/>START_CAPABILITY</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>calc_LHC_LogLike_scan_guide</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>DEPENDENCY(LHC_Combined_LogLike,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/>DEPENDENCY(RunMC,<sp/>MCLoopInfo)</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>LHCEventLoopInfo</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/>START_CAPABILITY</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>getLHCEventLoopInfo</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(map_str_dbl)</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>DEPENDENCY(RunMC,<sp/>MCLoopInfo)</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>DummyColliderObservable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/>START_CAPABILITY</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>getDummyColliderObservable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>START_FUNCTION(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ALLOW_MODELS(TestModel1D)</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>ATLASDetectorSim</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/>START_CAPABILITY</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>getBuckFastATLAS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(BaseDetector*)</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>NEEDS_MANAGER(RunMC,<sp/>MCLoopInfo)</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>CMSDetectorSim</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/>START_CAPABILITY</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>getBuckFastCMS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(BaseDetector*)</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/>NEEDS_MANAGER(RunMC,<sp/>MCLoopInfo)</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>IdentityDetectorSim</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/>START_CAPABILITY</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>getBuckFastIdentity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(BaseDetector*)</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>NEEDS_MANAGER(RunMC,<sp/>MCLoopInfo)</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight></codeline>
<codeline lineno="447"></codeline>
<codeline lineno="450"><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>ATLASSmearedEvent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/>START_CAPABILITY</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>smearEventATLAS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(HEPUtils::Event)</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>NEEDS_MANAGER(RunMC,<sp/>MCLoopInfo)</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/>DEPENDENCY(HardScatteringEvent,<sp/>HEPUtils::Event)</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/>DEPENDENCY(ATLASDetectorSim,<sp/>BaseDetector*)</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>CMSSmearedEvent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/>START_CAPABILITY</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>smearEventCMS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(HEPUtils::Event)</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>NEEDS_MANAGER(RunMC,<sp/>MCLoopInfo)</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/>DEPENDENCY(HardScatteringEvent,<sp/>HEPUtils::Event)</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/>DEPENDENCY(CMSDetectorSim,<sp/>BaseDetector*)</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>CopiedEvent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/>START_CAPABILITY</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>copyEvent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(HEPUtils::Event)</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/>NEEDS_MANAGER(RunMC,<sp/>MCLoopInfo)</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/>DEPENDENCY(HardScatteringEvent,<sp/>HEPUtils::Event)</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/>DEPENDENCY(IdentityDetectorSim,<sp/>BaseDetector*)</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>EventWeighterFunction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/>START_CAPABILITY</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>setEventWeight_unity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(EventWeighterFunctionType)</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>setEventWeight_fromCrossSection</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(EventWeighterFunctionType)</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/>NEEDS_MANAGER(RunMC,<sp/>MCLoopInfo)</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/>DEPENDENCY(ProcessCrossSectionsMap,<sp/>map_int_process_xsec)</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>All<sp/>other<sp/>functions<sp/>are<sp/>declared<sp/>in<sp/>additional<sp/>headers<sp/>in<sp/>the<sp/>ColliderBit/models<sp/>directory.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>capabilities<sp/>need<sp/>to<sp/>be<sp/>provided<sp/>for<sp/>each<sp/>new<sp/>model:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>SLHAea<sp/>object<sp/>with<sp/>spectrum<sp/>and<sp/>decays<sp/>for<sp/>a<sp/>Pythia8<sp/>collider</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>SpectrumAndDecaysForPythia</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/>START_CAPABILITY</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>HardScatteringSim</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/>START_CAPABILITY</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="521" refid="ColliderBit__MC__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" refkind="member"><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>HardScatteringEvent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/>START_CAPABILITY</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#ifndef<sp/>EXCLUDE_HEPMC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>getLHEvent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>START_FUNCTION(HEPUtils::Event)</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NEEDS_MANAGER(RunMC,<sp/>MCLoopInfo)</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight></codeline>
<codeline lineno="534" refid="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" refkind="member"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>getHepMCEvent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>START_FUNCTION(HEPUtils::Event)</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NEEDS_MANAGER(RunMC,<sp/>MCLoopInfo)</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>MODULE</highlight></codeline>
    </programlisting>
    <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp"/>
  </compounddef>
</doxygen>
