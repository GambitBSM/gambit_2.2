<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="ModGrav_8cpp" kind="file" language="C++">
    <compoundname>ModGrav.cpp</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>CosmoBit routines relating to modified gravity models. Currently includes solar system tests.</para>
<para><hruler/>
 Authors (add name and date if you modify): <simplesect kind="author"><para>Anna Liang (<ulink url="mailto:a.liang1@uqconnect.edu.au">a.liang1@uqconnect.edu.au</ulink>) </para>
</simplesect>
<simplesect kind="date"><para>2021 Aug <hruler/>
 </para>
</simplesect>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/><sp/><sp/>GAMBIT:<sp/>Global<sp/>and<sp/>Modular<sp/>BSM<sp/>Inference<sp/>Tool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>*********************************************</highlight></codeline>
<codeline lineno="14"><highlight class="comment"></highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO:<sp/>Temporarily<sp/>disabled<sp/>until<sp/>project<sp/>is<sp/>ready</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="17"><highlight class="comment">#include<sp/>&lt;string&gt;</highlight></codeline>
<codeline lineno="18"><highlight class="comment">#include<sp/>&lt;iostream&gt;</highlight></codeline>
<codeline lineno="19"><highlight class="comment">#include<sp/>&lt;cmath&gt;</highlight></codeline>
<codeline lineno="20"><highlight class="comment">#include<sp/>&lt;fstream&gt;</highlight></codeline>
<codeline lineno="21"><highlight class="comment">#include<sp/>&lt;sstream&gt;</highlight></codeline>
<codeline lineno="22"><highlight class="comment">#include<sp/>&lt;vector&gt;</highlight></codeline>
<codeline lineno="23"><highlight class="comment">#include<sp/>&lt;iomanip&gt;</highlight></codeline>
<codeline lineno="24"><highlight class="comment"></highlight></codeline>
<codeline lineno="25"><highlight class="comment">#include<sp/>&quot;gambit/Utils/yaml_options.hpp&quot;</highlight></codeline>
<codeline lineno="26"><highlight class="comment">#include<sp/>&quot;gambit/Utils/ascii_dict_reader.hpp&quot;</highlight></codeline>
<codeline lineno="27"><highlight class="comment">#include<sp/>&quot;gambit/Elements/gambit_module_headers.hpp&quot;</highlight></codeline>
<codeline lineno="28"><highlight class="comment">#include<sp/>&quot;gambit/CosmoBit/CosmoBit_rollcall.hpp&quot;</highlight></codeline>
<codeline lineno="29"><highlight class="comment">#include<sp/>&quot;gambit/CosmoBit/CosmoBit_types.hpp&quot;</highlight></codeline>
<codeline lineno="30"><highlight class="comment"></highlight></codeline>
<codeline lineno="31"><highlight class="comment">namespace<sp/>Gambit</highlight></codeline>
<codeline lineno="32"><highlight class="comment">{</highlight></codeline>
<codeline lineno="33"><highlight class="comment"></highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/><sp/>namespace<sp/>CosmoBit</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/><sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/><sp/><sp/><sp/>using<sp/>namespace<sp/>LogTags;</highlight></codeline>
<codeline lineno="37"><highlight class="comment"></highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>Obtain<sp/>the<sp/>grid<sp/>of<sp/>phi(0)<sp/>for<sp/>a<sp/>given<sp/>M<sp/>and<sp/>mu<sp/>by<sp/>interpolating<sp/>pre-calculated<sp/>values</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>from<sp/>the<sp/>data<sp/>file<sp/>CosmoBit/data/phiOvals.dat</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/><sp/><sp/><sp/>void<sp/>interp_phi0<sp/>(double<sp/>&amp;result)</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>using<sp/>namespace<sp/>Pipes::interp_phi0;</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>using<sp/>namespace<sp/>std;</highlight></codeline>
<codeline lineno="44"><highlight class="comment"></highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>double<sp/>M_pl<sp/>=<sp/>2.453e18;<sp/>//<sp/>[Gev/c^2]<sp/>reduced<sp/>planck<sp/>mass</highlight></codeline>
<codeline lineno="46"><highlight class="comment"></highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Read<sp/>in<sp/>the<sp/>data<sp/>file<sp/>on<sp/>the<sp/>first<sp/>time<sp/>the<sp/>function<sp/>calls</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>bool<sp/>firsttime<sp/>=<sp/>true;</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>double<sp/>minmass,<sp/>maxmass,<sp/>minmu,<sp/>maxmu;<sp/>//<sp/>bounds<sp/>on<sp/>mass<sp/>and<sp/>mu</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>int<sp/>nmasses,<sp/>nmu;<sp/>//<sp/>grid<sp/>sizes<sp/>of<sp/>mass<sp/>and<sp/>mu</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>vector<sp/>&lt;double&gt;<sp/>phi0vec;<sp/>//<sp/>vector<sp/>to<sp/>store<sp/>phi0<sp/>vals</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>vector<sp/>&lt;double&gt;<sp/>massvec,<sp/>muvec;<sp/>//<sp/>vector<sp/>to<sp/>store<sp/>the<sp/>mass<sp/>and<sp/>mu<sp/>points<sp/>of<sp/>grid</highlight></codeline>
<codeline lineno="53"><highlight class="comment"></highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(firsttime<sp/>==<sp/>true){</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Create<sp/>a<sp/>file<sp/>stream<sp/>for<sp/>file<sp/>to<sp/>open<sp/>the<sp/>.dat<sp/>file<sp/>of<sp/>phi0<sp/>values</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ifstream<sp/>datafile;</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str<sp/>filename<sp/>=<sp/>runOptions-&gt;getValueOrDef&lt;str&gt;(GAMBIT_DIR<sp/>&quot;/CosmoBit/data/phi0vals.dat&quot;,<sp/>&quot;filepath&quot;);</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>datafile.open(filename);</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(!datafile.is_open()){</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CosmoBit_error().raise(LOCAL_INFO,<sp/>&quot;Failed<sp/>to<sp/>open<sp/>file<sp/>phi0vals.dat<sp/>in<sp/>specified<sp/>directory.&quot;);</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Obtain<sp/>the<sp/>first<sp/>line<sp/>of<sp/>data<sp/>file<sp/>as<sp/>a<sp/>string<sp/>stream<sp/>and<sp/>convert<sp/>to<sp/>store<sp/>parameters<sp/>as<sp/>double<sp/>values</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str<sp/>line1;</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getline(datafile,<sp/>line1);</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>istringstream<sp/>iss(line1);</highlight></codeline>
<codeline lineno="66"><highlight class="comment"></highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector<sp/>&lt;double&gt;<sp/>vecinputs<sp/>(6,<sp/>0.0e0);</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>i=0;<sp/>i&lt;6;<sp/>i++){</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iss<sp/>&gt;&gt;<sp/>vecinputs.at(i);</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="comment"></highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Store<sp/>the<sp/>read<sp/>in<sp/>parameters<sp/>as<sp/>static<sp/>variables</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minmass<sp/>=<sp/>vecinputs.at(0);</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxmass<sp/>=<sp/>vecinputs.at(1);</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nmasses<sp/>=<sp/>vecinputs.at(2);</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minmu<sp/>=<sp/>vecinputs.at(3);</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxmu<sp/>=<sp/>vecinputs.at(4);</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nmu<sp/>=<sp/>vecinputs.at(5);</highlight></codeline>
<codeline lineno="79"><highlight class="comment"></highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Then<sp/>read<sp/>in<sp/>the<sp/>rest<sp/>of<sp/>the<sp/>file<sp/>as<sp/>a<sp/>vector</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>num<sp/>=<sp/>0;<sp/>//<sp/>to<sp/>check<sp/>file<sp/>reading<sp/>against</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>while<sp/>(datafile<sp/>&gt;&gt;<sp/>num)<sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>phi0vec.push_back(num);</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="comment"></highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Generate<sp/>a<sp/>vector<sp/>of<sp/>masses<sp/>in<sp/>GeV</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>steplogmass<sp/>=<sp/>(log10(maxmass/M_pl)-log10(minmass/M_pl))/(nmasses-1);</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>massvec.resize(nmasses,<sp/>0.0e0);</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>i=0;<sp/>i&lt;nmasses;<sp/>i++){</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>massvec.at(i)<sp/>=<sp/>pow(10,<sp/>log10(maxmass/M_pl)-i*steplogmass)*M_pl;</highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="comment"></highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Generate<sp/>a<sp/>vector<sp/>of<sp/>mu<sp/>vals<sp/>in<sp/>GeV</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>steplogmu<sp/>=<sp/>(log10(maxmu)-log10(minmu))/(nmu-1);</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>muvec.resize(nmu,<sp/>0.0e0);</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>i=0;<sp/>i&lt;nmu;<sp/>i++){</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>muvec.at(i)<sp/>=<sp/>pow(10,<sp/>log10(maxmu)-i*steplogmu);</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="comment"></highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>datafile.close();</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>firsttime<sp/>=<sp/>false;</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="comment"></highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Interpolate<sp/>the<sp/>table<sp/>to<sp/>obtain<sp/>desired<sp/>phi(0)<sp/>for<sp/>a<sp/>given<sp/>M<sp/>and<sp/>mu</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>inputmass,<sp/>inputmu;</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(ModelInUse(&quot;symmetron&quot;))<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>powmass,<sp/>powmu;</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>powmass<sp/>=<sp/>*Param[&quot;mass&quot;];</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inputmass<sp/>=<sp/>pow(10,<sp/>powmass)*M_pl;</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>powmu<sp/>=<sp/>*Param[&quot;mu&quot;];</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inputmu<sp/>=<sp/>pow(10,<sp/>powmu);</highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else</highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CosmoBit_error().raise(LOCAL_INFO,&quot;Whoops,<sp/>you<sp/>are<sp/>not<sp/>scanning<sp/>the<sp/>model<sp/>&quot;</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;<sp/>symmetron!<sp/>There<sp/>is<sp/>probably<sp/>a<sp/>bug<sp/>CosmoBit_rollcall.hpp;<sp/>this<sp/>module<sp/>&quot;</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;<sp/>function<sp/>should<sp/>have<sp/>ALLOW_MODELS(symmetron)<sp/>defined.&quot;);</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="118"><highlight class="comment"></highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Check<sp/>the<sp/>input<sp/>mass<sp/>and<sp/>mu<sp/>are<sp/>within<sp/>interpolation<sp/>range</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(inputmass<sp/>&gt;<sp/>maxmass){</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CosmoBit_error().raise(LOCAL_INFO,&quot;Input<sp/>mass<sp/>chosen<sp/>greater<sp/>than<sp/>interpolating<sp/>range.&quot;);</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(inputmass<sp/>&lt;<sp/>minmass){</highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CosmoBit_error().raise(LOCAL_INFO,&quot;Input<sp/>mass<sp/>chosen<sp/>smaller<sp/>than<sp/>interpolating<sp/>range.&quot;);</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(inputmu<sp/>&gt;<sp/>maxmu)<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CosmoBit_error().raise(LOCAL_INFO,&quot;Input<sp/>mu<sp/>chosen<sp/>greater<sp/>than<sp/>interpolating<sp/>range.&quot;);</highlight></codeline>
<codeline lineno="128"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(inputmu<sp/>&lt;<sp/>minmu)<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CosmoBit_error().raise(LOCAL_INFO,&quot;Input<sp/>mu<sp/>chosen<sp/>smaller<sp/>than<sp/>interpolating<sp/>range.&quot;);</highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="comment"></highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Find<sp/>x0,<sp/>x1,<sp/>y0,<sp/>y1<sp/>where<sp/>x<sp/>is<sp/>mass<sp/>and<sp/>y<sp/>is<sp/>mu</highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>ix0,<sp/>ix1,<sp/>jy0,<sp/>jy1;</highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>x0,<sp/>x1,<sp/>y0,<sp/>y1;</highlight></codeline>
<codeline lineno="136"><highlight class="comment"></highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>i=0;<sp/>i&lt;nmasses-1;<sp/>i++){</highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>massvec<sp/>gets<sp/>smaller<sp/>from<sp/>first<sp/>element<sp/>to<sp/>last</highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(inputmass<sp/>&lt;=<sp/>massvec.at(i)<sp/>&amp;&amp;<sp/>inputmass<sp/>&gt;=<sp/>massvec.at(i+1)){</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ix0<sp/>=<sp/>i+1;</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ix1<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x0<sp/>=<sp/>massvec.at(ix0);</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x1<sp/>=<sp/>massvec.at(ix1);</highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline lineno="145"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="146"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="comment"></highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>j=0;<sp/>j&lt;nmu-1;<sp/>j++){</highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>muvec<sp/>gets<sp/>bigger<sp/>from<sp/>first<sp/>element<sp/>to<sp/>last</highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(inputmu<sp/>&lt;=<sp/>muvec.at(j)<sp/>&amp;&amp;<sp/>inputmu<sp/>&gt;=<sp/>muvec.at(j+1)){</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jy0<sp/>=<sp/>j+1;</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jy1<sp/>=<sp/>j;</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y0<sp/>=<sp/>muvec.at(jy0);</highlight></codeline>
<codeline lineno="154"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y1<sp/>=<sp/>muvec.at(jy1);</highlight></codeline>
<codeline lineno="155"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline lineno="156"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="comment"></highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Find<sp/>what<sp/>corresponding<sp/>phi(0)<sp/>values<sp/>are</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>z00<sp/>=<sp/>phi0vec.at(jy0+ix0*nmu);</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>z01<sp/>=<sp/>phi0vec.at(jy1+ix0*nmu);</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>z10<sp/>=<sp/>phi0vec.at(jy0+ix1*nmu);</highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>z11<sp/>=<sp/>phi0vec.at(jy1+ix1*nmu);</highlight></codeline>
<codeline lineno="164"><highlight class="comment"></highlight></codeline>
<codeline lineno="165"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Then<sp/>interpolate<sp/>to<sp/>obtain<sp/>the<sp/>phi0(mass,<sp/>mu)<sp/>we<sp/>want</highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>yfrac<sp/>=<sp/>(inputmu<sp/>-<sp/>y0)/(y1-y0);</highlight></codeline>
<codeline lineno="167"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>xfrac<sp/>=<sp/>(inputmass<sp/>-<sp/>x0)/(x1-x0);</highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>interpphi0<sp/>=<sp/>(1.0-yfrac)*((1.0-xfrac)*z00+xfrac*z10)+yfrac*((1.0-xfrac)*z01+xfrac*z11);</highlight></codeline>
<codeline lineno="169"><highlight class="comment"></highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>interpphi0;</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Print<sp/>parameters<sp/>to<sp/>check<sp/>function<sp/>is<sp/>interpolating<sp/>correctly</highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>cout<sp/>&lt;&lt;<sp/>&quot;Mass<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>inputmass<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>cout<sp/>&lt;&lt;<sp/>&quot;Mu<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>inputmu<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="174"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>cout<sp/>&lt;&lt;<sp/>&quot;phi(0)<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>result<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="175"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="176"><highlight class="comment"></highlight></codeline>
<codeline lineno="177"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>Calculate<sp/>Brans-Dicke<sp/>parameter<sp/>omega<sp/>using<sp/>symmetron<sp/>parameters<sp/>mass<sp/>and<sp/>v</highlight></codeline>
<codeline lineno="178"><highlight class="comment"><sp/><sp/><sp/><sp/>void<sp/>compute_omega<sp/>(double<sp/>&amp;result)</highlight></codeline>
<codeline lineno="179"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>using<sp/>namespace<sp/>Pipes::compute_omega;</highlight></codeline>
<codeline lineno="181"><highlight class="comment"></highlight></codeline>
<codeline lineno="182"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>phival<sp/>=<sp/>*Pipes::compute_omega::Dep::phi0_interpolation;<sp/>//<sp/>obtain<sp/>from<sp/>interpolating<sp/>function</highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>double<sp/>M_pl<sp/>=<sp/>2.453e18;<sp/>//<sp/>[Gev/c^2]<sp/>reduced<sp/>planck<sp/>mass</highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>omega<sp/>=<sp/>0.0e0;<sp/>//<sp/>to<sp/>store<sp/>the<sp/>value<sp/>of<sp/>omega</highlight></codeline>
<codeline lineno="185"><highlight class="comment"></highlight></codeline>
<codeline lineno="186"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>if<sp/>(ModelInUse(&quot;symmetron&quot;))</highlight></codeline>
<codeline lineno="187"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Input<sp/>parameters<sp/>are<sp/>given<sp/>as<sp/>powers<sp/>so<sp/>convert<sp/>to<sp/>GeV/c^2</highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>powmass<sp/>=<sp/>*Param[&quot;mass&quot;];</highlight></codeline>
<codeline lineno="190"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>mass<sp/>=<sp/>pow(10,<sp/>powmass)*M_pl;</highlight></codeline>
<codeline lineno="191"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>powv<sp/>=<sp/>*Param[&quot;vval&quot;];</highlight></codeline>
<codeline lineno="192"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>vval<sp/>=<sp/>pow(10,<sp/>powv)*M_pl;</highlight></codeline>
<codeline lineno="193"><highlight class="comment"></highlight></codeline>
<codeline lineno="194"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(Utils::isnan(mass)<sp/>or<sp/>Utils::isnan(vval))</highlight></codeline>
<codeline lineno="195"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CosmoBit_error().raise(LOCAL_INFO,&quot;NaN<sp/>detected<sp/>in<sp/>input<sp/>parameters<sp/>for<sp/>model&quot;</highlight></codeline>
<codeline lineno="197"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;<sp/>symmetron!<sp/>This<sp/>may<sp/>indicate<sp/>a<sp/>bug<sp/>in<sp/>the<sp/>scanner<sp/>plugin<sp/>you<sp/>are<sp/>using.&quot;);</highlight></codeline>
<codeline lineno="198"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="199"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>omega<sp/>=<sp/>0.5*(0.5*pow(pow(mass,2.0)/(M_pl*phival*vval),<sp/>2.0)-3);</highlight></codeline>
<codeline lineno="200"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else</highlight></codeline>
<codeline lineno="201"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CosmoBit_error().raise(LOCAL_INFO,&quot;Whoops,<sp/>you<sp/>are<sp/>not<sp/>scanning<sp/>the<sp/>model<sp/>&quot;</highlight></codeline>
<codeline lineno="203"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;<sp/>symmetron!<sp/>There<sp/>is<sp/>probably<sp/>a<sp/>bug<sp/>CosmoBit_rollcall.hpp;<sp/>this<sp/>module<sp/>&quot;</highlight></codeline>
<codeline lineno="204"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;<sp/>function<sp/>should<sp/>have<sp/>ALLOW_MODELS(symmetron)<sp/>defined.&quot;);</highlight></codeline>
<codeline lineno="205"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="206"><highlight class="comment"></highlight></codeline>
<codeline lineno="207"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Store<sp/>the<sp/>result<sp/>as<sp/>omega</highlight></codeline>
<codeline lineno="208"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>omega;</highlight></codeline>
<codeline lineno="209"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="210"><highlight class="comment"></highlight></codeline>
<codeline lineno="211"><highlight class="comment"><sp/><sp/>//<sp/>Calculate<sp/>gamma<sp/>using<sp/>brans-dicke<sp/>parameter<sp/>omega</highlight></codeline>
<codeline lineno="212"><highlight class="comment"><sp/><sp/><sp/>void<sp/>compute_gammaminus1<sp/>(double<sp/>&amp;result)</highlight></codeline>
<codeline lineno="213"><highlight class="comment"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>fabs(1.0/(2.0+<sp/>*Pipes::compute_gammaminus1::Dep::omega_bdparam));</highlight></codeline>
<codeline lineno="215"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>//<sp/>cout<sp/>&lt;&lt;<sp/>&quot;|gamma-1|<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>result<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="217"><highlight class="comment"></highlight></codeline>
<codeline lineno="218"><highlight class="comment"><sp/><sp/><sp/>//<sp/>Calculate<sp/>|beta-1|<sp/>parameter<sp/>using<sp/>brans-dicke<sp/>parameter<sp/>omega</highlight></codeline>
<codeline lineno="219"><highlight class="comment"><sp/><sp/><sp/><sp/>void<sp/>compute_betaminus1<sp/>(double<sp/>&amp;result)</highlight></codeline>
<codeline lineno="220"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="221"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>using<sp/>namespace<sp/>Pipes::compute_betaminus1;</highlight></codeline>
<codeline lineno="222"><highlight class="comment"></highlight></codeline>
<codeline lineno="223"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>omega<sp/>=<sp/>*Pipes::compute_betaminus1::Dep::omega_bdparam;</highlight></codeline>
<codeline lineno="224"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>phi0<sp/>=<sp/>*Pipes::compute_betaminus1::Dep::phi0_interpolation;</highlight></codeline>
<codeline lineno="225"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>mass,<sp/>vval;</highlight></codeline>
<codeline lineno="226"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>double<sp/>M_pl<sp/>=<sp/>2.453e18;<sp/>//<sp/>[Gev/c^2]<sp/>reduced<sp/>planck<sp/>mass</highlight></codeline>
<codeline lineno="227"><highlight class="comment"></highlight></codeline>
<codeline lineno="228"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(ModelInUse(&quot;symmetron&quot;))</highlight></codeline>
<codeline lineno="229"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="230"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>read<sp/>in<sp/>input<sp/>parameters</highlight></codeline>
<codeline lineno="231"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>powmass<sp/>=<sp/>*Param[&quot;mass&quot;];</highlight></codeline>
<codeline lineno="232"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mass<sp/>=<sp/>pow(10,<sp/>powmass)*M_pl;</highlight></codeline>
<codeline lineno="233"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>powv<sp/>=<sp/>*Param[&quot;vval&quot;];</highlight></codeline>
<codeline lineno="234"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vval<sp/>=<sp/>pow(10,<sp/>powv)*M_pl;</highlight></codeline>
<codeline lineno="235"><highlight class="comment"></highlight></codeline>
<codeline lineno="236"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(Utils::isnan(mass))</highlight></codeline>
<codeline lineno="237"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="238"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CosmoBit_error().raise(LOCAL_INFO,&quot;NaN<sp/>detected<sp/>in<sp/>input<sp/>parameters<sp/>for<sp/>model&quot;</highlight></codeline>
<codeline lineno="239"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;<sp/>symmetron!<sp/>This<sp/>may<sp/>indicate<sp/>a<sp/>bug<sp/>in<sp/>the<sp/>scanner<sp/>plugin<sp/>you<sp/>are<sp/>using.&quot;);</highlight></codeline>
<codeline lineno="240"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="241"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else</highlight></codeline>
<codeline lineno="242"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CosmoBit_error().raise(LOCAL_INFO,&quot;Whoops,<sp/>you<sp/>are<sp/>not<sp/>scanning<sp/>the<sp/>model<sp/>&quot;</highlight></codeline>
<codeline lineno="244"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;<sp/>symmetron!<sp/>There<sp/>is<sp/>probably<sp/>a<sp/>bug<sp/>CosmoBit_rollcall.hpp;<sp/>this<sp/>module<sp/>&quot;</highlight></codeline>
<codeline lineno="245"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;<sp/>function<sp/>should<sp/>have<sp/>ALLOW_MODELS(symmetron)<sp/>defined.&quot;);</highlight></codeline>
<codeline lineno="246"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="247"><highlight class="comment"></highlight></codeline>
<codeline lineno="248"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>deriv<sp/>=<sp/>-2*pow(1+phi0*phi0*vval*vval/(2*mass*mass),-3.0)*2*phi0*vval/(2*mass*mass);</highlight></codeline>
<codeline lineno="249"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>fabs(1/(pow(3+2*omega,2.0)*(4+2*omega))*1.0/deriv);</highlight></codeline>
<codeline lineno="250"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>cout<sp/>&lt;&lt;<sp/>&quot;|beta-1|<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>result<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="251"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="252"><highlight class="comment"></highlight></codeline>
<codeline lineno="253"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>A<sp/>likelihood<sp/>function<sp/>for<sp/>comparing<sp/>the<sp/>model<sp/>eta<sp/>to<sp/>the<sp/>mars<sp/>perihelion<sp/>value</highlight></codeline>
<codeline lineno="254"><highlight class="comment"><sp/><sp/><sp/><sp/>void<sp/>lnL_eta<sp/>(double<sp/>&amp;result)</highlight></codeline>
<codeline lineno="255"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="256"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>using<sp/>namespace<sp/>Pipes::lnL_eta;</highlight></codeline>
<codeline lineno="257"><highlight class="comment"></highlight></codeline>
<codeline lineno="258"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>loglTotal<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="259"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>betaminus1<sp/>=<sp/>*Pipes::lnL_eta::Dep::betaminus1_bdparam;</highlight></codeline>
<codeline lineno="260"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>gammaminus1<sp/>=<sp/>*Pipes::lnL_eta::Dep::gammaminus1_bdparam;</highlight></codeline>
<codeline lineno="261"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>eta_data<sp/>=<sp/>-0.6e-4;</highlight></codeline>
<codeline lineno="262"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>eta_err<sp/>=<sp/>5.2e-4;</highlight></codeline>
<codeline lineno="263"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>eta_model<sp/>=<sp/>4*(betaminus1+1)-(gammaminus1+1)-3;</highlight></codeline>
<codeline lineno="264"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>chi2<sp/>=<sp/>pow((eta_model-eta_data)/eta_err,2.0);</highlight></codeline>
<codeline lineno="265"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>loglTotal<sp/>+=<sp/>-chi2/2.0;</highlight></codeline>
<codeline lineno="266"><highlight class="comment"></highlight></codeline>
<codeline lineno="267"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Randomly<sp/>raise<sp/>some<sp/>ficticious<sp/>alarms<sp/>about<sp/>this<sp/>point,<sp/>with<sp/>probability<sp/>x,</highlight></codeline>
<codeline lineno="268"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>where<sp/>x<sp/>is<sp/>given<sp/>by<sp/>the<sp/>input<sp/>yaml<sp/>option<sp/>or<sp/>a<sp/>default<sp/>of<sp/>1.</highlight></codeline>
<codeline lineno="269"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>x<sp/>=<sp/>1.0-runOptions-&gt;getValueOrDef&lt;double&gt;(1.,<sp/>&quot;probability_of_validity&quot;);</highlight></codeline>
<codeline lineno="270"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Random::draw()<sp/>&lt;<sp/>x)</highlight></codeline>
<codeline lineno="271"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="272"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>invalid_point().raise(&quot;I<sp/>don&apos;t<sp/>like<sp/>this<sp/>point.&quot;);</highlight></codeline>
<codeline lineno="273"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="274"><highlight class="comment"></highlight></codeline>
<codeline lineno="275"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Artificially<sp/>slow<sp/>down<sp/>likelihood<sp/>evaluations</highlight></codeline>
<codeline lineno="276"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Important<sp/>for<sp/>debugging<sp/>new<sp/>scanner<sp/>plugins.</highlight></codeline>
<codeline lineno="277"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>eval_time<sp/>=<sp/>runOptions-&gt;getValueOrDef&lt;double&gt;(-1,<sp/>&quot;eval_time&quot;);<sp/>//<sp/>Measured<sp/>in<sp/>seconds</highlight></codeline>
<codeline lineno="278"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>//std::cout<sp/>&lt;&lt;<sp/>&quot;eval_time:&quot;<sp/>&lt;&lt;<sp/>eval_time<sp/>&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="279"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>if(eval_time&gt;0)</highlight></codeline>
<codeline lineno="280"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="281"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>struct<sp/>timespec<sp/>sleeptime;</highlight></codeline>
<codeline lineno="282"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sleeptime.tv_sec<sp/>=<sp/>floor(eval_time);</highlight></codeline>
<codeline lineno="283"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sleeptime.tv_nsec<sp/>=<sp/>floor((eval_time-floor(eval_time))*1e9);<sp/>//<sp/>Allow<sp/>user<sp/>to<sp/>choose<sp/>fractions<sp/>of<sp/>second</highlight></codeline>
<codeline lineno="284"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//std::cout<sp/>&lt;&lt;<sp/>&quot;Sleeping<sp/>for<sp/>&quot;&lt;&lt;sleeptime.tv_sec&lt;&lt;&quot;<sp/>seconds<sp/>and<sp/>&quot;&lt;&lt;sleeptime.tv_nsec&lt;&lt;&quot;<sp/>nanoseconds&quot;<sp/>&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="285"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nanosleep(&amp;sleeptime,NULL);</highlight></codeline>
<codeline lineno="286"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="287"><highlight class="comment"></highlight></codeline>
<codeline lineno="288"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>loglTotal;</highlight></codeline>
<codeline lineno="289"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>logger()<sp/>&lt;&lt;<sp/>&quot;Symmetron<sp/>beta<sp/>LogLike<sp/>computed<sp/>to<sp/>be:<sp/>&quot;<sp/>&lt;&lt;<sp/>result<sp/>&lt;&lt;<sp/>EOM;</highlight></codeline>
<codeline lineno="290"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="291"><highlight class="comment"></highlight></codeline>
<codeline lineno="292"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>A<sp/>likelihood<sp/>function<sp/>for<sp/>comparing<sp/>the<sp/>model<sp/>|gamma-1|<sp/>to<sp/>the<sp/>cassini<sp/>value</highlight></codeline>
<codeline lineno="293"><highlight class="comment"><sp/><sp/><sp/><sp/>void<sp/>lnL_gamma<sp/>(double<sp/>&amp;result)</highlight></codeline>
<codeline lineno="294"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="295"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>using<sp/>namespace<sp/>Pipes::lnL_gamma;</highlight></codeline>
<codeline lineno="296"><highlight class="comment"></highlight></codeline>
<codeline lineno="297"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>loglTotal<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="298"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>gammaminus1<sp/>=<sp/>*Pipes::lnL_gamma::Dep::gammaminus1_bdparam;</highlight></codeline>
<codeline lineno="299"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>gammaminus1_data<sp/>=<sp/>2.1e-5;</highlight></codeline>
<codeline lineno="300"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>gammaminus1_err<sp/>=<sp/>2.3e-5;</highlight></codeline>
<codeline lineno="301"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>chi2<sp/>=<sp/>pow((gammaminus1-gammaminus1_data)/gammaminus1_err,2.0);</highlight></codeline>
<codeline lineno="302"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>loglTotal<sp/>+=<sp/>-chi2/2.0;</highlight></codeline>
<codeline lineno="303"><highlight class="comment"></highlight></codeline>
<codeline lineno="304"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Check<sp/>that<sp/>the<sp/>tolerance<sp/>for<sp/>phi<sp/>is<sp/>reasonable<sp/>for<sp/>the<sp/>data</highlight></codeline>
<codeline lineno="305"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>limit<sp/>=<sp/>runOptions-&gt;getValueOrDef&lt;double&gt;(1e-5,<sp/>&quot;gammaminus1_tol&quot;);</highlight></codeline>
<codeline lineno="306"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(0.01*gammaminus1_data<sp/>&lt;<sp/>limit)<sp/>{</highlight></codeline>
<codeline lineno="307"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CosmoBit_error().raise(LOCAL_INFO,<sp/>&quot;Minimum<sp/>gamma-1<sp/>limit<sp/>for<sp/>calculating<sp/>&quot;</highlight></codeline>
<codeline lineno="308"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;phi(0)<sp/>is<sp/>too<sp/>large<sp/>for<sp/>the<sp/>given<sp/>data.<sp/>Recalculate<sp/>phi(0)<sp/>grid<sp/>with<sp/>a<sp/>smaller<sp/>limit.&quot;);</highlight></codeline>
<codeline lineno="309"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="310"><highlight class="comment"></highlight></codeline>
<codeline lineno="311"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Randomly<sp/>raise<sp/>some<sp/>ficticious<sp/>alarms<sp/>about<sp/>this<sp/>point,<sp/>with<sp/>probability<sp/>x,</highlight></codeline>
<codeline lineno="312"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>where<sp/>x<sp/>is<sp/>given<sp/>by<sp/>the<sp/>input<sp/>yaml<sp/>option<sp/>or<sp/>a<sp/>default<sp/>of<sp/>1.</highlight></codeline>
<codeline lineno="313"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>x<sp/>=<sp/>1.0-runOptions-&gt;getValueOrDef&lt;double&gt;(1.,<sp/>&quot;probability_of_validity&quot;);</highlight></codeline>
<codeline lineno="314"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Random::draw()<sp/>&lt;<sp/>x)</highlight></codeline>
<codeline lineno="315"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="316"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>invalid_point().raise(&quot;I<sp/>don&apos;t<sp/>like<sp/>this<sp/>point.&quot;);</highlight></codeline>
<codeline lineno="317"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="318"><highlight class="comment"></highlight></codeline>
<codeline lineno="319"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Artificially<sp/>slow<sp/>down<sp/>likelihood<sp/>evaluations</highlight></codeline>
<codeline lineno="320"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Important<sp/>for<sp/>debugging<sp/>new<sp/>scanner<sp/>plugins.</highlight></codeline>
<codeline lineno="321"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>eval_time<sp/>=<sp/>runOptions-&gt;getValueOrDef&lt;double&gt;(-1,<sp/>&quot;eval_time&quot;);<sp/>//<sp/>Measured<sp/>in<sp/>seconds</highlight></codeline>
<codeline lineno="322"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>//std::cout<sp/>&lt;&lt;<sp/>&quot;eval_time:&quot;<sp/>&lt;&lt;<sp/>eval_time<sp/>&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="323"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>if(eval_time&gt;0)</highlight></codeline>
<codeline lineno="324"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="325"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>struct<sp/>timespec<sp/>sleeptime;</highlight></codeline>
<codeline lineno="326"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sleeptime.tv_sec<sp/>=<sp/>floor(eval_time);</highlight></codeline>
<codeline lineno="327"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sleeptime.tv_nsec<sp/>=<sp/>floor((eval_time-floor(eval_time))*1e9);<sp/>//<sp/>Allow<sp/>user<sp/>to<sp/>choose<sp/>fractions<sp/>of<sp/>second</highlight></codeline>
<codeline lineno="328"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//std::cout<sp/>&lt;&lt;<sp/>&quot;Sleeping<sp/>for<sp/>&quot;&lt;&lt;sleeptime.tv_sec&lt;&lt;&quot;<sp/>seconds<sp/>and<sp/>&quot;&lt;&lt;sleeptime.tv_nsec&lt;&lt;&quot;<sp/>nanoseconds&quot;<sp/>&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="329"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nanosleep(&amp;sleeptime,NULL);</highlight></codeline>
<codeline lineno="330"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="331"><highlight class="comment"></highlight></codeline>
<codeline lineno="332"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>loglTotal;</highlight></codeline>
<codeline lineno="333"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>logger()<sp/>&lt;&lt;<sp/>&quot;Symmetron<sp/>gamma<sp/>LogLike<sp/>computed<sp/>to<sp/>be:<sp/>&quot;<sp/>&lt;&lt;<sp/>result<sp/>&lt;&lt;<sp/>EOM;</highlight></codeline>
<codeline lineno="334"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="335"><highlight class="comment"></highlight></codeline>
<codeline lineno="336"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>A<sp/>box<sp/>likelihood<sp/>function<sp/>for<sp/>whether<sp/>v<sp/>is<sp/>allowed<sp/>by<sp/>vmin</highlight></codeline>
<codeline lineno="337"><highlight class="comment"><sp/><sp/><sp/><sp/>void<sp/>lnL_vmin<sp/>(double<sp/>&amp;result)</highlight></codeline>
<codeline lineno="338"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="339"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>using<sp/>namespace<sp/>Pipes::lnL_vmin;</highlight></codeline>
<codeline lineno="340"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>using<sp/>namespace<sp/>std;</highlight></codeline>
<codeline lineno="341"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>double<sp/>M_pl<sp/>=<sp/>2.453e18;<sp/>//<sp/>[Gev/c^2]<sp/>reduced<sp/>planck<sp/>mass</highlight></codeline>
<codeline lineno="342"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>mass,<sp/>vval;</highlight></codeline>
<codeline lineno="343"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>double<sp/>scale_gravstrength<sp/>=<sp/>runOptions-&gt;getValueOrDef&lt;double&gt;(1.0,<sp/>&quot;gravstrength&quot;);</highlight></codeline>
<codeline lineno="344"><highlight class="comment"></highlight></codeline>
<codeline lineno="345"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(ModelInUse(&quot;symmetron&quot;))</highlight></codeline>
<codeline lineno="346"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="347"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>powmass<sp/>=<sp/>*Param[&quot;mass&quot;];</highlight></codeline>
<codeline lineno="348"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mass<sp/>=<sp/>pow(10,<sp/>powmass)*M_pl;</highlight></codeline>
<codeline lineno="349"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>powv<sp/>=<sp/>*Param[&quot;vval&quot;];</highlight></codeline>
<codeline lineno="350"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vval<sp/>=<sp/>pow(10,<sp/>powv)*M_pl;</highlight></codeline>
<codeline lineno="351"><highlight class="comment"></highlight></codeline>
<codeline lineno="352"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(Utils::isnan(mass)<sp/>or<sp/>Utils::isnan(vval))</highlight></codeline>
<codeline lineno="353"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="354"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CosmoBit_error().raise(LOCAL_INFO,&quot;NaN<sp/>detected<sp/>in<sp/>input<sp/>parameters<sp/>for<sp/>model&quot;</highlight></codeline>
<codeline lineno="355"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;<sp/>symmetron!<sp/>This<sp/>may<sp/>indicate<sp/>a<sp/>bug<sp/>in<sp/>the<sp/>scanner<sp/>plugin<sp/>you<sp/>are<sp/>using.&quot;);</highlight></codeline>
<codeline lineno="356"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="357"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else</highlight></codeline>
<codeline lineno="358"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="359"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CosmoBit_error().raise(LOCAL_INFO,&quot;Whoops,<sp/>you<sp/>are<sp/>not<sp/>scanning<sp/>the<sp/>model<sp/>&quot;</highlight></codeline>
<codeline lineno="360"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;<sp/>symmetron!<sp/>There<sp/>is<sp/>probably<sp/>a<sp/>bug<sp/>CosmoBit_rollcall.hpp;<sp/>this<sp/>module<sp/>&quot;</highlight></codeline>
<codeline lineno="361"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;<sp/>function<sp/>should<sp/>have<sp/>ALLOW_MODELS(symmetron)<sp/>defined.&quot;);</highlight></codeline>
<codeline lineno="362"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="363"><highlight class="comment"></highlight></codeline>
<codeline lineno="364"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>logl<sp/>=<sp/>0.0e0;</highlight></codeline>
<codeline lineno="365"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(vval<sp/>&gt;<sp/>mass*mass/M_pl){</highlight></codeline>
<codeline lineno="366"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logl<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="367"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline lineno="368"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logl<sp/>=<sp/>-1e30;</highlight></codeline>
<codeline lineno="369"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="370"><highlight class="comment"></highlight></codeline>
<codeline lineno="371"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>logl;</highlight></codeline>
<codeline lineno="372"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="373"><highlight class="comment"></highlight></codeline>
<codeline lineno="374"><highlight class="comment"><sp/><sp/>}<sp/>//<sp/>namespace<sp/>CosmoBit</highlight></codeline>
<codeline lineno="375"><highlight class="comment">}<sp/>//<sp/>namespace<sp/>Gambit</highlight></codeline>
<codeline lineno="376"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="C:/Hugo/Sites/gambit_2.2_sphinx/CosmoBit/src/ModGrav.cpp"/>
  </compounddef>
</doxygen>
