<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="namespaceGambit_1_1ColliderBit" kind="namespace" language="C++">
    <compoundname>Gambit::ColliderBit</compoundname>
    <innerclass refid="structGambit_1_1ColliderBit_1_1__gsl__target__func__params" prot="public">Gambit::ColliderBit::_gsl_target_func_params</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1ALEPHSelectronLimitAt208GeV" prot="public">Gambit::ColliderBit::ALEPHSelectronLimitAt208GeV</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1ALEPHSmuonLimitAt208GeV" prot="public">Gambit::ColliderBit::ALEPHSmuonLimitAt208GeV</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1ALEPHStauLimitAt208GeV" prot="public">Gambit::ColliderBit::ALEPHStauLimitAt208GeV</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1Analysis" prot="public">Gambit::ColliderBit::Analysis</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1Analysis__ATLAS__13TeV__0LEP__139invfb" prot="public">Gambit::ColliderBit::Analysis_ATLAS_13TeV_0LEP_139invfb</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1Analysis__ATLAS__13TeV__0LEP__13invfb" prot="public">Gambit::ColliderBit::Analysis_ATLAS_13TeV_0LEP_13invfb</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1Analysis__ATLAS__13TeV__0LEP__36invfb" prot="public">Gambit::ColliderBit::Analysis_ATLAS_13TeV_0LEP_36invfb</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1Analysis__ATLAS__13TeV__0LEPStop__36invfb" prot="public">Gambit::ColliderBit::Analysis_ATLAS_13TeV_0LEPStop_36invfb</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1Analysis__ATLAS__13TeV__1LEPStop__36invfb" prot="public">Gambit::ColliderBit::Analysis_ATLAS_13TeV_1LEPStop_36invfb</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1Analysis__ATLAS__13TeV__2bMET__36invfb" prot="public">Gambit::ColliderBit::Analysis_ATLAS_13TeV_2bMET_36invfb</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1Analysis__ATLAS__13TeV__2LEPStop__139invfb" prot="public">Gambit::ColliderBit::Analysis_ATLAS_13TeV_2LEPStop_139invfb</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1Analysis__ATLAS__13TeV__2LEPStop__36invfb" prot="public">Gambit::ColliderBit::Analysis_ATLAS_13TeV_2LEPStop_36invfb</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1Analysis__ATLAS__13TeV__2LEPStop__exclusive__139invfb" prot="public">Gambit::ColliderBit::Analysis_ATLAS_13TeV_2LEPStop_exclusive_139invfb</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1Analysis__ATLAS__13TeV__2LEPStop__inclusive__139invfb" prot="public">Gambit::ColliderBit::Analysis_ATLAS_13TeV_2LEPStop_inclusive_139invfb</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1Analysis__ATLAS__13TeV__2OSLEP__chargino__139invfb" prot="public">Gambit::ColliderBit::Analysis_ATLAS_13TeV_2OSLEP_chargino_139invfb</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1Analysis__ATLAS__13TeV__2OSLEP__chargino__80invfb" prot="public">Gambit::ColliderBit::Analysis_ATLAS_13TeV_2OSLEP_chargino_80invfb</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1Analysis__ATLAS__13TeV__2OSLEP__chargino__binned__139invfb" prot="public">Gambit::ColliderBit::Analysis_ATLAS_13TeV_2OSLEP_chargino_binned_139invfb</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1Analysis__ATLAS__13TeV__2OSLEP__chargino__binned__80invfb" prot="public">Gambit::ColliderBit::Analysis_ATLAS_13TeV_2OSLEP_chargino_binned_80invfb</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1Analysis__ATLAS__13TeV__2OSLEP__chargino__inclusive__139invfb" prot="public">Gambit::ColliderBit::Analysis_ATLAS_13TeV_2OSLEP_chargino_inclusive_139invfb</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1Analysis__ATLAS__13TeV__2OSLEP__chargino__inclusive__80invfb" prot="public">Gambit::ColliderBit::Analysis_ATLAS_13TeV_2OSLEP_chargino_inclusive_80invfb</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1Analysis__ATLAS__13TeV__2OSLEP__Z__139invfb" prot="public">Gambit::ColliderBit::Analysis_ATLAS_13TeV_2OSLEP_Z_139invfb</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1Analysis__ATLAS__13TeV__3b__24invfb" prot="public">Gambit::ColliderBit::Analysis_ATLAS_13TeV_3b_24invfb</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1Analysis__ATLAS__13TeV__3b__36invfb" prot="public">Gambit::ColliderBit::Analysis_ATLAS_13TeV_3b_36invfb</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1Analysis__ATLAS__13TeV__3b__discoverySR__24invfb" prot="public">Gambit::ColliderBit::Analysis_ATLAS_13TeV_3b_discoverySR_24invfb</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1Analysis__ATLAS__13TeV__3b__discoverySR__36invfb" prot="public">Gambit::ColliderBit::Analysis_ATLAS_13TeV_3b_discoverySR_36invfb</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1Analysis__ATLAS__13TeV__4LEP__139invfb" prot="public">Gambit::ColliderBit::Analysis_ATLAS_13TeV_4LEP_139invfb</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1Analysis__ATLAS__13TeV__4LEP__36invfb" prot="public">Gambit::ColliderBit::Analysis_ATLAS_13TeV_4LEP_36invfb</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1Analysis__ATLAS__13TeV__MultiLEP__2Lep0Jets__36invfb" prot="public">Gambit::ColliderBit::Analysis_ATLAS_13TeV_MultiLEP_2Lep0Jets_36invfb</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1Analysis__ATLAS__13TeV__MultiLEP__2LepPlusJets__36invfb" prot="public">Gambit::ColliderBit::Analysis_ATLAS_13TeV_MultiLEP_2LepPlusJets_36invfb</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1Analysis__ATLAS__13TeV__MultiLEP__36invfb" prot="public">Gambit::ColliderBit::Analysis_ATLAS_13TeV_MultiLEP_36invfb</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1Analysis__ATLAS__13TeV__MultiLEP__3Lep__36invfb" prot="public">Gambit::ColliderBit::Analysis_ATLAS_13TeV_MultiLEP_3Lep_36invfb</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1Analysis__ATLAS__13TeV__MultiLEP__confnote__36invfb" prot="public">Gambit::ColliderBit::Analysis_ATLAS_13TeV_MultiLEP_confnote_36invfb</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1Analysis__ATLAS__13TeV__MultiLEP__strong__139invfb" prot="public">Gambit::ColliderBit::Analysis_ATLAS_13TeV_MultiLEP_strong_139invfb</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1Analysis__ATLAS__13TeV__PhotonGGM__36invfb" prot="public">Gambit::ColliderBit::Analysis_ATLAS_13TeV_PhotonGGM_36invfb</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1Analysis__ATLAS__13TeV__RJ3L__2Lep2Jets__36invfb" prot="public">Gambit::ColliderBit::Analysis_ATLAS_13TeV_RJ3L_2Lep2Jets_36invfb</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1Analysis__ATLAS__13TeV__RJ3L__3Lep__36invfb" prot="public">Gambit::ColliderBit::Analysis_ATLAS_13TeV_RJ3L_3Lep_36invfb</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1Analysis__ATLAS__13TeV__RJ3L__lowmass__36invfb" prot="public">Gambit::ColliderBit::Analysis_ATLAS_13TeV_RJ3L_lowmass_36invfb</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1Analysis__ATLAS__13TeV__ZGammaGrav__CONFNOTE__80invfb" prot="public">Gambit::ColliderBit::Analysis_ATLAS_13TeV_ZGammaGrav_CONFNOTE_80invfb</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1Analysis__ATLAS__7TeV__1OR2LEPStop__4__7invfb" prot="public">Gambit::ColliderBit::Analysis_ATLAS_7TeV_1OR2LEPStop_4_7invfb</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1Analysis__ATLAS__7TeV__2LEPStop__4__7invfb" prot="public">Gambit::ColliderBit::Analysis_ATLAS_7TeV_2LEPStop_4_7invfb</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1Analysis__ATLAS__8TeV__0LEP__20invfb" prot="public">Gambit::ColliderBit::Analysis_ATLAS_8TeV_0LEP_20invfb</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1Analysis__ATLAS__8TeV__0LEPStop__20invfb" prot="public">Gambit::ColliderBit::Analysis_ATLAS_8TeV_0LEPStop_20invfb</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1Analysis__ATLAS__8TeV__1LEPbb__20invfb" prot="public">Gambit::ColliderBit::Analysis_ATLAS_8TeV_1LEPbb_20invfb</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1Analysis__ATLAS__8TeV__1LEPStop__20invfb" prot="public">Gambit::ColliderBit::Analysis_ATLAS_8TeV_1LEPStop_20invfb</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1Analysis__ATLAS__8TeV__2bStop__20invfb" prot="public">Gambit::ColliderBit::Analysis_ATLAS_8TeV_2bStop_20invfb</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1Analysis__ATLAS__8TeV__2LEPEW__20invfb" prot="public">Gambit::ColliderBit::Analysis_ATLAS_8TeV_2LEPEW_20invfb</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1Analysis__ATLAS__8TeV__2LEPStop__20invfb" prot="public">Gambit::ColliderBit::Analysis_ATLAS_8TeV_2LEPStop_20invfb</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1Analysis__ATLAS__8TeV__3LEPEW__20invfb" prot="public">Gambit::ColliderBit::Analysis_ATLAS_8TeV_3LEPEW_20invfb</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1Analysis__CMS__13TeV__0LEP__137invfb" prot="public">Gambit::ColliderBit::Analysis_CMS_13TeV_0LEP_137invfb</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1Analysis__CMS__13TeV__0LEP__13invfb" prot="public">Gambit::ColliderBit::Analysis_CMS_13TeV_0LEP_13invfb</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1Analysis__CMS__13TeV__0LEP__36invfb" prot="public">Gambit::ColliderBit::Analysis_CMS_13TeV_0LEP_36invfb</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1Analysis__CMS__13TeV__1LEPbb__36invfb" prot="public">Gambit::ColliderBit::Analysis_CMS_13TeV_1LEPbb_36invfb</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1Analysis__CMS__13TeV__1LEPStop__36invfb" prot="public">Gambit::ColliderBit::Analysis_CMS_13TeV_1LEPStop_36invfb</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1Analysis__CMS__13TeV__1Photon1Lepton__36invfb" prot="public">Gambit::ColliderBit::Analysis_CMS_13TeV_1Photon1Lepton_36invfb</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1Analysis__CMS__13TeV__1Photon1Lepton__emu__combined__36invfb" prot="public">Gambit::ColliderBit::Analysis_CMS_13TeV_1Photon1Lepton_emu_combined_36invfb</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1Analysis__CMS__13TeV__2LEPsoft__36invfb" prot="public">Gambit::ColliderBit::Analysis_CMS_13TeV_2LEPsoft_36invfb</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1Analysis__CMS__13TeV__2LEPsoft__36invfb__nocovar" prot="public">Gambit::ColliderBit::Analysis_CMS_13TeV_2LEPsoft_36invfb_nocovar</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1Analysis__CMS__13TeV__2LEPsoft__stop__36invfb" prot="public">Gambit::ColliderBit::Analysis_CMS_13TeV_2LEPsoft_stop_36invfb</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1Analysis__CMS__13TeV__2LEPsoft__stop__36invfb__nocovar" prot="public">Gambit::ColliderBit::Analysis_CMS_13TeV_2LEPsoft_stop_36invfb_nocovar</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1Analysis__CMS__13TeV__2LEPStop__36invfb" prot="public">Gambit::ColliderBit::Analysis_CMS_13TeV_2LEPStop_36invfb</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1Analysis__CMS__13TeV__2OSLEP__36invfb" prot="public">Gambit::ColliderBit::Analysis_CMS_13TeV_2OSLEP_36invfb</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1Analysis__CMS__13TeV__2OSLEP__36invfb__nocovar" prot="public">Gambit::ColliderBit::Analysis_CMS_13TeV_2OSLEP_36invfb_nocovar</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1Analysis__CMS__13TeV__2OSLEP__chargino__stop__36invfb" prot="public">Gambit::ColliderBit::Analysis_CMS_13TeV_2OSLEP_chargino_stop_36invfb</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1Analysis__CMS__13TeV__2OSLEP__confnote__36invfb" prot="public">Gambit::ColliderBit::Analysis_CMS_13TeV_2OSLEP_confnote_36invfb</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1Analysis__CMS__13TeV__2OSLEP__for__chargino__36invfb" prot="public">Gambit::ColliderBit::Analysis_CMS_13TeV_2OSLEP_for_chargino_36invfb</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1Analysis__CMS__13TeV__2OSLEP__for__stop__36invfb" prot="public">Gambit::ColliderBit::Analysis_CMS_13TeV_2OSLEP_for_stop_36invfb</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1Analysis__CMS__13TeV__2Photon__GMSB__36invfb" prot="public">Gambit::ColliderBit::Analysis_CMS_13TeV_2Photon_GMSB_36invfb</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1Analysis__CMS__13TeV__2SSLEP__Stop__137invfb" prot="public">Gambit::ColliderBit::Analysis_CMS_13TeV_2SSLEP_Stop_137invfb</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1Analysis__CMS__13TeV__2SSLEP__Stop__36invfb" prot="public">Gambit::ColliderBit::Analysis_CMS_13TeV_2SSLEP_Stop_36invfb</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1Analysis__CMS__13TeV__2SSLEP__Stop__exclusive__36invfb" prot="public">Gambit::ColliderBit::Analysis_CMS_13TeV_2SSLEP_Stop_exclusive_36invfb</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1Analysis__CMS__13TeV__2SSLEP__Stop__inclusive__36invfb" prot="public">Gambit::ColliderBit::Analysis_CMS_13TeV_2SSLEP_Stop_inclusive_36invfb</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1Analysis__CMS__13TeV__MONOJET__36invfb" prot="public">Gambit::ColliderBit::Analysis_CMS_13TeV_MONOJET_36invfb</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1Analysis__CMS__13TeV__MultiLEP__2SSLep__36invfb" prot="public">Gambit::ColliderBit::Analysis_CMS_13TeV_MultiLEP_2SSLep_36invfb</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1Analysis__CMS__13TeV__MultiLEP__36invfb" prot="public">Gambit::ColliderBit::Analysis_CMS_13TeV_MultiLEP_36invfb</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1Analysis__CMS__13TeV__MultiLEP__3Lep__36invfb" prot="public">Gambit::ColliderBit::Analysis_CMS_13TeV_MultiLEP_3Lep_36invfb</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1Analysis__CMS__13TeV__MultiLEP__Full__2SSLep__36invfb" prot="public">Gambit::ColliderBit::Analysis_CMS_13TeV_MultiLEP_Full_2SSLep_36invfb</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1Analysis__CMS__13TeV__MultiLEP__Full__36invfb" prot="public">Gambit::ColliderBit::Analysis_CMS_13TeV_MultiLEP_Full_36invfb</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1Analysis__CMS__13TeV__MultiLEP__Full__3Lep__36invfb" prot="public">Gambit::ColliderBit::Analysis_CMS_13TeV_MultiLEP_Full_3Lep_36invfb</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1Analysis__CMS__13TeV__MultiLEP__Full__3Lep__rebinned__36invfb" prot="public">Gambit::ColliderBit::Analysis_CMS_13TeV_MultiLEP_Full_3Lep_rebinned_36invfb</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1Analysis__CMS__13TeV__Photon__GMSB__36invfb" prot="public">Gambit::ColliderBit::Analysis_CMS_13TeV_Photon_GMSB_36invfb</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1Analysis__CMS__8TeV__1LEPDMTOP__20invfb" prot="public">Gambit::ColliderBit::Analysis_CMS_8TeV_1LEPDMTOP_20invfb</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1Analysis__CMS__8TeV__2LEPDMTOP__20invfb" prot="public">Gambit::ColliderBit::Analysis_CMS_8TeV_2LEPDMTOP_20invfb</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1Analysis__CMS__8TeV__MONOJET__20invfb" prot="public">Gambit::ColliderBit::Analysis_CMS_8TeV_MONOJET_20invfb</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1Analysis__CMS__8TeV__MultiLEP__20invfb" prot="public">Gambit::ColliderBit::Analysis_CMS_8TeV_MultiLEP_20invfb</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1Analysis__CMS__8TeV__MultiLEP__3Lep__20invfb" prot="public">Gambit::ColliderBit::Analysis_CMS_8TeV_MultiLEP_3Lep_20invfb</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1Analysis__CMS__8TeV__MultiLEP__4Lep__20invfb" prot="public">Gambit::ColliderBit::Analysis_CMS_8TeV_MultiLEP_4Lep_20invfb</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1Analysis__Covariance" prot="public">Gambit::ColliderBit::Analysis_Covariance</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1Analysis__Minimum" prot="public">Gambit::ColliderBit::Analysis_Minimum</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1AnalysisContainer" prot="public">Gambit::ColliderBit::AnalysisContainer</innerclass>
    <innerclass refid="structGambit_1_1ColliderBit_1_1AnalysisData" prot="public">Gambit::ColliderBit::AnalysisData</innerclass>
    <innerclass refid="structGambit_1_1ColliderBit_1_1AnalysisLogLikes" prot="public">Gambit::ColliderBit::AnalysisLogLikes</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1AnalysisUtil" prot="public">Gambit::ColliderBit::AnalysisUtil</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1BaseCollider" prot="public">Gambit::ColliderBit::BaseCollider</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1BaseDetector" prot="public">Gambit::ColliderBit::BaseDetector</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1BaseLimitContainer" prot="public">Gambit::ColliderBit::BaseLimitContainer</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1BuckFast" prot="public">Gambit::ColliderBit::BuckFast</innerclass>
    <innerclass refid="structGambit_1_1ColliderBit_1_1convergence__settings" prot="public">Gambit::ColliderBit::convergence_settings</innerclass>
    <innerclass refid="structGambit_1_1ColliderBit_1_1Cutflow" prot="public">Gambit::ColliderBit::Cutflow</innerclass>
    <innerclass refid="structGambit_1_1ColliderBit_1_1Cutflows" prot="public">Gambit::ColliderBit::Cutflows</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1DMEFT__analysis__info" prot="public">Gambit::ColliderBit::DMEFT_analysis_info</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1EventCounter" prot="public">Gambit::ColliderBit::EventCounter</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1ImageLimit" prot="public">Gambit::ColliderBit::ImageLimit</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1L3ChargedGauginoSmallDeltaMAnySneutrinoLimitAt188pt6GeV" prot="public">Gambit::ColliderBit::L3ChargedGauginoSmallDeltaMAnySneutrinoLimitAt188pt6GeV</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1L3ChargedGauginoSmallDeltaMWithHeavySneutrinoLimitAt188pt6GeV" prot="public">Gambit::ColliderBit::L3ChargedGauginoSmallDeltaMWithHeavySneutrinoLimitAt188pt6GeV</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1L3ChargedHiggsinoSmallDeltaMLimitAt188pt6GeV" prot="public">Gambit::ColliderBit::L3ChargedHiggsinoSmallDeltaMLimitAt188pt6GeV</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1L3CharginoAllChannelsLimitAt188pt6GeV" prot="public">Gambit::ColliderBit::L3CharginoAllChannelsLimitAt188pt6GeV</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1L3CharginoLeptonicLimitAt188pt6GeV" prot="public">Gambit::ColliderBit::L3CharginoLeptonicLimitAt188pt6GeV</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1L3NeutralinoAllChannelsLimitAt188pt6GeV" prot="public">Gambit::ColliderBit::L3NeutralinoAllChannelsLimitAt188pt6GeV</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1L3NeutralinoLeptonicLimitAt188pt6GeV" prot="public">Gambit::ColliderBit::L3NeutralinoLeptonicLimitAt188pt6GeV</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1L3SelectronLimitAt205GeV" prot="public">Gambit::ColliderBit::L3SelectronLimitAt205GeV</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1L3SmuonLimitAt205GeV" prot="public">Gambit::ColliderBit::L3SmuonLimitAt205GeV</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1L3StauLimitAt205GeV" prot="public">Gambit::ColliderBit::L3StauLimitAt205GeV</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1LineSegment" prot="public">Gambit::ColliderBit::LineSegment</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1MC__convergence__checker" prot="public">Gambit::ColliderBit::MC_convergence_checker</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1MC__xsec__container" prot="public">Gambit::ColliderBit::MC_xsec_container</innerclass>
    <innerclass refid="structGambit_1_1ColliderBit_1_1MCLoopInfo" prot="public">Gambit::ColliderBit::MCLoopInfo</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1MT2" prot="public">Gambit::ColliderBit::MT2</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1OPALCharginoAllChannelsLimitAt208GeV" prot="public">Gambit::ColliderBit::OPALCharginoAllChannelsLimitAt208GeV</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1OPALCharginoHadronicLimitAt208GeV" prot="public">Gambit::ColliderBit::OPALCharginoHadronicLimitAt208GeV</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1OPALCharginoLeptonicLimitAt208GeV" prot="public">Gambit::ColliderBit::OPALCharginoLeptonicLimitAt208GeV</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1OPALCharginoSemiLeptonicLimitAt208GeV" prot="public">Gambit::ColliderBit::OPALCharginoSemiLeptonicLimitAt208GeV</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1OPALDegenerateCharginoLimitAt208GeV" prot="public">Gambit::ColliderBit::OPALDegenerateCharginoLimitAt208GeV</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1OPALNeutralinoHadronicLimitAt208GeV" prot="public">Gambit::ColliderBit::OPALNeutralinoHadronicLimitAt208GeV</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1OPALNeutralinoHadronicViaZLimitAt208GeV" prot="public">Gambit::ColliderBit::OPALNeutralinoHadronicViaZLimitAt208GeV</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1P2" prot="public">Gambit::ColliderBit::P2</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1Perf__Plot" prot="public">Gambit::ColliderBit::Perf_Plot</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1PID__pair__xsec__container" prot="public">Gambit::ColliderBit::PID_pair_xsec_container</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1process__xsec__container" prot="public">Gambit::ColliderBit::process_xsec_container</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1Py8Collider" prot="public">Gambit::ColliderBit::Py8Collider</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1SetHooks" prot="public">Gambit::ColliderBit::SetHooks</innerclass>
    <innerclass refid="structGambit_1_1ColliderBit_1_1SignalRegionData" prot="public">Gambit::ColliderBit::SignalRegionData</innerclass>
    <innerclass refid="classGambit_1_1ColliderBit_1_1xsec__container" prot="public">Gambit::ColliderBit::xsec_container</innerclass>
    <innernamespace refid="namespaceGambit_1_1ColliderBit_1_1ATLAS">Gambit::ColliderBit::ATLAS</innernamespace>
    <innernamespace refid="namespaceGambit_1_1ColliderBit_1_1CMS">Gambit::ColliderBit::CMS</innernamespace>
    <innernamespace refid="namespaceGambit_1_1ColliderBit_1_1EventConversion">Gambit::ColliderBit::EventConversion</innernamespace>
      <sectiondef kind="user-defined">
      <header>Converters to/from Pythia8&apos;s native 4-vector</header>
      <memberdef kind="function" id="Py8Utils_8hpp_1a284f3bcf0df7a2bcf7747dfd6d4c566a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Vec4T</type>
          </param>
        </templateparamlist>
        <type>FJNS::PseudoJet</type>
        <definition>FJNS::PseudoJet Gambit::ColliderBit::mk_pseudojet</definition>
        <argsstring>(const Vec4T &amp;p)</argsstring>
        <name>mk_pseudojet</name>
        <qualifiedname>Gambit::ColliderBit::mk_pseudojet</qualifiedname>
        <param>
          <type>const Vec4T &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/colliders/Pythia8/Py8Utils.hpp" line="39" column="28" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/colliders/Pythia8/Py8Utils.hpp" bodystart="39" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="Py8Utils_8hpp_1a9477748f42e43699af3c241005f484c0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Vec4T</type>
          </param>
        </templateparamlist>
        <type>HEPUtils::P4</type>
        <definition>HEPUtils::P4 Gambit::ColliderBit::mk_p4</definition>
        <argsstring>(const Vec4T &amp;p)</argsstring>
        <name>mk_p4</name>
        <qualifiedname>Gambit::ColliderBit::mk_p4</qualifiedname>
        <param>
          <type>const Vec4T &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/colliders/Pythia8/Py8Utils.hpp" line="45" column="25" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/colliders/Pythia8/Py8Utils.hpp" bodystart="45" bodyend="50"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Detailed Pythia8 event record walking/mangling functions</header>
      <memberdef kind="function" id="Py8Utils_8hpp_1afe3f3167e3fd6c6a40c811daf8049a9e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename EventT</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Gambit::ColliderBit::fromBottom</definition>
        <argsstring>(int n, const EventT &amp;evt)</argsstring>
        <name>fromBottom</name>
        <qualifiedname>Gambit::ColliderBit::fromBottom</qualifiedname>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const EventT &amp;</type>
          <declname>evt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="todo_1_todo000035"><xreftitle>Todo</xreftitle><xrefdescription><para>Rewrite using the Pythia &gt; 8.176 particle-based methods </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
<para><xrefsect id="todo_1_todo000036"><xreftitle>Todo</xreftitle><xrefdescription><para>What about partonic decays? </para>
</xrefdescription></xrefsect></para>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/colliders/Pythia8/Py8Utils.hpp" line="61" column="17" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/colliders/Pythia8/Py8Utils.hpp" bodystart="61" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="Py8Utils_8hpp_1aabbafbbb0e8d2bbba0ed8f66cd799471" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename EventT</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Gambit::ColliderBit::fromTau</definition>
        <argsstring>(int n, const EventT &amp;evt)</argsstring>
        <name>fromTau</name>
        <qualifiedname>Gambit::ColliderBit::fromTau</qualifiedname>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const EventT &amp;</type>
          <declname>evt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="todo_1_todo000037"><xreftitle>Todo</xreftitle><xrefdescription><para>Rewrite using the Pythia &gt; 8.176 particle-based methods </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/colliders/Pythia8/Py8Utils.hpp" line="78" column="17" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/colliders/Pythia8/Py8Utils.hpp" bodystart="78" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="Py8Utils_8hpp_1aa7eb6fa6f85fb094a6b3eccf87c51913" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename EventT</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Gambit::ColliderBit::fromHadron</definition>
        <argsstring>(int n, const EventT &amp;evt)</argsstring>
        <name>fromHadron</name>
        <qualifiedname>Gambit::ColliderBit::fromHadron</qualifiedname>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const EventT &amp;</type>
          <declname>evt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="todo_1_todo000038"><xreftitle>Todo</xreftitle><xrefdescription><para>Rewrite using the Pythia &gt; 8.176 particle-based methods </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/colliders/Pythia8/Py8Utils.hpp" line="94" column="17" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/colliders/Pythia8/Py8Utils.hpp" bodystart="94" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="Py8Utils_8hpp_1ae3d158ade9c19939449629a690a26610" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename EventT</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Gambit::ColliderBit::isFinalB</definition>
        <argsstring>(int n, const EventT &amp;evt)</argsstring>
        <name>isFinalB</name>
        <qualifiedname>Gambit::ColliderBit::isFinalB</qualifiedname>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const EventT &amp;</type>
          <declname>evt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/colliders/Pythia8/Py8Utils.hpp" line="111" column="17" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/colliders/Pythia8/Py8Utils.hpp" bodystart="111" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="Py8Utils_8hpp_1a937ee11c1f4fd150a8a53fab300f6e51" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename EventT</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Gambit::ColliderBit::isFinalTau</definition>
        <argsstring>(int n, const EventT &amp;evt)</argsstring>
        <name>isFinalTau</name>
        <qualifiedname>Gambit::ColliderBit::isFinalTau</qualifiedname>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const EventT &amp;</type>
          <declname>evt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/colliders/Pythia8/Py8Utils.hpp" line="129" column="17" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/colliders/Pythia8/Py8Utils.hpp" bodystart="129" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="Py8Utils_8hpp_1a8f43b6ae7aa38fd8b03554932a5758e6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename EventT</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Gambit::ColliderBit::isParton</definition>
        <argsstring>(int n, const EventT &amp;evt)</argsstring>
        <name>isParton</name>
        <qualifiedname>Gambit::ColliderBit::isParton</qualifiedname>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const EventT &amp;</type>
          <declname>evt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/colliders/Pythia8/Py8Utils.hpp" line="144" column="17" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/colliders/Pythia8/Py8Utils.hpp" bodystart="144" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="Py8Utils_8hpp_1a7c56591a9035aa42edeaff0dfdee3072" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename EventT</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Gambit::ColliderBit::isFinalParton</definition>
        <argsstring>(int n, const EventT &amp;evt)</argsstring>
        <name>isFinalParton</name>
        <qualifiedname>Gambit::ColliderBit::isFinalParton</qualifiedname>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const EventT &amp;</type>
          <declname>evt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/colliders/Pythia8/Py8Utils.hpp" line="156" column="17" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/colliders/Pythia8/Py8Utils.hpp" bodystart="156" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="Py8Utils_8hpp_1a554fdff74b49040712eaa953a7d17e15" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename EventT</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Gambit::ColliderBit::isFinalPhoton</definition>
        <argsstring>(int n, const EventT &amp;evt)</argsstring>
        <name>isFinalPhoton</name>
        <qualifiedname>Gambit::ColliderBit::isFinalPhoton</qualifiedname>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const EventT &amp;</type>
          <declname>evt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/colliders/Pythia8/Py8Utils.hpp" line="172" column="17" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/colliders/Pythia8/Py8Utils.hpp" bodystart="172" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="Py8Utils_8hpp_1a6685729995990d7c406e1c9fadb9fcc5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename EventT</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Gambit::ColliderBit::isFinalLepton</definition>
        <argsstring>(int n, const EventT &amp;evt)</argsstring>
        <name>isFinalLepton</name>
        <qualifiedname>Gambit::ColliderBit::isFinalLepton</qualifiedname>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const EventT &amp;</type>
          <declname>evt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/colliders/Pythia8/Py8Utils.hpp" line="185" column="17" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/colliders/Pythia8/Py8Utils.hpp" bodystart="185" bodyend="194"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="lep__mssm__xsecs_8hpp_1a989dc93c7fb84645e72819a5986ab7a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::get_sigma_ee_ll</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result, const double sqrts, const int generation, const int l_chirality, const int lbar_chirality, const double gtol, const double ftol, const bool gpt_error, const bool fpt_error, const Spectrum &amp;spec, const double gammaZ, const bool l_are_gauge_es)</argsstring>
        <name>get_sigma_ee_ll</name>
        <qualifiedname>Gambit::ColliderBit::get_sigma_ee_ll</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>sqrts</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>generation</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>l_chirality</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>lbar_chirality</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>gtol</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>ftol</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>gpt_error</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>fpt_error</declname>
        </param>
        <param>
          <type>const Spectrum &amp;</type>
          <declname>spec</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>gammaZ</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>l_are_gauge_es</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>High-level cross section routines.</para>
<para>Retrieve the production cross-section at an e+e- collider for slepton pairs. If l_are_gauge_es = T, then l(bar)_chirality = 1 =&gt; (anti-)left-type slepton = 2 =&gt; (anti-)right-type slepton If l_are_gauge_es = F, then l(bar)_chirality = 1 =&gt; (anti-)slepton is lightest family state = 2 =&gt; (anti-)slepton is heaviest family state</para>
<para>Retrieve the production cross-section at an e+e- collider for slepton pairs. If l_are_gauge_es = T, then l(bar)_chirality = 1 =&gt; (anti-)left-type slepton = 2 =&gt; (anti-)right-type slepton If l_are_gauge_es = F, then l(bar)_chirality = 1 =&gt; (anti-)slepton is lightest family state = 2 =&gt; (anti-)slepton is heaviest family state </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/lep_mssm_xsecs.cpp" line="49" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/lep_mssm_xsecs.cpp" bodystart="49" bodyend="147" declfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/lep_mssm_xsecs.hpp" declline="65" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="lep__mssm__xsecs_8hpp_1a4ec008f96435ebe11b78eca1aa2126f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::get_sigma_ee_chi00</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result, const double sqrts, const int chi_first, const int chi_second, const double tol, const bool pt_error, const Spectrum &amp;spec, const double gammaZ)</argsstring>
        <name>get_sigma_ee_chi00</name>
        <qualifiedname>Gambit::ColliderBit::get_sigma_ee_chi00</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>sqrts</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>chi_first</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>chi_second</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>tol</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>pt_error</declname>
        </param>
        <param>
          <type>const Spectrum &amp;</type>
          <declname>spec</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>gammaZ</declname>
        </param>
        <briefdescription>
<para>Retrieve the production cross-section at an e+e- collider for neutralino pairs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/lep_mssm_xsecs.cpp" line="151" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/lep_mssm_xsecs.cpp" bodystart="151" bodyend="216" declfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/lep_mssm_xsecs.hpp" declline="69" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="lep__mssm__xsecs_8hpp_1abbf01c906a8961538f1ea4f79d56fcec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::get_sigma_ee_chipm</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result, const double sqrts, const int chi_plus, const int chi_minus, const double tol, const bool pt_error, const Spectrum &amp;spec, const double gammaZ)</argsstring>
        <name>get_sigma_ee_chipm</name>
        <qualifiedname>Gambit::ColliderBit::get_sigma_ee_chipm</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>sqrts</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>chi_plus</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>chi_minus</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>tol</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>pt_error</declname>
        </param>
        <param>
          <type>const Spectrum &amp;</type>
          <declname>spec</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>gammaZ</declname>
        </param>
        <briefdescription>
<para>Retrieve the production cross-section at an e+e- collider for chargino pairs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/lep_mssm_xsecs.cpp" line="219" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/lep_mssm_xsecs.cpp" bodystart="219" bodyend="289" declfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/lep_mssm_xsecs.hpp" declline="72" declcolumn="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="lep__mssm__xsecs_8hpp_1a9669178acc1b60140c705ef7749b24db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gambit::ColliderBit::xsec_sleislej</definition>
        <argsstring>(int pid1, int pid2, double sqrts, double m1, double m2, MixMatrix F, MixMatrix N, const double mN[4], double alpha, double mZ, double gZ, double sin2thetaW, bool warn_on_CP_violating_masses=true)</argsstring>
        <name>xsec_sleislej</name>
        <qualifiedname>Gambit::ColliderBit::xsec_sleislej</qualifiedname>
        <param>
          <type>int</type>
          <declname>pid1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pid2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>sqrts</declname>
        </param>
        <param>
          <type>double</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>m2</declname>
        </param>
        <param>
          <type>MixMatrix</type>
          <declname>F</declname>
        </param>
        <param>
          <type>MixMatrix</type>
          <declname>N</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>mN</declname>
          <array>[4]</array>
        </param>
        <param>
          <type>double</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>double</type>
          <declname>mZ</declname>
        </param>
        <param>
          <type>double</type>
          <declname>gZ</declname>
        </param>
        <param>
          <type>double</type>
          <declname>sin2thetaW</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>warn_on_CP_violating_masses</declname>
          <defname>CP_lock</defname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Low-level cross section routines.</para>
<para>Cross section [pb] for <formula id="10">$ e^+e^- -&gt; \tilde l_i \tilde l_j^* $</formula> To use, call SLHA2BFM first on SLHA mixing matrices constructed as a vector of vectors</para>
<para>Cross section [pb] for <formula id="14">$e^+e^- -&gt; \tilde l_i \tilde l_j^*$</formula> To use, call SLHA2BFM first on SLHA mixing matrices constructed as a vector of vectors </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/lep_mssm_xsecs.cpp" line="355" column="12" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/lep_mssm_xsecs.cpp" bodystart="355" bodyend="521" declfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/lep_mssm_xsecs.hpp" declline="80" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="lep__mssm__xsecs_8hpp_1a259260adac6ba1e9f35d2bdac43d0daa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gambit::ColliderBit::xsec_neuineuj</definition>
        <argsstring>(int pid1, int pid2, double sqrts, double m1, double m2, MixMatrix N, const double mS[2], double tanb, double alpha, double mZ, double gZ, double sin2thetaW)</argsstring>
        <name>xsec_neuineuj</name>
        <qualifiedname>Gambit::ColliderBit::xsec_neuineuj</qualifiedname>
        <param>
          <type>int</type>
          <declname>pid1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pid2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>sqrts</declname>
        </param>
        <param>
          <type>double</type>
          <declname>m1</declname>
          <defname>mi</defname>
        </param>
        <param>
          <type>double</type>
          <declname>m2</declname>
          <defname>mj</defname>
        </param>
        <param>
          <type>MixMatrix</type>
          <declname>N</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>mS</declname>
          <array>[2]</array>
        </param>
        <param>
          <type>double</type>
          <declname>tanb</declname>
        </param>
        <param>
          <type>double</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>double</type>
          <declname>mZ</declname>
        </param>
        <param>
          <type>double</type>
          <declname>gZ</declname>
        </param>
        <param>
          <type>double</type>
          <declname>sin2thetaW</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Cross section [pb] for <formula id="11">$ e^+e^- -&gt; \tilde\chi^0_i \tilde\chi^0_j $</formula> Masses mi and mj for the neutralinos are signed. mS are the selectron masses (left = 0, right = 1). Warning! BFM uses inverted <formula id="3">$\tan\beta$</formula>! Use tanb = 1 / tanb in converting from SLHA.</para>
<para>Cross section [pb] for <formula id="15">$e^+e^- -&gt; \tilde\chi^0_i \tilde\chi^0_j$</formula> Masses mi and mj for the neutralinos are signed. mS are the selectron masses (left = 0, right = 1). Warning! BFM uses inverted <formula id="3">$\tan\beta$</formula>! Use tanb = 1 / tanb in converting from SLHA. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/lep_mssm_xsecs.cpp" line="526" column="12" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/lep_mssm_xsecs.cpp" bodystart="526" bodyend="619" declfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/lep_mssm_xsecs.hpp" declline="86" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="lep__mssm__xsecs_8hpp_1a0a45ecc9f0425ac00881ccbee9667570" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gambit::ColliderBit::xsec_chaichaj</definition>
        <argsstring>(int pid1, int pid2, double sqrts, double m1, double m2, MixMatrix V, MixMatrix U, double msn, double alpha, double mZ, double gZ, double sin2thetaW)</argsstring>
        <name>xsec_chaichaj</name>
        <qualifiedname>Gambit::ColliderBit::xsec_chaichaj</qualifiedname>
        <param>
          <type>int</type>
          <declname>pid1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pid2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>sqrts</declname>
        </param>
        <param>
          <type>double</type>
          <declname>m1</declname>
          <defname>mi</defname>
        </param>
        <param>
          <type>double</type>
          <declname>m2</declname>
          <defname>mj</defname>
        </param>
        <param>
          <type>MixMatrix</type>
          <declname>V</declname>
        </param>
        <param>
          <type>MixMatrix</type>
          <declname>U</declname>
        </param>
        <param>
          <type>double</type>
          <declname>msn</declname>
          <defname>ms</defname>
        </param>
        <param>
          <type>double</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>double</type>
          <declname>mZ</declname>
        </param>
        <param>
          <type>double</type>
          <declname>gZ</declname>
        </param>
        <param>
          <type>double</type>
          <declname>sin2thetaW</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Cross section [pb] for <formula id="12">$ e^+e^- -&gt; \tilde\chi^+_i \tilde\chi^-_j $</formula> Masses mi and mj for the charginos are signed. msn is electron sneutrino mass.</para>
<para>Cross section [pb] for <formula id="16">$e^+e^- -&gt; \tilde\chi^+_i \tilde\chi^-_j$</formula> Masses mi and mj for the charginos are signed. msn is electron sneutrino mass. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/lep_mssm_xsecs.cpp" line="624" column="12" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/lep_mssm_xsecs.cpp" bodystart="624" bodyend="708" declfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/lep_mssm_xsecs.hpp" declline="90" declcolumn="12"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="lep__mssm__xsecs_8hpp_1a2d9bce10091f76de9afa9815f1cce2bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::SLHA2BFM_NN</definition>
        <argsstring>(MixMatrix &amp;NN, double tanb, double sin2thetaW)</argsstring>
        <name>SLHA2BFM_NN</name>
        <qualifiedname>Gambit::ColliderBit::SLHA2BFM_NN</qualifiedname>
        <param>
          <type>MixMatrix &amp;</type>
          <declname>NN</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tanb</declname>
        </param>
        <param>
          <type>double</type>
          <declname>sin2thetaW</declname>
        </param>
        <briefdescription>
<para>Functions to convert mass matrices between SLHA and BFM conventions ////////////////////////////////////////////////////////////////////. </para>
        </briefdescription>
        <detaileddescription>
<para>Conversion between SLHA and BFM conventions. <formula id="3">$\tan\beta$</formula> is as per SLHA.</para>
<para>Converts a neutralino mixing matrix in SLHA conventions to BFM conventions, <formula id="3">$\tan\beta$</formula> is as defined in SLHA </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/lep_mssm_xsecs.cpp" line="717" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/lep_mssm_xsecs.cpp" bodystart="717" bodyend="732" declfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/lep_mssm_xsecs.hpp" declline="96" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="lep__mssm__xsecs_8hpp_1a185a033e85266930b5e6220b3a149204" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::SLHA2BFM_VV</definition>
        <argsstring>(MixMatrix &amp;VV)</argsstring>
        <name>SLHA2BFM_VV</name>
        <qualifiedname>Gambit::ColliderBit::SLHA2BFM_VV</qualifiedname>
        <param>
          <type>MixMatrix &amp;</type>
          <declname>VV</declname>
        </param>
        <briefdescription>
<para>Converts the chargino mixing matrix V in SLHA conventions to BFM conventions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/lep_mssm_xsecs.cpp" line="735" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/lep_mssm_xsecs.cpp" bodystart="735" bodyend="743" declfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/lep_mssm_xsecs.hpp" declline="97" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="lep__mssm__xsecs_8hpp_1a0f8614fd96d901159ac0d80064ba1f33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::BFM2SLHA_NN</definition>
        <argsstring>(MixMatrix &amp;NN, double tanb, double sin2thetaW)</argsstring>
        <name>BFM2SLHA_NN</name>
        <qualifiedname>Gambit::ColliderBit::BFM2SLHA_NN</qualifiedname>
        <param>
          <type>MixMatrix &amp;</type>
          <declname>NN</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tanb</declname>
        </param>
        <param>
          <type>double</type>
          <declname>sin2thetaW</declname>
        </param>
        <briefdescription>
<para>Converts a neutralino mixing matrix in BFM conventions to SLHA conventions, <formula id="3">$\tan\beta$</formula> is as defined in SLHA. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/lep_mssm_xsecs.cpp" line="746" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/lep_mssm_xsecs.cpp" bodystart="746" bodyend="761" declfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/lep_mssm_xsecs.hpp" declline="98" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="lep__mssm__xsecs_8hpp_1a2a49411999b394113fffcb395bab148f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::BFM2SLHA_VV</definition>
        <argsstring>(MixMatrix &amp;VV)</argsstring>
        <name>BFM2SLHA_VV</name>
        <qualifiedname>Gambit::ColliderBit::BFM2SLHA_VV</qualifiedname>
        <param>
          <type>MixMatrix &amp;</type>
          <declname>VV</declname>
        </param>
        <briefdescription>
<para>Converts the chargino mixing matrix V in BFM conventions to SLHA conventions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/lep_mssm_xsecs.cpp" line="764" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/lep_mssm_xsecs.cpp" bodystart="764" bodyend="767" declfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/lep_mssm_xsecs.hpp" declline="99" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="lep__mssm__xsecs_8hpp_1a2791d0121d64b32b19da2f1129efdf4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MixMatrix</type>
        <definition>MixMatrix Gambit::ColliderBit::multiply</definition>
        <argsstring>(MixMatrix A, MixMatrix B)</argsstring>
        <name>multiply</name>
        <qualifiedname>Gambit::ColliderBit::multiply</qualifiedname>
        <param>
          <type>MixMatrix</type>
          <declname>A</declname>
        </param>
        <param>
          <type>MixMatrix</type>
          <declname>B</declname>
        </param>
        <briefdescription>
<para>Helper function to multiply matrices. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/lep_mssm_xsecs.cpp" line="770" column="15" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/lep_mssm_xsecs.cpp" bodystart="770" bodyend="782" declfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/lep_mssm_xsecs.hpp" declline="100" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="lep__mssm__xsecs_8hpp_1ab5acef007a85c7973d4c6df87a830cc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MixMatrix</type>
        <definition>MixMatrix Gambit::ColliderBit::transpose</definition>
        <argsstring>(MixMatrix A)</argsstring>
        <name>transpose</name>
        <qualifiedname>Gambit::ColliderBit::transpose</qualifiedname>
        <param>
          <type>MixMatrix</type>
          <declname>A</declname>
        </param>
        <briefdescription>
<para>Helper function to find matrix transpose. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/lep_mssm_xsecs.cpp" line="785" column="15" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/lep_mssm_xsecs.cpp" bodystart="785" bodyend="797" declfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/lep_mssm_xsecs.hpp" declline="101" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="lep__mssm__xsecs_8hpp_1ad77ec694b2787bf548b6e9a9c62a259c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::print</definition>
        <argsstring>(MixMatrix A)</argsstring>
        <name>print</name>
        <qualifiedname>Gambit::ColliderBit::print</qualifiedname>
        <param>
          <type>MixMatrix</type>
          <declname>A</declname>
        </param>
        <briefdescription>
<para>Helper function to print a matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/lep_mssm_xsecs.cpp" line="800" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/lep_mssm_xsecs.cpp" bodystart="800" bodyend="810" declfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/lep_mssm_xsecs.hpp" declline="102" declcolumn="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>External operators and string representation for P2</header>
      <memberdef kind="function" id="PointsAndLines_8hpp_1a69b1b1b5ddf477ada785cd4b95d6b946" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGambit_1_1ColliderBit_1_1P2" kindref="compound">P2</ref></type>
        <definition>P2 Gambit::ColliderBit::operator+</definition>
        <argsstring>(const P2 &amp;a, const P2 &amp;b)</argsstring>
        <name>operator+</name>
        <qualifiedname>Gambit::ColliderBit::operator+</qualifiedname>
        <param>
          <type>const <ref refid="classGambit_1_1ColliderBit_1_1P2" kindref="compound">P2</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1ColliderBit_1_1P2" kindref="compound">P2</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/limits/PointsAndLines.hpp" line="74" column="17" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/limits/PointsAndLines.hpp" bodystart="74" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="PointsAndLines_8hpp_1a920afcb9da8c9ac089677162726a17ac" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGambit_1_1ColliderBit_1_1P2" kindref="compound">P2</ref></type>
        <definition>P2 Gambit::ColliderBit::operator-</definition>
        <argsstring>(const P2 &amp;a, const P2 &amp;b)</argsstring>
        <name>operator-</name>
        <qualifiedname>Gambit::ColliderBit::operator-</qualifiedname>
        <param>
          <type>const <ref refid="classGambit_1_1ColliderBit_1_1P2" kindref="compound">P2</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1ColliderBit_1_1P2" kindref="compound">P2</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/limits/PointsAndLines.hpp" line="75" column="17" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/limits/PointsAndLines.hpp" bodystart="75" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="PointsAndLines_8hpp_1ac9bba425ed2b60cefa62d7e01a75f3b5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGambit_1_1ColliderBit_1_1P2" kindref="compound">P2</ref></type>
        <definition>P2 Gambit::ColliderBit::operator*</definition>
        <argsstring>(const P2 &amp;a, double f)</argsstring>
        <name>operator*</name>
        <qualifiedname>Gambit::ColliderBit::operator*</qualifiedname>
        <param>
          <type>const <ref refid="classGambit_1_1ColliderBit_1_1P2" kindref="compound">P2</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/limits/PointsAndLines.hpp" line="76" column="17" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/limits/PointsAndLines.hpp" bodystart="76" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="PointsAndLines_8hpp_1a81484b3875f86f28253d125e2346bf2c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGambit_1_1ColliderBit_1_1P2" kindref="compound">P2</ref></type>
        <definition>P2 Gambit::ColliderBit::operator*</definition>
        <argsstring>(double f, const P2 &amp;a)</argsstring>
        <name>operator*</name>
        <qualifiedname>Gambit::ColliderBit::operator*</qualifiedname>
        <param>
          <type>double</type>
          <declname>f</declname>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1ColliderBit_1_1P2" kindref="compound">P2</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/limits/PointsAndLines.hpp" line="77" column="17" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/limits/PointsAndLines.hpp" bodystart="77" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="PointsAndLines_8hpp_1a64fcbcd63a371a84511e0537218ac6a4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGambit_1_1ColliderBit_1_1P2" kindref="compound">P2</ref></type>
        <definition>P2 Gambit::ColliderBit::operator/</definition>
        <argsstring>(const P2 &amp;a, double f)</argsstring>
        <name>operator/</name>
        <qualifiedname>Gambit::ColliderBit::operator/</qualifiedname>
        <param>
          <type>const <ref refid="classGambit_1_1ColliderBit_1_1P2" kindref="compound">P2</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/limits/PointsAndLines.hpp" line="78" column="17" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/limits/PointsAndLines.hpp" bodystart="78" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="PointsAndLines_8hpp_1a09c016898ad4172aecbe857de6227196" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string Gambit::ColliderBit::to_str</definition>
        <argsstring>(const P2 &amp;p2)</argsstring>
        <name>to_str</name>
        <qualifiedname>Gambit::ColliderBit::to_str</qualifiedname>
        <param>
          <type>const <ref refid="classGambit_1_1ColliderBit_1_1P2" kindref="compound">P2</ref> &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
<para>Make a string representation of the vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/limits/PointsAndLines.hpp" line="81" column="26" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/limits/PointsAndLines.hpp" bodystart="81" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="PointsAndLines_8hpp_1a63abd876afdbdbe1620196ac986737d6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; Gambit::ColliderBit::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;ostr, const P2 &amp;p2)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>Gambit::ColliderBit::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>ostr</declname>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1ColliderBit_1_1P2" kindref="compound">P2</ref> &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
<para>Write a string representation of the vector to the provided stream. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/limits/PointsAndLines.hpp" line="87" column="14" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/limits/PointsAndLines.hpp" bodystart="87" bodyend="90"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>String representation for LineSegment</header>
      <memberdef kind="function" id="PointsAndLines_8hpp_1a3f1bc1360354ab1ec8ce3189f8a7c4db" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string Gambit::ColliderBit::to_str</definition>
        <argsstring>(const LineSegment &amp;lineseg)</argsstring>
        <name>to_str</name>
        <qualifiedname>Gambit::ColliderBit::to_str</qualifiedname>
        <param>
          <type>const <ref refid="classGambit_1_1ColliderBit_1_1LineSegment" kindref="compound">LineSegment</ref> &amp;</type>
          <declname>lineseg</declname>
        </param>
        <briefdescription>
<para>Make a string representation of the <ref refid="classGambit_1_1ColliderBit_1_1LineSegment" kindref="compound">LineSegment</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/limits/PointsAndLines.hpp" line="237" column="26" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/limits/PointsAndLines.hpp" bodystart="237" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="PointsAndLines_8hpp_1a44c67a4815cc2f8c6c777f74b2ff4889" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; Gambit::ColliderBit::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;ostr, const LineSegment &amp;lineseg)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>Gambit::ColliderBit::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>ostr</declname>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1ColliderBit_1_1LineSegment" kindref="compound">LineSegment</ref> &amp;</type>
          <declname>lineseg</declname>
        </param>
        <briefdescription>
<para>Write a string representation of the vector to the provided stream. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/limits/PointsAndLines.hpp" line="243" column="14" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/limits/PointsAndLines.hpp" bodystart="243" bodyend="246"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Particle IDs</header>
      <memberdef kind="function" id="Utils_8hpp_1a090fae038f9467725561bab4a5286afd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gambit::ColliderBit::amIaJet</definition>
        <argsstring>(const HEPUtils::Jet *jet)</argsstring>
        <name>amIaJet</name>
        <qualifiedname>Gambit::ColliderBit::amIaJet</qualifiedname>
        <param>
          <type>const HEPUtils::Jet *</type>
          <declname>jet</declname>
        </param>
        <briefdescription>
<para>Identifier for jets true. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/Utils.hpp" line="62" column="17" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/Utils.hpp" bodystart="62" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="Utils_8hpp_1a66c6e7dce6ad591eb1569ae6c2c066f5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gambit::ColliderBit::amIaBJet</definition>
        <argsstring>(const HEPUtils::Jet *jet)</argsstring>
        <name>amIaBJet</name>
        <qualifiedname>Gambit::ColliderBit::amIaBJet</qualifiedname>
        <param>
          <type>const HEPUtils::Jet *</type>
          <declname>jet</declname>
        </param>
        <briefdescription>
<para>Indentifier for b-jets true. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/Utils.hpp" line="65" column="17" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/Utils.hpp" bodystart="65" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="Utils_8hpp_1a459902a1bc1cb1b8b92a0f9196a0e79f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gambit::ColliderBit::amIaJet</definition>
        <argsstring>(const HEPUtils::Particle *part)</argsstring>
        <name>amIaJet</name>
        <qualifiedname>Gambit::ColliderBit::amIaJet</qualifiedname>
        <param>
          <type>const HEPUtils::Particle *</type>
          <declname>part</declname>
        </param>
        <briefdescription>
<para>Identifier for jets false. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/Utils.hpp" line="68" column="17" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/Utils.hpp" bodystart="68" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="Utils_8hpp_1acef57926d6067a635ebf410f5a9e7303" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gambit::ColliderBit::amIaBJet</definition>
        <argsstring>(const HEPUtils::Particle *part)</argsstring>
        <name>amIaBJet</name>
        <qualifiedname>Gambit::ColliderBit::amIaBJet</qualifiedname>
        <param>
          <type>const HEPUtils::Particle *</type>
          <declname>part</declname>
        </param>
        <briefdescription>
<para>Indentifier for b-jets true. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/Utils.hpp" line="71" column="17" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/Utils.hpp" bodystart="71" bodyend="71"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Particle-list filtering by cuts</header>
      <memberdef kind="function" id="Utils_8hpp_1af270c432665b810c5ed3a053ee216a90" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CONTAINER</type>
          </param>
          <param>
            <type>typename RMFN</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Gambit::ColliderBit::iremoveerase</definition>
        <argsstring>(CONTAINER &amp;c, const RMFN &amp;fn)</argsstring>
        <name>iremoveerase</name>
        <qualifiedname>Gambit::ColliderBit::iremoveerase</qualifiedname>
        <param>
          <type>CONTAINER &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const RMFN &amp;</type>
          <declname>fn</declname>
        </param>
        <briefdescription>
<para>Convenience combination of remove_if and erase. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/Utils.hpp" line="80" column="17" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/Utils.hpp" bodystart="80" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="Utils_8hpp_1a1684b50776a7a5c8ee5dc9184abf81d5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::ifilter_reject</definition>
        <argsstring>(ParticlePtrs &amp;particles, std::function&lt; bool(const Particle *)&gt; rejfn, bool do_delete=true)</argsstring>
        <name>ifilter_reject</name>
        <qualifiedname>Gambit::ColliderBit::ifilter_reject</qualifiedname>
        <param>
          <type><ref refid="Utils_8hpp_1afc91bf707d036dcd1ddc79abcce7081c" kindref="member">ParticlePtrs</ref> &amp;</type>
          <declname>particles</declname>
        </param>
        <param>
          <type>std::function&lt; bool(const Particle *)&gt;</type>
          <declname>rejfn</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_delete</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>In-place filter a supplied particle vector by rejecting those which fail a supplied cut. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/Utils.hpp" line="86" column="17" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/Utils.hpp" bodystart="86" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="Utils_8hpp_1a20aacf254f32c16e5347ffbb6fedae41" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::ifilter_select</definition>
        <argsstring>(ParticlePtrs &amp;particles, std::function&lt; bool(const Particle *)&gt; selfn, bool do_delete=true)</argsstring>
        <name>ifilter_select</name>
        <qualifiedname>Gambit::ColliderBit::ifilter_select</qualifiedname>
        <param>
          <type><ref refid="Utils_8hpp_1afc91bf707d036dcd1ddc79abcce7081c" kindref="member">ParticlePtrs</ref> &amp;</type>
          <declname>particles</declname>
        </param>
        <param>
          <type>std::function&lt; bool(const Particle *)&gt;</type>
          <declname>selfn</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_delete</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>In-place filter a supplied particle vector by keeping those which pass a supplied cut. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/Utils.hpp" line="96" column="17" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/Utils.hpp" bodystart="96" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="Utils_8hpp_1a1a018b09cbd8d1f85e2af56b717a5f6e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="Utils_8hpp_1afc91bf707d036dcd1ddc79abcce7081c" kindref="member">ParticlePtrs</ref></type>
        <definition>ParticlePtrs Gambit::ColliderBit::filter_reject</definition>
        <argsstring>(const ParticlePtrs &amp;particles, std::function&lt; bool(const Particle *)&gt; rejfn, bool do_delete=true)</argsstring>
        <name>filter_reject</name>
        <qualifiedname>Gambit::ColliderBit::filter_reject</qualifiedname>
        <param>
          <type>const <ref refid="Utils_8hpp_1afc91bf707d036dcd1ddc79abcce7081c" kindref="member">ParticlePtrs</ref> &amp;</type>
          <declname>particles</declname>
        </param>
        <param>
          <type>std::function&lt; bool(const Particle *)&gt;</type>
          <declname>rejfn</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_delete</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Filter a supplied particle vector by rejecting those which fail a supplied cut <xrefsect id="todo_1_todo000041"><xreftitle>Todo</xreftitle><xrefdescription><para>Optimise by only copying those which are selected (filter_select is canonical) </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/Utils.hpp" line="104" column="25" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/Utils.hpp" bodystart="104" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="Utils_8hpp_1a2019408d78d453c480024a58ed872a12" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="Utils_8hpp_1afc91bf707d036dcd1ddc79abcce7081c" kindref="member">ParticlePtrs</ref></type>
        <definition>ParticlePtrs Gambit::ColliderBit::filter_select</definition>
        <argsstring>(const ParticlePtrs &amp;particles, std::function&lt; bool(const Particle *)&gt; selfn, bool do_delete=true)</argsstring>
        <name>filter_select</name>
        <qualifiedname>Gambit::ColliderBit::filter_select</qualifiedname>
        <param>
          <type>const <ref refid="Utils_8hpp_1afc91bf707d036dcd1ddc79abcce7081c" kindref="member">ParticlePtrs</ref> &amp;</type>
          <declname>particles</declname>
        </param>
        <param>
          <type>std::function&lt; bool(const Particle *)&gt;</type>
          <declname>selfn</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_delete</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Filter a supplied particle vector by keeping those which pass a supplied cut. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/Utils.hpp" line="112" column="25" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/Utils.hpp" bodystart="112" bodyend="115"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Jet-list filtering by cuts</header>
      <memberdef kind="function" id="Utils_8hpp_1a9745f85f022c50e621511dcb8a14e34e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::ifilter_reject</definition>
        <argsstring>(JetPtrs &amp;jets, std::function&lt; bool(const Jet *)&gt; rejfn, bool do_delete=true)</argsstring>
        <name>ifilter_reject</name>
        <qualifiedname>Gambit::ColliderBit::ifilter_reject</qualifiedname>
        <param>
          <type><ref refid="Utils_8hpp_1a806fd1423cb4a2e7e676c6fb4df31e80" kindref="member">JetPtrs</ref> &amp;</type>
          <declname>jets</declname>
        </param>
        <param>
          <type>std::function&lt; bool(const Jet *)&gt;</type>
          <declname>rejfn</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_delete</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>In-place filter a supplied jet vector by rejecting those which fail a supplied cut. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/Utils.hpp" line="125" column="17" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/Utils.hpp" bodystart="125" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="Utils_8hpp_1a69713e830f67280d1f6578c2df49674b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::ifilter_select</definition>
        <argsstring>(JetPtrs &amp;jets, std::function&lt; bool(const Jet *)&gt; selfn, bool do_delete=true)</argsstring>
        <name>ifilter_select</name>
        <qualifiedname>Gambit::ColliderBit::ifilter_select</qualifiedname>
        <param>
          <type><ref refid="Utils_8hpp_1a806fd1423cb4a2e7e676c6fb4df31e80" kindref="member">JetPtrs</ref> &amp;</type>
          <declname>jets</declname>
        </param>
        <param>
          <type>std::function&lt; bool(const Jet *)&gt;</type>
          <declname>selfn</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_delete</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>In-place filter a supplied jet vector by keeping those which pass a supplied cut. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/Utils.hpp" line="135" column="17" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/Utils.hpp" bodystart="135" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="Utils_8hpp_1a2413a535901135a74d4d20f101c78abd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="Utils_8hpp_1a806fd1423cb4a2e7e676c6fb4df31e80" kindref="member">JetPtrs</ref></type>
        <definition>JetPtrs Gambit::ColliderBit::filter_reject</definition>
        <argsstring>(const JetPtrs &amp;jets, std::function&lt; bool(const Jet *)&gt; rejfn, bool do_delete=true)</argsstring>
        <name>filter_reject</name>
        <qualifiedname>Gambit::ColliderBit::filter_reject</qualifiedname>
        <param>
          <type>const <ref refid="Utils_8hpp_1a806fd1423cb4a2e7e676c6fb4df31e80" kindref="member">JetPtrs</ref> &amp;</type>
          <declname>jets</declname>
        </param>
        <param>
          <type>std::function&lt; bool(const Jet *)&gt;</type>
          <declname>rejfn</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_delete</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Filter a supplied particle vector by rejecting those which fail a supplied cut <xrefsect id="todo_1_todo000042"><xreftitle>Todo</xreftitle><xrefdescription><para>Optimise by only copying those which are selected (filter_select is canonical) </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/Utils.hpp" line="143" column="20" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/Utils.hpp" bodystart="143" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="Utils_8hpp_1ad3ed8df8faa85dbfa9e27feac8555b08" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="Utils_8hpp_1a806fd1423cb4a2e7e676c6fb4df31e80" kindref="member">JetPtrs</ref></type>
        <definition>JetPtrs Gambit::ColliderBit::filter_select</definition>
        <argsstring>(const JetPtrs &amp;jets, std::function&lt; bool(const Jet *)&gt; selfn, bool do_delete=true)</argsstring>
        <name>filter_select</name>
        <qualifiedname>Gambit::ColliderBit::filter_select</qualifiedname>
        <param>
          <type>const <ref refid="Utils_8hpp_1a806fd1423cb4a2e7e676c6fb4df31e80" kindref="member">JetPtrs</ref> &amp;</type>
          <declname>jets</declname>
        </param>
        <param>
          <type>std::function&lt; bool(const Jet *)&gt;</type>
          <declname>selfn</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_delete</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Filter a supplied particle vector by keeping those which pass a supplied cut. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/Utils.hpp" line="151" column="20" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/Utils.hpp" bodystart="151" bodyend="154"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Random booleans sampled from efficiency maps</header>
      <description><para><xrefsect id="todo_1_todo000043"><xreftitle>Todo</xreftitle><xrefdescription><para>Provide random selection functors from const, 1D map, 2D map, and eff functor </para>
</xrefdescription></xrefsect></para>
</description>
      <memberdef kind="function" id="Utils_8hpp_1a3b59353a7ec6cb32c170baddc17ee4ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gambit::ColliderBit::random_bool</definition>
        <argsstring>(double eff)</argsstring>
        <name>random_bool</name>
        <qualifiedname>Gambit::ColliderBit::random_bool</qualifiedname>
        <param>
          <type>double</type>
          <declname>eff</declname>
        </param>
        <briefdescription>
<para>Return a random true/false at a success rate given by a number. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para><xrefsect id="todo_1_todo000098"><xreftitle>Todo</xreftitle><xrefdescription><para>Handle out-of-range eff values </para>
</xrefdescription></xrefsect></para>
<para><xrefsect id="todo_1_todo000098"><xreftitle>Todo</xreftitle><xrefdescription><para>Handle out-of-range eff values </para>
</xrefdescription></xrefsect></para>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/Utils.cpp" line="10" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/Utils.cpp" bodystart="10" bodyend="13" declfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/Utils.hpp" declline="168" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="Utils_8hpp_1a78d8549dacfbff00a5d2f0f09667d756" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gambit::ColliderBit::random_bool</definition>
        <argsstring>(const HEPUtils::BinnedFn1D&lt; double &gt; &amp;effmap, double x)</argsstring>
        <name>random_bool</name>
        <qualifiedname>Gambit::ColliderBit::random_bool</qualifiedname>
        <param>
          <type>const HEPUtils::BinnedFn1D&lt; double &gt; &amp;</type>
          <declname>effmap</declname>
        </param>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Return a random true/false at a success rate given by a 1D efficiency map. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/Utils.hpp" line="171" column="17" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/Utils.hpp" bodystart="171" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="Utils_8hpp_1ad9b71ef4722c30ca0b0bef6a44516d4c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gambit::ColliderBit::random_bool</definition>
        <argsstring>(const HEPUtils::BinnedFn2D&lt; double &gt; &amp;effmap, double x, double y)</argsstring>
        <name>random_bool</name>
        <qualifiedname>Gambit::ColliderBit::random_bool</qualifiedname>
        <param>
          <type>const HEPUtils::BinnedFn2D&lt; double &gt; &amp;</type>
          <declname>effmap</declname>
        </param>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Return a random true/false at a success rate given by a 2D efficiency map. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/Utils.hpp" line="176" column="17" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/Utils.hpp" bodystart="176" bodyend="178"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Random filtering by efficiency</header>
      <memberdef kind="function" id="Utils_8hpp_1a878e042861c7e3c817f85f0678954ecc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::filtereff</definition>
        <argsstring>(std::vector&lt; const HEPUtils::Particle * &gt; &amp;particles, double eff, bool do_delete=false)</argsstring>
        <name>filtereff</name>
        <qualifiedname>Gambit::ColliderBit::filtereff</qualifiedname>
        <param>
          <type>std::vector&lt; const HEPUtils::Particle * &gt; &amp;</type>
          <declname>particles</declname>
        </param>
        <param>
          <type>double</type>
          <declname>eff</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_delete</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Utility function for filtering a supplied particle vector by sampling wrt an efficiency scalar. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/Utils.cpp" line="16" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/Utils.cpp" bodystart="16" bodyend="25" declfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/Utils.hpp" declline="187" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="Utils_8hpp_1a6cc580ac44bf5513d5206959d8ae4514" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::filtereff</definition>
        <argsstring>(std::vector&lt; const HEPUtils::Particle * &gt; &amp;particles, std::function&lt; double(const HEPUtils::Particle *)&gt; eff_fn, bool do_delete=false)</argsstring>
        <name>filtereff</name>
        <qualifiedname>Gambit::ColliderBit::filtereff</qualifiedname>
        <param>
          <type>std::vector&lt; const HEPUtils::Particle * &gt; &amp;</type>
          <declname>particles</declname>
        </param>
        <param>
          <type>std::function&lt; double(const HEPUtils::Particle *)&gt;</type>
          <declname>eff_fn</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_delete</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Utility function for filtering a supplied particle vector by sampling an efficiency returned by a provided function object. </para>
        </briefdescription>
        <detaileddescription>
<para>Utility function for filtering a supplied particle vector by sampling wrt a binned 1D efficiency map in pT. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/Utils.cpp" line="29" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/Utils.cpp" bodystart="29" bodyend="39" declfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/Utils.hpp" declline="190" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="Utils_8hpp_1acacdc93daa0787f1cf7a436380390a7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::filtereff_pt</definition>
        <argsstring>(std::vector&lt; const HEPUtils::Particle * &gt; &amp;particles, const HEPUtils::BinnedFn1D&lt; double &gt; &amp;eff_pt, bool do_delete=false)</argsstring>
        <name>filtereff_pt</name>
        <qualifiedname>Gambit::ColliderBit::filtereff_pt</qualifiedname>
        <param>
          <type>std::vector&lt; const HEPUtils::Particle * &gt; &amp;</type>
          <declname>particles</declname>
        </param>
        <param>
          <type>const HEPUtils::BinnedFn1D&lt; double &gt; &amp;</type>
          <declname>eff_pt</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_delete</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Utility function for filtering a supplied particle vector by sampling wrt a binned 1D efficiency map in pT. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/Utils.cpp" line="43" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/Utils.cpp" bodystart="43" bodyend="52" declfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/Utils.hpp" declline="193" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="Utils_8hpp_1a198880b5e00a4a2c6a6e7a3ee801ad1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::filtereff_etapt</definition>
        <argsstring>(std::vector&lt; const HEPUtils::Particle * &gt; &amp;particles, const HEPUtils::BinnedFn2D&lt; double &gt; &amp;eff_etapt, bool do_delete=false)</argsstring>
        <name>filtereff_etapt</name>
        <qualifiedname>Gambit::ColliderBit::filtereff_etapt</qualifiedname>
        <param>
          <type>std::vector&lt; const HEPUtils::Particle * &gt; &amp;</type>
          <declname>particles</declname>
        </param>
        <param>
          <type>const HEPUtils::BinnedFn2D&lt; double &gt; &amp;</type>
          <declname>eff_etapt</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_delete</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Utility function for filtering a supplied particle vector by sampling wrt a binned 2D efficiency map in |eta| and pT. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/Utils.cpp" line="56" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/Utils.cpp" bodystart="56" bodyend="65" declfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/Utils.hpp" declline="196" declcolumn="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Tagging</header>
      <memberdef kind="function" id="Utils_8hpp_1a3a98b6d22188cdf64b09e866b31cb6f3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gambit::ColliderBit::has_tag</definition>
        <argsstring>(const HEPUtils::BinnedFn2D&lt; double &gt; &amp;effmap, double eta, double pt)</argsstring>
        <name>has_tag</name>
        <qualifiedname>Gambit::ColliderBit::has_tag</qualifiedname>
        <param>
          <type>const HEPUtils::BinnedFn2D&lt; double &gt; &amp;</type>
          <declname>effmap</declname>
        </param>
        <param>
          <type>double</type>
          <declname>eta</declname>
        </param>
        <param>
          <type>double</type>
          <declname>pt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Randomly get a tag result (can be anything) from a 2D |eta|-pT efficiency map <xrefsect id="todo_1_todo000044"><xreftitle>Todo</xreftitle><xrefdescription><para>Also need 1D? Sampling in what variable? </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/Utils.hpp" line="206" column="17" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/Utils.hpp" bodystart="206" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="Utils_8hpp_1a64260a7a70d3e3322f61f256095e76e5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::map&lt; const HEPUtils::Jet *, bool &gt;</type>
        <definition>std::map&lt; const HEPUtils::Jet *, bool &gt; Gambit::ColliderBit::generateBTagsMap</definition>
        <argsstring>(const std::vector&lt; const HEPUtils::Jet * &gt; &amp;jets, double bTagEff, double cMissTagEff, double otherMissTagEff, double pTmin=0., double absEtaMax=DBL_MAX)</argsstring>
        <name>generateBTagsMap</name>
        <qualifiedname>Gambit::ColliderBit::generateBTagsMap</qualifiedname>
        <param>
          <type>const std::vector&lt; const HEPUtils::Jet * &gt; &amp;</type>
          <declname>jets</declname>
        </param>
        <param>
          <type>double</type>
          <declname>bTagEff</declname>
        </param>
        <param>
          <type>double</type>
          <declname>cMissTagEff</declname>
        </param>
        <param>
          <type>double</type>
          <declname>otherMissTagEff</declname>
        </param>
        <param>
          <type>double</type>
          <declname>pTmin</declname>
          <defval>0.</defval>
        </param>
        <param>
          <type>double</type>
          <declname>absEtaMax</declname>
          <defval>DBL_MAX</defval>
        </param>
        <briefdescription>
<para>Return a map&lt;Jet*,bool&gt; containing a generated b-tag for every jet in the input vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/Utils.hpp" line="215" column="21" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/Utils.hpp" bodystart="215" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="Utils_8hpp_1a4fd48029976976354f74213f6b8d264d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename NUM1</type>
          </param>
          <param>
            <type>typename NUM2</type>
          </param>
        </templateparamlist>
        <type>size_t</type>
        <definition>size_t Gambit::ColliderBit::binIndex</definition>
        <argsstring>(NUM1 val, const std::vector&lt; NUM2 &gt; &amp;binedges, bool allow_overflow=false)</argsstring>
        <name>binIndex</name>
        <qualifiedname>Gambit::ColliderBit::binIndex</qualifiedname>
        <param>
          <type>NUM1</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const std::vector&lt; NUM2 &gt; &amp;</type>
          <declname>binedges</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>allow_overflow</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>&lt; Below/out of histo range</para>
<para>&lt; Above/out of histo range</para>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/Utils.hpp" line="245" column="19" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/Utils.hpp" bodystart="245" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="Utils_8hpp_1a2956d3a3095ed165a60046dd3918a330" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt; double &gt; Gambit::ColliderBit::mk_bin_values</definition>
        <argsstring>(const std::vector&lt; double &gt; &amp;binEdgeValues)</argsstring>
        <name>mk_bin_values</name>
        <qualifiedname>Gambit::ColliderBit::mk_bin_values</qualifiedname>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>binEdgeValues</declname>
        </param>
        <briefdescription>
<para>Make a vector of central bin values from a vector of bin edge values using linear interpolation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/Utils.hpp" line="253" column="24" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/Utils.hpp" bodystart="253" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="Utils_8hpp_1a815f2f22867c52a165aad8f6de2aec24" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt; double &gt; Gambit::ColliderBit::makeBinValues</definition>
        <argsstring>(const std::vector&lt; double &gt; &amp;binEdgeValues)</argsstring>
        <name>makeBinValues</name>
        <qualifiedname>Gambit::ColliderBit::makeBinValues</qualifiedname>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>binEdgeValues</declname>
        </param>
        <briefdescription>
<para>Alias. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/Utils.hpp" line="261" column="24" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/Utils.hpp" bodystart="261" bodyend="263"/>
      </memberdef>
      <memberdef kind="function" id="Utils_8hpp_1a6b637ed5c7c6e6fe222b389f3a912b44" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MOM</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; std::shared_ptr&lt; HEPUtils::Jet &gt; &gt;</type>
        <definition>std::vector&lt; std::shared_ptr&lt; HEPUtils::Jet &gt; &gt; Gambit::ColliderBit::get_jets</definition>
        <argsstring>(const std::vector&lt; MOM * &gt; &amp;moms, double R, double ptmin=0 *GeV, FJNS::JetAlgorithm alg=FJNS::antikt_algorithm)</argsstring>
        <name>get_jets</name>
        <qualifiedname>Gambit::ColliderBit::get_jets</qualifiedname>
        <param>
          <type>const std::vector&lt; MOM * &gt; &amp;</type>
          <declname>moms</declname>
        </param>
        <param>
          <type>double</type>
          <declname>R</declname>
        </param>
        <param>
          <type>double</type>
          <declname>ptmin</declname>
          <defval>0 *GeV</defval>
        </param>
        <param>
          <type>FJNS::JetAlgorithm</type>
          <declname>alg</declname>
          <defval>FJNS::antikt_algorithm</defval>
        </param>
        <briefdescription>
<para>Run jet clustering from any P4-compatible momentum type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/Utils.hpp" line="268" column="24" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/Utils.hpp" bodystart="268" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="Utils_8hpp_1af8cafeb2ad8fb99727709a15d7398c8d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gambit::ColliderBit::object_in_cone</definition>
        <argsstring>(const HEPUtils::Event &amp;e, const HEPUtils::P4 &amp;p4, double ptmin, double rmax, double rmin=0.05)</argsstring>
        <name>object_in_cone</name>
        <qualifiedname>Gambit::ColliderBit::object_in_cone</qualifiedname>
        <param>
          <type>const HEPUtils::Event &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type>const HEPUtils::P4 &amp;</type>
          <declname>p4</declname>
        </param>
        <param>
          <type>double</type>
          <declname>ptmin</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rmax</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rmin</declname>
          <defval>0.05</defval>
        </param>
        <briefdescription>
<para>Check if there&apos;s a physics object above ptmin in an annulus rmin..rmax around the given four-momentum p4. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/Utils.hpp" line="283" column="17" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/Utils.hpp" bodystart="283" bodyend="289"/>
      </memberdef>
      <memberdef kind="function" id="Utils_8hpp_1ab09d9a78a703b128a28b63a6c52396a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MOMPTRS1</type>
          </param>
          <param>
            <type>typename MOMPTRS2</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Gambit::ColliderBit::removeOverlap</definition>
        <argsstring>(MOMPTRS1 &amp;momstofilter, const MOMPTRS2 &amp;momstocmp, double deltaRMax, bool use_rapidity=false, double pTmax=DBL_MAX, double btageff=0)</argsstring>
        <name>removeOverlap</name>
        <qualifiedname>Gambit::ColliderBit::removeOverlap</qualifiedname>
        <param>
          <type>MOMPTRS1 &amp;</type>
          <declname>momstofilter</declname>
        </param>
        <param>
          <type>const MOMPTRS2 &amp;</type>
          <declname>momstocmp</declname>
        </param>
        <param>
          <type>double</type>
          <declname>deltaRMax</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>use_rapidity</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>double</type>
          <declname>pTmax</declname>
          <defval>DBL_MAX</defval>
        </param>
        <param>
          <type>double</type>
          <declname>btageff</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Overlap removal <ndash/> discard from first list if within deltaRMax of any from the second list Optional arguments:<itemizedlist>
<listitem><para>use_rapidity = use rapidity instead of psedurapidity to compute deltaR. Defaults to False</para>
</listitem><listitem><para>pTmax = only discard from first list with pT &lt; pTmax. Defaults to DBL_MAX</para>
</listitem><listitem><para>btageff = do not discard jets that have a b-tagging efficiency lower than btageff. Defaults to 0 </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/Utils.hpp" line="298" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/Utils.hpp" bodystart="298" bodyend="308"/>
      </memberdef>
      <memberdef kind="function" id="Utils_8hpp_1a07c3f4250cc6df0bbca9875949bade5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MOMPTRS1</type>
          </param>
          <param>
            <type>typename MOMPTRS2</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Gambit::ColliderBit::removeOverlap</definition>
        <argsstring>(MOMPTRS1 &amp;momstofilter, const MOMPTRS2 &amp;momstocmp, double(*deltaRMax)(const double), bool use_rapidity=false, double pTmax=DBL_MAX, double btageff=0)</argsstring>
        <name>removeOverlap</name>
        <qualifiedname>Gambit::ColliderBit::removeOverlap</qualifiedname>
        <param>
          <type>MOMPTRS1 &amp;</type>
          <declname>momstofilter</declname>
        </param>
        <param>
          <type>const MOMPTRS2 &amp;</type>
          <declname>momstocmp</declname>
        </param>
        <param>
          <type>double(*)(const double)</type>
          <declname>deltaRMax</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>use_rapidity</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>double</type>
          <declname>pTmax</declname>
          <defval>DBL_MAX</defval>
        </param>
        <param>
          <type>double</type>
          <declname>btageff</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Overlap removal <ndash/> discard from first list if within deltaRmax of any from the second list. Overload of previous function where deltaRmax is a function of the pT of the first list Optional arguments:<itemizedlist>
<listitem><para>use_rapidity = use rapidity instead of psedurapidity to compute deltaR. Defaults to False</para>
</listitem><listitem><para>pTmax = only discard from first list with pT &lt; pTmax. Defaults to DBL_MAX</para>
</listitem><listitem><para>btageff = do not discard jets that have a b-tagging efficiency lower than btageff. Defaults to 0 </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/Utils.hpp" line="317" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/Utils.hpp" bodystart="317" bodyend="327"/>
      </memberdef>
      <memberdef kind="function" id="Utils_8hpp_1a41b04372dc4483504b6027e23a27542e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MOMPTRS1</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Gambit::ColliderBit::removeOverlapIfBjet</definition>
        <argsstring>(MOMPTRS1 &amp;momstofilter, std::vector&lt; const HEPUtils::Jet * &gt; &amp;jets, double deltaRMax, bool use_rapidity=false, double pTmax=DBL_MAX)</argsstring>
        <name>removeOverlapIfBjet</name>
        <qualifiedname>Gambit::ColliderBit::removeOverlapIfBjet</qualifiedname>
        <param>
          <type>MOMPTRS1 &amp;</type>
          <declname>momstofilter</declname>
        </param>
        <param>
          <type>std::vector&lt; const HEPUtils::Jet * &gt; &amp;</type>
          <declname>jets</declname>
        </param>
        <param>
          <type>double</type>
          <declname>deltaRMax</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>use_rapidity</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>double</type>
          <declname>pTmax</declname>
          <defval>DBL_MAX</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Overlap removal for checking against b-jets <ndash/> discard from first list if within deltaRMax of a b-jet in the second list Optional arguments:<itemizedlist>
<listitem><para>use_rapidity = use rapidity instead of psedurapidity to compute deltaR. Defaults to False</para>
</listitem><listitem><para>pTmax = only discard from first list with pT &lt; pTmax. Defaults to DBL_MAX </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/Utils.hpp" line="334" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/Utils.hpp" bodystart="334" bodyend="344"/>
      </memberdef>
      <memberdef kind="function" id="Utils_8hpp_1aab1fa0df2dee362f7039e4b9fe0bed4b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CONTAINER</type>
          </param>
          <param>
            <type>typename FN</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Gambit::ColliderBit::all_of</definition>
        <argsstring>(const CONTAINER &amp;c, const FN &amp;f)</argsstring>
        <name>all_of</name>
        <qualifiedname>Gambit::ColliderBit::all_of</qualifiedname>
        <param>
          <type>const CONTAINER &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const FN &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Non-iterator version of std::all_of. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/Utils.hpp" line="349" column="17" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/Utils.hpp" bodystart="349" bodyend="351"/>
      </memberdef>
      <memberdef kind="function" id="Utils_8hpp_1a9ec34ac47693aabf0ff2ea6112e9c6a7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CONTAINER</type>
          </param>
          <param>
            <type>typename FN</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Gambit::ColliderBit::any_of</definition>
        <argsstring>(const CONTAINER &amp;c, const FN &amp;f)</argsstring>
        <name>any_of</name>
        <qualifiedname>Gambit::ColliderBit::any_of</qualifiedname>
        <param>
          <type>const CONTAINER &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const FN &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Non-iterator version of std::any_of. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/Utils.hpp" line="355" column="17" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/Utils.hpp" bodystart="355" bodyend="357"/>
      </memberdef>
      <memberdef kind="function" id="Utils_8hpp_1accb9a97df0082909089686ad0d1bbcd7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CONTAINER</type>
          </param>
          <param>
            <type>typename FN</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Gambit::ColliderBit::none_of</definition>
        <argsstring>(const CONTAINER &amp;c, const FN &amp;f)</argsstring>
        <name>none_of</name>
        <qualifiedname>Gambit::ColliderBit::none_of</qualifiedname>
        <param>
          <type>const CONTAINER &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const FN &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Non-iterator version of std::none_of. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/Utils.hpp" line="361" column="17" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/Utils.hpp" bodystart="361" bodyend="363"/>
      </memberdef>
      <memberdef kind="function" id="Utils_8hpp_1a4b8fca22bab46eebe47ed3908eca1725" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::vector&lt; const HEPUtils::Particle * &gt; &gt;</type>
        <definition>std::vector&lt; std::vector&lt; const HEPUtils::Particle * &gt; &gt; Gambit::ColliderBit::getSFOSpairs</definition>
        <argsstring>(std::vector&lt; const HEPUtils::Particle * &gt; particles)</argsstring>
        <name>getSFOSpairs</name>
        <qualifiedname>Gambit::ColliderBit::getSFOSpairs</qualifiedname>
        <param>
          <type>std::vector&lt; const HEPUtils::Particle * &gt;</type>
          <declname>particles</declname>
        </param>
        <briefdescription>
<para>Utility function for returning a collection of same-flavour, oppsosite-sign particle pairs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/Utils.cpp" line="69" column="17" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/Utils.cpp" bodystart="69" bodyend="82" declfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/Utils.hpp" declline="367" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="Utils_8hpp_1a4ade2e59fe5795e1cd55cc1516f6a6f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::vector&lt; const HEPUtils::Particle * &gt; &gt;</type>
        <definition>std::vector&lt; std::vector&lt; const HEPUtils::Particle * &gt; &gt; Gambit::ColliderBit::getOSpairs</definition>
        <argsstring>(std::vector&lt; const HEPUtils::Particle * &gt; particles)</argsstring>
        <name>getOSpairs</name>
        <qualifiedname>Gambit::ColliderBit::getOSpairs</qualifiedname>
        <param>
          <type>std::vector&lt; const HEPUtils::Particle * &gt;</type>
          <declname>particles</declname>
        </param>
        <briefdescription>
<para>Utility function for returning a collection of oppsosite-sign particle pairs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/Utils.cpp" line="86" column="17" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/Utils.cpp" bodystart="86" bodyend="99" declfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/Utils.hpp" declline="370" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="Utils_8hpp_1ab2dfeadec5c25359a418f22b14cf1da6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::vector&lt; const HEPUtils::Particle * &gt; &gt;</type>
        <definition>std::vector&lt; std::vector&lt; const HEPUtils::Particle * &gt; &gt; Gambit::ColliderBit::getSSpairs</definition>
        <argsstring>(std::vector&lt; const HEPUtils::Particle * &gt; particles)</argsstring>
        <name>getSSpairs</name>
        <qualifiedname>Gambit::ColliderBit::getSSpairs</qualifiedname>
        <param>
          <type>std::vector&lt; const HEPUtils::Particle * &gt;</type>
          <declname>particles</declname>
        </param>
        <briefdescription>
<para>Utility function for returning a collection of same-sign particle pairs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/Utils.cpp" line="103" column="17" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/Utils.cpp" bodystart="103" bodyend="116" declfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/Utils.hpp" declline="373" declcolumn="17"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Sorting</header>
      <memberdef kind="function" id="Utils_8hpp_1af4fc976689ef014d5a3aeda9a9497d72" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::sortBy</definition>
        <argsstring>(ParticlePtrs &amp;particles, std::function&lt; bool(const Particle *, const Particle *)&gt; cmpfn)</argsstring>
        <name>sortBy</name>
        <qualifiedname>Gambit::ColliderBit::sortBy</qualifiedname>
        <param>
          <type><ref refid="Utils_8hpp_1afc91bf707d036dcd1ddc79abcce7081c" kindref="member">ParticlePtrs</ref> &amp;</type>
          <declname>particles</declname>
        </param>
        <param>
          <type>std::function&lt; bool(const Particle *, const Particle *)&gt;</type>
          <declname>cmpfn</declname>
        </param>
        <briefdescription>
<para>Particle-sorting function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/Utils.hpp" line="380" column="17" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/Utils.hpp" bodystart="380" bodyend="382"/>
      </memberdef>
      <memberdef kind="function" id="Utils_8hpp_1ab4abea9a2b524471f92960a8e57ca597" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gambit::ColliderBit::cmpParticlesByPt</definition>
        <argsstring>(const HEPUtils::Particle *lep1, const HEPUtils::Particle *lep2)</argsstring>
        <name>cmpParticlesByPt</name>
        <qualifiedname>Gambit::ColliderBit::cmpParticlesByPt</qualifiedname>
        <param>
          <type>const HEPUtils::Particle *</type>
          <declname>lep1</declname>
        </param>
        <param>
          <type>const HEPUtils::Particle *</type>
          <declname>lep2</declname>
        </param>
        <briefdescription>
<para>Comparison function to give a particles sorting order decreasing by pT. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/Utils.hpp" line="385" column="17" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/Utils.hpp" bodystart="385" bodyend="385"/>
      </memberdef>
      <memberdef kind="function" id="Utils_8hpp_1ad01601d1de019bb97736b84ac32f8737" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::sortByPt</definition>
        <argsstring>(ParticlePtrs &amp;particles)</argsstring>
        <name>sortByPt</name>
        <qualifiedname>Gambit::ColliderBit::sortByPt</qualifiedname>
        <param>
          <type><ref refid="Utils_8hpp_1afc91bf707d036dcd1ddc79abcce7081c" kindref="member">ParticlePtrs</ref> &amp;</type>
          <declname>particles</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/Utils.hpp" line="388" column="17" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/Utils.hpp" bodystart="388" bodyend="388"/>
      </memberdef>
      <memberdef kind="function" id="Utils_8hpp_1a50a2de59bc5a7ddf9b409867d64890fd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::sortBy</definition>
        <argsstring>(JetPtrs &amp;jets, std::function&lt; bool(const Jet *, const Jet *)&gt; cmpfn)</argsstring>
        <name>sortBy</name>
        <qualifiedname>Gambit::ColliderBit::sortBy</qualifiedname>
        <param>
          <type><ref refid="Utils_8hpp_1a806fd1423cb4a2e7e676c6fb4df31e80" kindref="member">JetPtrs</ref> &amp;</type>
          <declname>jets</declname>
        </param>
        <param>
          <type>std::function&lt; bool(const Jet *, const Jet *)&gt;</type>
          <declname>cmpfn</declname>
        </param>
        <briefdescription>
<para>Jet-sorting function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/Utils.hpp" line="392" column="17" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/Utils.hpp" bodystart="392" bodyend="394"/>
      </memberdef>
      <memberdef kind="function" id="Utils_8hpp_1a4fdf4a31732240b6ec1f4f92cb130a19" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gambit::ColliderBit::cmpJetsByPt</definition>
        <argsstring>(const HEPUtils::Jet *jet1, const HEPUtils::Jet *jet2)</argsstring>
        <name>cmpJetsByPt</name>
        <qualifiedname>Gambit::ColliderBit::cmpJetsByPt</qualifiedname>
        <param>
          <type>const HEPUtils::Jet *</type>
          <declname>jet1</declname>
        </param>
        <param>
          <type>const HEPUtils::Jet *</type>
          <declname>jet2</declname>
        </param>
        <briefdescription>
<para>Comparison function to give a jets sorting order decreasing by pT. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/Utils.hpp" line="397" column="17" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/Utils.hpp" bodystart="397" bodyend="397"/>
      </memberdef>
      <memberdef kind="function" id="Utils_8hpp_1aaab2bad58ea291398350c2e2016fb6ca" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::sortByPt</definition>
        <argsstring>(JetPtrs &amp;jets)</argsstring>
        <name>sortByPt</name>
        <qualifiedname>Gambit::ColliderBit::sortByPt</qualifiedname>
        <param>
          <type><ref refid="Utils_8hpp_1a806fd1423cb4a2e7e676c6fb4df31e80" kindref="member">JetPtrs</ref> &amp;</type>
          <declname>jets</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/Utils.hpp" line="400" column="17" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/Utils.hpp" bodystart="400" bodyend="400"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Counting</header>
      <memberdef kind="function" id="Utils_8hpp_1ae0ffa8d8fda0bbda592974ccbc0dd27a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int Gambit::ColliderBit::countPt</definition>
        <argsstring>(const std::vector&lt; const Particle * &gt; &amp;particles, double pTlim)</argsstring>
        <name>countPt</name>
        <qualifiedname>Gambit::ColliderBit::countPt</qualifiedname>
        <param>
          <type>const std::vector&lt; const Particle * &gt; &amp;</type>
          <declname>particles</declname>
        </param>
        <param>
          <type>double</type>
          <declname>pTlim</declname>
        </param>
        <briefdescription>
<para>Count number of particles that have pT &gt; pTlim. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/Utils.hpp" line="408" column="16" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/Utils.hpp" bodystart="408" bodyend="416"/>
      </memberdef>
      <memberdef kind="function" id="Utils_8hpp_1a858795fe02f1780e07b8c98625727488" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int Gambit::ColliderBit::countPt</definition>
        <argsstring>(const std::vector&lt; const Jet * &gt; &amp;jets, double pTlim)</argsstring>
        <name>countPt</name>
        <qualifiedname>Gambit::ColliderBit::countPt</qualifiedname>
        <param>
          <type>const std::vector&lt; const Jet * &gt; &amp;</type>
          <declname>jets</declname>
        </param>
        <param>
          <type>double</type>
          <declname>pTlim</declname>
        </param>
        <briefdescription>
<para>Count number of jets that have pT &gt; pTlim. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/Utils.hpp" line="419" column="16" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/Utils.hpp" bodystart="419" bodyend="427"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Summing pT</header>
      <memberdef kind="function" id="Utils_8hpp_1ac8a67a27a9088243be6e3e74430e2b5b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double Gambit::ColliderBit::scalarSumPt</definition>
        <argsstring>(const std::vector&lt; const Particle * &gt; &amp;particles, double pTlim=0.)</argsstring>
        <name>scalarSumPt</name>
        <qualifiedname>Gambit::ColliderBit::scalarSumPt</qualifiedname>
        <param>
          <type>const std::vector&lt; const Particle * &gt; &amp;</type>
          <declname>particles</declname>
        </param>
        <param>
          <type>double</type>
          <declname>pTlim</declname>
          <defval>0.</defval>
        </param>
        <briefdescription>
<para>Scalar sum pT of particles with pT &gt; pTlim (default pTlim = 0) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/Utils.hpp" line="436" column="19" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/Utils.hpp" bodystart="436" bodyend="444"/>
      </memberdef>
      <memberdef kind="function" id="Utils_8hpp_1a2c1002cf9d1ec8b4c5a49ee5f45e0d38" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double Gambit::ColliderBit::scalarSumPt</definition>
        <argsstring>(const std::vector&lt; const Jet * &gt; &amp;jets, double pTlim=0.)</argsstring>
        <name>scalarSumPt</name>
        <qualifiedname>Gambit::ColliderBit::scalarSumPt</qualifiedname>
        <param>
          <type>const std::vector&lt; const Jet * &gt; &amp;</type>
          <declname>jets</declname>
        </param>
        <param>
          <type>double</type>
          <declname>pTlim</declname>
          <defval>0.</defval>
        </param>
        <briefdescription>
<para>Scalar sum pT of jets. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/Utils.hpp" line="447" column="19" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/Utils.hpp" bodystart="447" bodyend="455"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1ac6371f94ffc391a4350223f30ac3795e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP208_SLHA1_convention_xsec_selselbar</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP208_SLHA1_convention_xsec_selselbar</name>
        <qualifiedname>Gambit::ColliderBit::LEP208_SLHA1_convention_xsec_selselbar</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>ee --&gt; selectron pair production cross-sections at 208 GeV </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="116" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="116" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1adc5e6571be7ab1654bff93eae3aecac9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP208_SLHA1_convention_xsec_selserbar</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP208_SLHA1_convention_xsec_selserbar</name>
        <qualifiedname>Gambit::ColliderBit::LEP208_SLHA1_convention_xsec_selserbar</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="125" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="125" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1a69b496697cdc17fffecdc0cb238bbc95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP208_SLHA1_convention_xsec_serserbar</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP208_SLHA1_convention_xsec_serserbar</name>
        <qualifiedname>Gambit::ColliderBit::LEP208_SLHA1_convention_xsec_serserbar</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="134" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="134" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1acd816b6cb78190eeba14857d23646d0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP208_SLHA1_convention_xsec_serselbar</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP208_SLHA1_convention_xsec_serselbar</name>
        <qualifiedname>Gambit::ColliderBit::LEP208_SLHA1_convention_xsec_serselbar</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="143" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="143" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1ad25b5ccc9454b8ea1bd0228bb0ca6a54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP208_SLHA1_convention_xsec_se1se1bar</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP208_SLHA1_convention_xsec_se1se1bar</name>
        <qualifiedname>Gambit::ColliderBit::LEP208_SLHA1_convention_xsec_se1se1bar</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="149" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="149" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1a135ea7bd11ef8cfabbae8978da587e51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP208_SLHA1_convention_xsec_se1se2bar</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP208_SLHA1_convention_xsec_se1se2bar</name>
        <qualifiedname>Gambit::ColliderBit::LEP208_SLHA1_convention_xsec_se1se2bar</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="160" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="160" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1a07fbf9de75a06ee5b1f6cfaa389737c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP208_SLHA1_convention_xsec_se2se2bar</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP208_SLHA1_convention_xsec_se2se2bar</name>
        <qualifiedname>Gambit::ColliderBit::LEP208_SLHA1_convention_xsec_se2se2bar</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="171" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="171" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1a1b50e19dcc239d9c693af3a9b5f11c80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP208_SLHA1_convention_xsec_se2se1bar</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP208_SLHA1_convention_xsec_se2se1bar</name>
        <qualifiedname>Gambit::ColliderBit::LEP208_SLHA1_convention_xsec_se2se1bar</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="182" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="182" bodyend="187"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1a2749a4dd95efb61382f7bf36f7f6fecc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP208_SLHA1_convention_xsec_smulsmulbar</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP208_SLHA1_convention_xsec_smulsmulbar</name>
        <qualifiedname>Gambit::ColliderBit::LEP208_SLHA1_convention_xsec_smulsmulbar</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>ee --&gt; smuon pair production cross-sections at 208 GeV </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="192" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="192" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1ae32681b93a880a816489ba0fdeaf6369" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP208_SLHA1_convention_xsec_smulsmurbar</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP208_SLHA1_convention_xsec_smulsmurbar</name>
        <qualifiedname>Gambit::ColliderBit::LEP208_SLHA1_convention_xsec_smulsmurbar</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="201" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="201" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1a2b56c22037cc92aba6b81fcb0d25e21c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP208_SLHA1_convention_xsec_smursmurbar</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP208_SLHA1_convention_xsec_smursmurbar</name>
        <qualifiedname>Gambit::ColliderBit::LEP208_SLHA1_convention_xsec_smursmurbar</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="210" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="210" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1afff1ed70af8bb6f3e13d38b74cf260ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP208_SLHA1_convention_xsec_smursmulbar</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP208_SLHA1_convention_xsec_smursmulbar</name>
        <qualifiedname>Gambit::ColliderBit::LEP208_SLHA1_convention_xsec_smursmulbar</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="219" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="219" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1ac9ab4be7a79f37acdfec7ee4aed4e7cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP208_SLHA1_convention_xsec_smu1smu1bar</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP208_SLHA1_convention_xsec_smu1smu1bar</name>
        <qualifiedname>Gambit::ColliderBit::LEP208_SLHA1_convention_xsec_smu1smu1bar</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="225" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="225" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1a9131c6341f25d60a0bba1eff1989fd46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP208_SLHA1_convention_xsec_smu1smu2bar</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP208_SLHA1_convention_xsec_smu1smu2bar</name>
        <qualifiedname>Gambit::ColliderBit::LEP208_SLHA1_convention_xsec_smu1smu2bar</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="236" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="236" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1a3be9510c323be0ad92239d3402d11d16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP208_SLHA1_convention_xsec_smu2smu2bar</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP208_SLHA1_convention_xsec_smu2smu2bar</name>
        <qualifiedname>Gambit::ColliderBit::LEP208_SLHA1_convention_xsec_smu2smu2bar</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="247" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="247" bodyend="257"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1a037ed4ce221fd99cce8b78c47b7a1ffe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP208_SLHA1_convention_xsec_smu2smu1bar</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP208_SLHA1_convention_xsec_smu2smu1bar</name>
        <qualifiedname>Gambit::ColliderBit::LEP208_SLHA1_convention_xsec_smu2smu1bar</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="258" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="258" bodyend="263"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1a98da656961862e31ff84807ac108705e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP208_SLHA1_convention_xsec_staulstaulbar</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP208_SLHA1_convention_xsec_staulstaulbar</name>
        <qualifiedname>Gambit::ColliderBit::LEP208_SLHA1_convention_xsec_staulstaulbar</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>ee --&gt; stau pair production cross-sections at 208 GeV </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="268" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="268" bodyend="276"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1a1fb05fad8a7b385b928d56cb51c83f85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP208_SLHA1_convention_xsec_staulstaurbar</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP208_SLHA1_convention_xsec_staulstaurbar</name>
        <qualifiedname>Gambit::ColliderBit::LEP208_SLHA1_convention_xsec_staulstaurbar</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="277" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="277" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1a57a311992da939ae107ef6149a197cab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP208_SLHA1_convention_xsec_staurstaurbar</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP208_SLHA1_convention_xsec_staurstaurbar</name>
        <qualifiedname>Gambit::ColliderBit::LEP208_SLHA1_convention_xsec_staurstaurbar</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="286" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="286" bodyend="294"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1ad8e3fe0b45ca4f4f3eaf7e0d51345267" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP208_SLHA1_convention_xsec_staurstaulbar</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP208_SLHA1_convention_xsec_staurstaulbar</name>
        <qualifiedname>Gambit::ColliderBit::LEP208_SLHA1_convention_xsec_staurstaulbar</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="295" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="295" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1a627bd82910bd04392e3b3cf7fd1ef000" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP208_SLHA1_convention_xsec_stau1stau1bar</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP208_SLHA1_convention_xsec_stau1stau1bar</name>
        <qualifiedname>Gambit::ColliderBit::LEP208_SLHA1_convention_xsec_stau1stau1bar</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="301" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="301" bodyend="311"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1a612e1d01a847fc3a8748731454ef6b1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP208_SLHA1_convention_xsec_stau1stau2bar</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP208_SLHA1_convention_xsec_stau1stau2bar</name>
        <qualifiedname>Gambit::ColliderBit::LEP208_SLHA1_convention_xsec_stau1stau2bar</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="312" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="312" bodyend="322"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1a12f629600ab08b1a70a74557dbd10e64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP208_SLHA1_convention_xsec_stau2stau2bar</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP208_SLHA1_convention_xsec_stau2stau2bar</name>
        <qualifiedname>Gambit::ColliderBit::LEP208_SLHA1_convention_xsec_stau2stau2bar</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="323" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="323" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1aa2bdae8f47b7ddc8edacb4473053cd12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP208_SLHA1_convention_xsec_stau2stau1bar</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP208_SLHA1_convention_xsec_stau2stau1bar</name>
        <qualifiedname>Gambit::ColliderBit::LEP208_SLHA1_convention_xsec_stau2stau1bar</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="334" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="334" bodyend="339"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1a4c825e61da93e19117e53ea9cb7086a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP208_SLHA1_convention_xsec_chi00_11</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP208_SLHA1_convention_xsec_chi00_11</name>
        <qualifiedname>Gambit::ColliderBit::LEP208_SLHA1_convention_xsec_chi00_11</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>ee --&gt; neutralino pair production cross-sections at 208 GeV </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="355" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="355" bodyend="363"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1ae2b5cc60602126c9eb1a277dea98e7a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP208_SLHA1_convention_xsec_chi00_12</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP208_SLHA1_convention_xsec_chi00_12</name>
        <qualifiedname>Gambit::ColliderBit::LEP208_SLHA1_convention_xsec_chi00_12</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="364" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="364" bodyend="372"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1aace8c3f046b00de996e7189792d2250d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP208_SLHA1_convention_xsec_chi00_13</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP208_SLHA1_convention_xsec_chi00_13</name>
        <qualifiedname>Gambit::ColliderBit::LEP208_SLHA1_convention_xsec_chi00_13</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="373" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="373" bodyend="381"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1af855309550cf4b32bb5baf3aaede3df6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP208_SLHA1_convention_xsec_chi00_14</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP208_SLHA1_convention_xsec_chi00_14</name>
        <qualifiedname>Gambit::ColliderBit::LEP208_SLHA1_convention_xsec_chi00_14</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="382" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="382" bodyend="390"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1a265d17d0a3a88fb4aa6b5bebc56a3213" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP208_SLHA1_convention_xsec_chi00_22</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP208_SLHA1_convention_xsec_chi00_22</name>
        <qualifiedname>Gambit::ColliderBit::LEP208_SLHA1_convention_xsec_chi00_22</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="391" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="391" bodyend="399"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1a81ca6e26ae27ad430ce8644da3a22d7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP208_SLHA1_convention_xsec_chi00_23</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP208_SLHA1_convention_xsec_chi00_23</name>
        <qualifiedname>Gambit::ColliderBit::LEP208_SLHA1_convention_xsec_chi00_23</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="400" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="400" bodyend="408"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1af71a17fea4cef724b9ed21152f3bf5f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP208_SLHA1_convention_xsec_chi00_24</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP208_SLHA1_convention_xsec_chi00_24</name>
        <qualifiedname>Gambit::ColliderBit::LEP208_SLHA1_convention_xsec_chi00_24</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="409" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="409" bodyend="417"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1a871a25b1e23001594421dcae6e451081" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP208_SLHA1_convention_xsec_chi00_33</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP208_SLHA1_convention_xsec_chi00_33</name>
        <qualifiedname>Gambit::ColliderBit::LEP208_SLHA1_convention_xsec_chi00_33</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="418" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="418" bodyend="426"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1a57f78fb53f37733342debb920ad665f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP208_SLHA1_convention_xsec_chi00_34</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP208_SLHA1_convention_xsec_chi00_34</name>
        <qualifiedname>Gambit::ColliderBit::LEP208_SLHA1_convention_xsec_chi00_34</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="427" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="427" bodyend="435"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1aa8dbb9e0955a9754ede68273178aa38a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP208_SLHA1_convention_xsec_chi00_44</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP208_SLHA1_convention_xsec_chi00_44</name>
        <qualifiedname>Gambit::ColliderBit::LEP208_SLHA1_convention_xsec_chi00_44</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="436" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="436" bodyend="444"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1a89a23d9587ea898e0e71570de50e73b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP208_SLHA1_convention_xsec_chipm_11</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP208_SLHA1_convention_xsec_chipm_11</name>
        <qualifiedname>Gambit::ColliderBit::LEP208_SLHA1_convention_xsec_chipm_11</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>ee --&gt; chargino pair production cross-sections at 208 GeV </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="450" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="450" bodyend="458"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1a5d21e2a16db1091e50dcdc07b1aa04b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP208_SLHA1_convention_xsec_chipm_12</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP208_SLHA1_convention_xsec_chipm_12</name>
        <qualifiedname>Gambit::ColliderBit::LEP208_SLHA1_convention_xsec_chipm_12</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="459" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="459" bodyend="467"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1ad635ce6d9913478bd7c86ec97db13143" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP208_SLHA1_convention_xsec_chipm_22</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP208_SLHA1_convention_xsec_chipm_22</name>
        <qualifiedname>Gambit::ColliderBit::LEP208_SLHA1_convention_xsec_chipm_22</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="468" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="468" bodyend="476"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1aad0e0bd9b44fd81ee2cd9bad51612983" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP208_SLHA1_convention_xsec_chipm_21</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP208_SLHA1_convention_xsec_chipm_21</name>
        <qualifiedname>Gambit::ColliderBit::LEP208_SLHA1_convention_xsec_chipm_21</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="477" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="477" bodyend="482"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1a9452f995bdc75c7f1d62df5f068e5b98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP205_SLHA1_convention_xsec_selselbar</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP205_SLHA1_convention_xsec_selselbar</name>
        <qualifiedname>Gambit::ColliderBit::LEP205_SLHA1_convention_xsec_selselbar</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>ee --&gt; selectron pair production cross-sections at 205 GeV </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="488" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="488" bodyend="496"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1acb452181f11a374b3d3f6b275eda7623" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP205_SLHA1_convention_xsec_selserbar</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP205_SLHA1_convention_xsec_selserbar</name>
        <qualifiedname>Gambit::ColliderBit::LEP205_SLHA1_convention_xsec_selserbar</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="497" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="497" bodyend="505"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1ad7e8db7bcd9f391d2b2790b5fb1be9f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP205_SLHA1_convention_xsec_serserbar</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP205_SLHA1_convention_xsec_serserbar</name>
        <qualifiedname>Gambit::ColliderBit::LEP205_SLHA1_convention_xsec_serserbar</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="506" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="506" bodyend="514"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1ac6c923718ae76b04c355c53ab1304ed6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP205_SLHA1_convention_xsec_serselbar</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP205_SLHA1_convention_xsec_serselbar</name>
        <qualifiedname>Gambit::ColliderBit::LEP205_SLHA1_convention_xsec_serselbar</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="515" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="515" bodyend="520"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1aa302e0734c6e64ce85b0f74e51ef2d2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP205_SLHA1_convention_xsec_se1se1bar</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP205_SLHA1_convention_xsec_se1se1bar</name>
        <qualifiedname>Gambit::ColliderBit::LEP205_SLHA1_convention_xsec_se1se1bar</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="521" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="521" bodyend="531"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1aab6528cfb89ee4f3bcc87398a28f4d65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP205_SLHA1_convention_xsec_se1se2bar</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP205_SLHA1_convention_xsec_se1se2bar</name>
        <qualifiedname>Gambit::ColliderBit::LEP205_SLHA1_convention_xsec_se1se2bar</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="532" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="532" bodyend="542"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1a0817068bd8c520a555f60805753b4efc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP205_SLHA1_convention_xsec_se2se2bar</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP205_SLHA1_convention_xsec_se2se2bar</name>
        <qualifiedname>Gambit::ColliderBit::LEP205_SLHA1_convention_xsec_se2se2bar</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="543" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="543" bodyend="553"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1a549e4a256f3258cb102818dce9e5b7f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP205_SLHA1_convention_xsec_se2se1bar</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP205_SLHA1_convention_xsec_se2se1bar</name>
        <qualifiedname>Gambit::ColliderBit::LEP205_SLHA1_convention_xsec_se2se1bar</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="554" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="554" bodyend="559"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1a773ba7564cdf27edbc36d3c0b7feee09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP205_SLHA1_convention_xsec_smulsmulbar</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP205_SLHA1_convention_xsec_smulsmulbar</name>
        <qualifiedname>Gambit::ColliderBit::LEP205_SLHA1_convention_xsec_smulsmulbar</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>ee --&gt; smuon pair production cross-sections at 205 GeV </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="564" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="564" bodyend="572"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1a10a40f97f6b3735d91bfbedfd2cc3727" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP205_SLHA1_convention_xsec_smulsmurbar</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP205_SLHA1_convention_xsec_smulsmurbar</name>
        <qualifiedname>Gambit::ColliderBit::LEP205_SLHA1_convention_xsec_smulsmurbar</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="573" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="573" bodyend="581"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1a22ba1c6a04ecd846ae29f02e6dc1a2d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP205_SLHA1_convention_xsec_smursmurbar</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP205_SLHA1_convention_xsec_smursmurbar</name>
        <qualifiedname>Gambit::ColliderBit::LEP205_SLHA1_convention_xsec_smursmurbar</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="582" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="582" bodyend="590"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1aff8ec3ded049fea56ff0c6cb23c3d586" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP205_SLHA1_convention_xsec_smursmulbar</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP205_SLHA1_convention_xsec_smursmulbar</name>
        <qualifiedname>Gambit::ColliderBit::LEP205_SLHA1_convention_xsec_smursmulbar</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="591" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="591" bodyend="596"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1a3277a703d860eca06244338f18a116c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP205_SLHA1_convention_xsec_smu1smu1bar</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP205_SLHA1_convention_xsec_smu1smu1bar</name>
        <qualifiedname>Gambit::ColliderBit::LEP205_SLHA1_convention_xsec_smu1smu1bar</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="597" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="597" bodyend="607"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1ab3e7ac7ab247156a715265d2150681a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP205_SLHA1_convention_xsec_smu1smu2bar</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP205_SLHA1_convention_xsec_smu1smu2bar</name>
        <qualifiedname>Gambit::ColliderBit::LEP205_SLHA1_convention_xsec_smu1smu2bar</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="608" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="608" bodyend="618"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1a5631229a626ef0fbb5886a9981d2ba92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP205_SLHA1_convention_xsec_smu2smu2bar</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP205_SLHA1_convention_xsec_smu2smu2bar</name>
        <qualifiedname>Gambit::ColliderBit::LEP205_SLHA1_convention_xsec_smu2smu2bar</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="619" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="619" bodyend="629"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1aaef82286898e637e87f91dca26daf15b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP205_SLHA1_convention_xsec_smu2smu1bar</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP205_SLHA1_convention_xsec_smu2smu1bar</name>
        <qualifiedname>Gambit::ColliderBit::LEP205_SLHA1_convention_xsec_smu2smu1bar</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="630" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="630" bodyend="635"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1a52263f363ad897dbd3ddea9fe530e5d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP205_SLHA1_convention_xsec_staulstaulbar</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP205_SLHA1_convention_xsec_staulstaulbar</name>
        <qualifiedname>Gambit::ColliderBit::LEP205_SLHA1_convention_xsec_staulstaulbar</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>ee --&gt; stau pair production cross-sections at 205 GeV </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="640" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="640" bodyend="648"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1a88709cdf8d519207746ef6b291cdceb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP205_SLHA1_convention_xsec_staulstaurbar</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP205_SLHA1_convention_xsec_staulstaurbar</name>
        <qualifiedname>Gambit::ColliderBit::LEP205_SLHA1_convention_xsec_staulstaurbar</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="649" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="649" bodyend="657"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1a77faa1141f4a7c3b604efa4421943aca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP205_SLHA1_convention_xsec_staurstaurbar</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP205_SLHA1_convention_xsec_staurstaurbar</name>
        <qualifiedname>Gambit::ColliderBit::LEP205_SLHA1_convention_xsec_staurstaurbar</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="658" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="658" bodyend="666"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1a51f4c58cb81c9e9b4f3e3c46102a8292" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP205_SLHA1_convention_xsec_staurstaulbar</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP205_SLHA1_convention_xsec_staurstaulbar</name>
        <qualifiedname>Gambit::ColliderBit::LEP205_SLHA1_convention_xsec_staurstaulbar</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="667" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="667" bodyend="672"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1ab53fdf76bf6a81b9d09e60d99386b45d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP205_SLHA1_convention_xsec_stau1stau1bar</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP205_SLHA1_convention_xsec_stau1stau1bar</name>
        <qualifiedname>Gambit::ColliderBit::LEP205_SLHA1_convention_xsec_stau1stau1bar</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="673" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="673" bodyend="683"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1a037ba810bfc3b72015ae9909f0d6f88f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP205_SLHA1_convention_xsec_stau1stau2bar</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP205_SLHA1_convention_xsec_stau1stau2bar</name>
        <qualifiedname>Gambit::ColliderBit::LEP205_SLHA1_convention_xsec_stau1stau2bar</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="684" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="684" bodyend="694"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1afa1ea899b8ab0ad29d661691090cdf1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP205_SLHA1_convention_xsec_stau2stau2bar</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP205_SLHA1_convention_xsec_stau2stau2bar</name>
        <qualifiedname>Gambit::ColliderBit::LEP205_SLHA1_convention_xsec_stau2stau2bar</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="695" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="695" bodyend="705"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1a51d285a730993b4bad0ad0d414a1514b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP205_SLHA1_convention_xsec_stau2stau1bar</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP205_SLHA1_convention_xsec_stau2stau1bar</name>
        <qualifiedname>Gambit::ColliderBit::LEP205_SLHA1_convention_xsec_stau2stau1bar</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="706" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="706" bodyend="711"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1a679f5a4179dff7f5edddbf08b618351b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP205_SLHA1_convention_xsec_chi00_11</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP205_SLHA1_convention_xsec_chi00_11</name>
        <qualifiedname>Gambit::ColliderBit::LEP205_SLHA1_convention_xsec_chi00_11</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>ee --&gt; neutralino pair production cross-sections at 205 GeV </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="717" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="717" bodyend="725"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1a7513b522794fe8d239b440b4c341f817" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP205_SLHA1_convention_xsec_chi00_12</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP205_SLHA1_convention_xsec_chi00_12</name>
        <qualifiedname>Gambit::ColliderBit::LEP205_SLHA1_convention_xsec_chi00_12</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="726" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="726" bodyend="734"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1a8321a99bcfe3cbaa0e2ef5e2537794d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP205_SLHA1_convention_xsec_chi00_13</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP205_SLHA1_convention_xsec_chi00_13</name>
        <qualifiedname>Gambit::ColliderBit::LEP205_SLHA1_convention_xsec_chi00_13</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="735" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="735" bodyend="743"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1a9b156499e3316b51ff4f3cabcb602b40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP205_SLHA1_convention_xsec_chi00_14</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP205_SLHA1_convention_xsec_chi00_14</name>
        <qualifiedname>Gambit::ColliderBit::LEP205_SLHA1_convention_xsec_chi00_14</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="744" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="744" bodyend="752"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1a492fa12f3fb2cecc1cb4408e075e41b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP205_SLHA1_convention_xsec_chi00_22</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP205_SLHA1_convention_xsec_chi00_22</name>
        <qualifiedname>Gambit::ColliderBit::LEP205_SLHA1_convention_xsec_chi00_22</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="753" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="753" bodyend="761"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1a185dcd31dc15852d6153abc55c4b1409" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP205_SLHA1_convention_xsec_chi00_23</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP205_SLHA1_convention_xsec_chi00_23</name>
        <qualifiedname>Gambit::ColliderBit::LEP205_SLHA1_convention_xsec_chi00_23</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="762" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="762" bodyend="770"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1a08184cc82a9087aacf5059cc53d6f03b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP205_SLHA1_convention_xsec_chi00_24</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP205_SLHA1_convention_xsec_chi00_24</name>
        <qualifiedname>Gambit::ColliderBit::LEP205_SLHA1_convention_xsec_chi00_24</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="771" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="771" bodyend="779"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1a78bafff0be1301416acc0f8fd6d541f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP205_SLHA1_convention_xsec_chi00_33</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP205_SLHA1_convention_xsec_chi00_33</name>
        <qualifiedname>Gambit::ColliderBit::LEP205_SLHA1_convention_xsec_chi00_33</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="780" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="780" bodyend="788"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1a6549992a462e0e5ee4f435a69073c27d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP205_SLHA1_convention_xsec_chi00_34</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP205_SLHA1_convention_xsec_chi00_34</name>
        <qualifiedname>Gambit::ColliderBit::LEP205_SLHA1_convention_xsec_chi00_34</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="789" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="789" bodyend="797"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1a6a90743e0985f5fe7b668a961d7038d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP205_SLHA1_convention_xsec_chi00_44</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP205_SLHA1_convention_xsec_chi00_44</name>
        <qualifiedname>Gambit::ColliderBit::LEP205_SLHA1_convention_xsec_chi00_44</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="798" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="798" bodyend="806"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1a6730fd1c9cfe19685736a24e5e9149ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP205_SLHA1_convention_xsec_chipm_11</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP205_SLHA1_convention_xsec_chipm_11</name>
        <qualifiedname>Gambit::ColliderBit::LEP205_SLHA1_convention_xsec_chipm_11</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>ee --&gt; chargino pair production cross-sections at 205 GeV </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="812" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="812" bodyend="820"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1a17f5bb2fdc78e9067c52da4c6e8c584b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP205_SLHA1_convention_xsec_chipm_12</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP205_SLHA1_convention_xsec_chipm_12</name>
        <qualifiedname>Gambit::ColliderBit::LEP205_SLHA1_convention_xsec_chipm_12</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="821" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="821" bodyend="829"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1aabc90f2ec893c88b156b651e5f290ff7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP205_SLHA1_convention_xsec_chipm_22</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP205_SLHA1_convention_xsec_chipm_22</name>
        <qualifiedname>Gambit::ColliderBit::LEP205_SLHA1_convention_xsec_chipm_22</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="830" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="830" bodyend="838"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1a088512ccd3931f662c635e5a601627c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP205_SLHA1_convention_xsec_chipm_21</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP205_SLHA1_convention_xsec_chipm_21</name>
        <qualifiedname>Gambit::ColliderBit::LEP205_SLHA1_convention_xsec_chipm_21</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="839" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="839" bodyend="844"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1a14196368ea825cc11292cdb1fb60c21e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP188_SLHA1_convention_xsec_selselbar</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP188_SLHA1_convention_xsec_selselbar</name>
        <qualifiedname>Gambit::ColliderBit::LEP188_SLHA1_convention_xsec_selselbar</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>ee --&gt; selectron pair production cross-sections at 188.6 GeV </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="848" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="848" bodyend="856"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1a9ff43a07bf481216ff6039765d17170c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP188_SLHA1_convention_xsec_selserbar</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP188_SLHA1_convention_xsec_selserbar</name>
        <qualifiedname>Gambit::ColliderBit::LEP188_SLHA1_convention_xsec_selserbar</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="857" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="857" bodyend="865"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1a83ea14b603a5dbd89f5ee6a47f8003bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP188_SLHA1_convention_xsec_serserbar</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP188_SLHA1_convention_xsec_serserbar</name>
        <qualifiedname>Gambit::ColliderBit::LEP188_SLHA1_convention_xsec_serserbar</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="866" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="866" bodyend="874"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1a2d58c979b7ad02da1922e483826d5032" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP188_SLHA1_convention_xsec_serselbar</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP188_SLHA1_convention_xsec_serselbar</name>
        <qualifiedname>Gambit::ColliderBit::LEP188_SLHA1_convention_xsec_serselbar</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="875" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="875" bodyend="880"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1aa71caab74b41cd9cdfe5446e7c2f8a0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP188_SLHA1_convention_xsec_se1se1bar</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP188_SLHA1_convention_xsec_se1se1bar</name>
        <qualifiedname>Gambit::ColliderBit::LEP188_SLHA1_convention_xsec_se1se1bar</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="881" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="881" bodyend="891"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1a921198b3383c8e07218e93c29525dbf4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP188_SLHA1_convention_xsec_se1se2bar</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP188_SLHA1_convention_xsec_se1se2bar</name>
        <qualifiedname>Gambit::ColliderBit::LEP188_SLHA1_convention_xsec_se1se2bar</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="892" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="892" bodyend="902"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1a89fef547dec674f9ba3be87355f62daa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP188_SLHA1_convention_xsec_se2se2bar</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP188_SLHA1_convention_xsec_se2se2bar</name>
        <qualifiedname>Gambit::ColliderBit::LEP188_SLHA1_convention_xsec_se2se2bar</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="903" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="903" bodyend="913"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1ae807617b6d2be578616492ebc3e1d338" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP188_SLHA1_convention_xsec_se2se1bar</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP188_SLHA1_convention_xsec_se2se1bar</name>
        <qualifiedname>Gambit::ColliderBit::LEP188_SLHA1_convention_xsec_se2se1bar</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="914" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="914" bodyend="919"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1a7db93d4ae3cc26819be0b443b3d0a9cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP188_SLHA1_convention_xsec_smulsmulbar</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP188_SLHA1_convention_xsec_smulsmulbar</name>
        <qualifiedname>Gambit::ColliderBit::LEP188_SLHA1_convention_xsec_smulsmulbar</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>ee --&gt; smuon pair production cross-sections at 188.6 GeV </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="924" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="924" bodyend="932"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1a0743daa65b72d17dc766a0aafc9d8dce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP188_SLHA1_convention_xsec_smulsmurbar</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP188_SLHA1_convention_xsec_smulsmurbar</name>
        <qualifiedname>Gambit::ColliderBit::LEP188_SLHA1_convention_xsec_smulsmurbar</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="933" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="933" bodyend="941"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1a94e9f64115dbe872c01f1ce909266064" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP188_SLHA1_convention_xsec_smursmurbar</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP188_SLHA1_convention_xsec_smursmurbar</name>
        <qualifiedname>Gambit::ColliderBit::LEP188_SLHA1_convention_xsec_smursmurbar</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="942" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="942" bodyend="950"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1a5307967f043dd647f30c077c072da065" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP188_SLHA1_convention_xsec_smursmulbar</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP188_SLHA1_convention_xsec_smursmulbar</name>
        <qualifiedname>Gambit::ColliderBit::LEP188_SLHA1_convention_xsec_smursmulbar</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="951" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="951" bodyend="956"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1a0295a4b3b080bcf74b4c6b1a35f6e958" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP188_SLHA1_convention_xsec_smu1smu1bar</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP188_SLHA1_convention_xsec_smu1smu1bar</name>
        <qualifiedname>Gambit::ColliderBit::LEP188_SLHA1_convention_xsec_smu1smu1bar</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="957" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="957" bodyend="967"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1abd9baab8a2bf151d82b3ff10ab0d6849" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP188_SLHA1_convention_xsec_smu1smu2bar</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP188_SLHA1_convention_xsec_smu1smu2bar</name>
        <qualifiedname>Gambit::ColliderBit::LEP188_SLHA1_convention_xsec_smu1smu2bar</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="968" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="968" bodyend="978"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1a51ea6c29c51490899ecef30d088401e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP188_SLHA1_convention_xsec_smu2smu2bar</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP188_SLHA1_convention_xsec_smu2smu2bar</name>
        <qualifiedname>Gambit::ColliderBit::LEP188_SLHA1_convention_xsec_smu2smu2bar</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="979" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="979" bodyend="989"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1a14028a573d87134622cf84973c6e9607" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP188_SLHA1_convention_xsec_smu2smu1bar</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP188_SLHA1_convention_xsec_smu2smu1bar</name>
        <qualifiedname>Gambit::ColliderBit::LEP188_SLHA1_convention_xsec_smu2smu1bar</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="990" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="990" bodyend="995"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1a44e8b3afef9de1a9fcdc7d6433fbb8d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP188_SLHA1_convention_xsec_staulstaulbar</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP188_SLHA1_convention_xsec_staulstaulbar</name>
        <qualifiedname>Gambit::ColliderBit::LEP188_SLHA1_convention_xsec_staulstaulbar</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>ee --&gt; stau pair production cross-sections at 188.6 GeV </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="1000" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="1000" bodyend="1008"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1adbd40c6e174c3f373e8f736ba7523269" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP188_SLHA1_convention_xsec_staulstaurbar</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP188_SLHA1_convention_xsec_staulstaurbar</name>
        <qualifiedname>Gambit::ColliderBit::LEP188_SLHA1_convention_xsec_staulstaurbar</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="1009" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="1009" bodyend="1017"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1af8c66a686d2240b84fac15399595ebca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP188_SLHA1_convention_xsec_staurstaurbar</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP188_SLHA1_convention_xsec_staurstaurbar</name>
        <qualifiedname>Gambit::ColliderBit::LEP188_SLHA1_convention_xsec_staurstaurbar</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="1018" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="1018" bodyend="1026"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1a0d79a831b25a1244512839d35ddfaa5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP188_SLHA1_convention_xsec_staurstaulbar</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP188_SLHA1_convention_xsec_staurstaulbar</name>
        <qualifiedname>Gambit::ColliderBit::LEP188_SLHA1_convention_xsec_staurstaulbar</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="1027" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="1027" bodyend="1032"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1a00cacf4ae96846ffbb3c64c33eda1107" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP188_SLHA1_convention_xsec_stau1stau1bar</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP188_SLHA1_convention_xsec_stau1stau1bar</name>
        <qualifiedname>Gambit::ColliderBit::LEP188_SLHA1_convention_xsec_stau1stau1bar</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="1033" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="1033" bodyend="1043"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1a822f8a2ffcb31255f034553fbdf71525" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP188_SLHA1_convention_xsec_stau1stau2bar</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP188_SLHA1_convention_xsec_stau1stau2bar</name>
        <qualifiedname>Gambit::ColliderBit::LEP188_SLHA1_convention_xsec_stau1stau2bar</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="1044" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="1044" bodyend="1054"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1aa2225df30f992aaa4a5cf2fdea0782d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP188_SLHA1_convention_xsec_stau2stau2bar</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP188_SLHA1_convention_xsec_stau2stau2bar</name>
        <qualifiedname>Gambit::ColliderBit::LEP188_SLHA1_convention_xsec_stau2stau2bar</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="1055" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="1055" bodyend="1065"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1a77a7551f9c4be6e328299b85c0b5c331" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP188_SLHA1_convention_xsec_stau2stau1bar</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP188_SLHA1_convention_xsec_stau2stau1bar</name>
        <qualifiedname>Gambit::ColliderBit::LEP188_SLHA1_convention_xsec_stau2stau1bar</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="1066" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="1066" bodyend="1071"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1a56ef1b8eb48b7f60d50871d924c880ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP188_SLHA1_convention_xsec_chi00_11</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP188_SLHA1_convention_xsec_chi00_11</name>
        <qualifiedname>Gambit::ColliderBit::LEP188_SLHA1_convention_xsec_chi00_11</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>ee --&gt; neutralino pair production cross-sections at 188.6 GeV </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="1077" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="1077" bodyend="1085"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1a8fccfcd3962c5b1c644e5b72c86ba495" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP188_SLHA1_convention_xsec_chi00_12</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP188_SLHA1_convention_xsec_chi00_12</name>
        <qualifiedname>Gambit::ColliderBit::LEP188_SLHA1_convention_xsec_chi00_12</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="1086" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="1086" bodyend="1094"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1aa8631aef97217e893c522ef37966e88f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP188_SLHA1_convention_xsec_chi00_13</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP188_SLHA1_convention_xsec_chi00_13</name>
        <qualifiedname>Gambit::ColliderBit::LEP188_SLHA1_convention_xsec_chi00_13</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="1095" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="1095" bodyend="1103"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1ad7bf6987a887b28fad2246ef524e251f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP188_SLHA1_convention_xsec_chi00_14</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP188_SLHA1_convention_xsec_chi00_14</name>
        <qualifiedname>Gambit::ColliderBit::LEP188_SLHA1_convention_xsec_chi00_14</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="1104" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="1104" bodyend="1112"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1ab225304306130dbdb7da01c9f2063fb9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP188_SLHA1_convention_xsec_chi00_22</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP188_SLHA1_convention_xsec_chi00_22</name>
        <qualifiedname>Gambit::ColliderBit::LEP188_SLHA1_convention_xsec_chi00_22</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="1113" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="1113" bodyend="1121"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1a30bd18979c627d96308bedb70e2e7990" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP188_SLHA1_convention_xsec_chi00_23</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP188_SLHA1_convention_xsec_chi00_23</name>
        <qualifiedname>Gambit::ColliderBit::LEP188_SLHA1_convention_xsec_chi00_23</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="1122" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="1122" bodyend="1130"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1a4c038b353ea9dc1c17b605138d5acd30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP188_SLHA1_convention_xsec_chi00_24</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP188_SLHA1_convention_xsec_chi00_24</name>
        <qualifiedname>Gambit::ColliderBit::LEP188_SLHA1_convention_xsec_chi00_24</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="1131" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="1131" bodyend="1139"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1a18f5860a0b71a690203e4dc8e9217d60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP188_SLHA1_convention_xsec_chi00_33</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP188_SLHA1_convention_xsec_chi00_33</name>
        <qualifiedname>Gambit::ColliderBit::LEP188_SLHA1_convention_xsec_chi00_33</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="1140" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="1140" bodyend="1148"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1a2cf7e858d4457d18ae289dc6b56999ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP188_SLHA1_convention_xsec_chi00_34</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP188_SLHA1_convention_xsec_chi00_34</name>
        <qualifiedname>Gambit::ColliderBit::LEP188_SLHA1_convention_xsec_chi00_34</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="1149" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="1149" bodyend="1157"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1aeb438699801690eb8a7b87aaa9a843c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP188_SLHA1_convention_xsec_chi00_44</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP188_SLHA1_convention_xsec_chi00_44</name>
        <qualifiedname>Gambit::ColliderBit::LEP188_SLHA1_convention_xsec_chi00_44</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="1158" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="1158" bodyend="1166"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1ae03c38f70297602109ce23a6135bccab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP188_SLHA1_convention_xsec_chipm_11</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP188_SLHA1_convention_xsec_chipm_11</name>
        <qualifiedname>Gambit::ColliderBit::LEP188_SLHA1_convention_xsec_chipm_11</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>ee --&gt; chargino pair production cross-sections at 188.6 GeV </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="1172" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="1172" bodyend="1180"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1ab040523f82db90e515ddfbfe15489516" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP188_SLHA1_convention_xsec_chipm_12</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP188_SLHA1_convention_xsec_chipm_12</name>
        <qualifiedname>Gambit::ColliderBit::LEP188_SLHA1_convention_xsec_chipm_12</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="1181" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="1181" bodyend="1189"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1a2beb2309e141ebbda8f5a9b091b1c795" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP188_SLHA1_convention_xsec_chipm_22</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP188_SLHA1_convention_xsec_chipm_22</name>
        <qualifiedname>Gambit::ColliderBit::LEP188_SLHA1_convention_xsec_chipm_22</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="1190" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="1190" bodyend="1198"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1a43ef80cfc7439f56bacd525bcb930b0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP188_SLHA1_convention_xsec_chipm_21</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP188_SLHA1_convention_xsec_chipm_21</name>
        <qualifiedname>Gambit::ColliderBit::LEP188_SLHA1_convention_xsec_chipm_21</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="1199" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="1199" bodyend="1204"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1a49f2c80e8172f9ad12b377a19644609c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::ALEPH_Selectron_Conservative_LLike</definition>
        <argsstring>(double &amp;result)</argsstring>
        <name>ALEPH_Selectron_Conservative_LLike</name>
        <qualifiedname>Gambit::ColliderBit::ALEPH_Selectron_Conservative_LLike</qualifiedname>
        <param>
          <type>double &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>LEP Slepton Log-Likelihoods </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="1210" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="1210" bodyend="1276"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1af4859a0f475494a2a306b840d30f4566" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::ALEPH_Smuon_Conservative_LLike</definition>
        <argsstring>(double &amp;result)</argsstring>
        <name>ALEPH_Smuon_Conservative_LLike</name>
        <qualifiedname>Gambit::ColliderBit::ALEPH_Smuon_Conservative_LLike</qualifiedname>
        <param>
          <type>double &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="1278" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="1278" bodyend="1344"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1a6fa06071735829f4208f0f3d2d741518" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::ALEPH_Stau_Conservative_LLike</definition>
        <argsstring>(double &amp;result)</argsstring>
        <name>ALEPH_Stau_Conservative_LLike</name>
        <qualifiedname>Gambit::ColliderBit::ALEPH_Stau_Conservative_LLike</qualifiedname>
        <param>
          <type>double &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="1346" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="1346" bodyend="1414"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1aceaaf830599122efc50f46a7867b72f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::L3_Selectron_Conservative_LLike</definition>
        <argsstring>(double &amp;result)</argsstring>
        <name>L3_Selectron_Conservative_LLike</name>
        <qualifiedname>Gambit::ColliderBit::L3_Selectron_Conservative_LLike</qualifiedname>
        <param>
          <type>double &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="1416" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="1416" bodyend="1483"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1a041127277e4f449a61f9574cafc313cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::L3_Smuon_Conservative_LLike</definition>
        <argsstring>(double &amp;result)</argsstring>
        <name>L3_Smuon_Conservative_LLike</name>
        <qualifiedname>Gambit::ColliderBit::L3_Smuon_Conservative_LLike</qualifiedname>
        <param>
          <type>double &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="1485" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="1485" bodyend="1552"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1a8f86e7ab13cb8e675a761ee9f59799e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::L3_Stau_Conservative_LLike</definition>
        <argsstring>(double &amp;result)</argsstring>
        <name>L3_Stau_Conservative_LLike</name>
        <qualifiedname>Gambit::ColliderBit::L3_Stau_Conservative_LLike</qualifiedname>
        <param>
          <type>double &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="1554" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="1554" bodyend="1622"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1af1fd8e96b08cd4e30df63c4aee39624b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::L3_Neutralino_All_Channels_Conservative_LLike</definition>
        <argsstring>(double &amp;result)</argsstring>
        <name>L3_Neutralino_All_Channels_Conservative_LLike</name>
        <qualifiedname>Gambit::ColliderBit::L3_Neutralino_All_Channels_Conservative_LLike</qualifiedname>
        <param>
          <type>double &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>LEP Gaugino Log-Likelihoods </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="1627" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="1627" bodyend="1751"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1a341897648962e2c1f4195c268018f696" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::L3_Neutralino_Leptonic_Conservative_LLike</definition>
        <argsstring>(double &amp;result)</argsstring>
        <name>L3_Neutralino_Leptonic_Conservative_LLike</name>
        <qualifiedname>Gambit::ColliderBit::L3_Neutralino_Leptonic_Conservative_LLike</qualifiedname>
        <param>
          <type>double &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="1753" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="1753" bodyend="1868"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1ab52d32081caf4be86fe61b9bc108b77c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::L3_Chargino_All_Channels_Conservative_LLike</definition>
        <argsstring>(double &amp;result)</argsstring>
        <name>L3_Chargino_All_Channels_Conservative_LLike</name>
        <qualifiedname>Gambit::ColliderBit::L3_Chargino_All_Channels_Conservative_LLike</qualifiedname>
        <param>
          <type>double &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="1870" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="1870" bodyend="1950"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1ae1a89b6e07bfef9bcb2eb0ddf118f625" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::L3_Chargino_Leptonic_Conservative_LLike</definition>
        <argsstring>(double &amp;result)</argsstring>
        <name>L3_Chargino_Leptonic_Conservative_LLike</name>
        <qualifiedname>Gambit::ColliderBit::L3_Chargino_Leptonic_Conservative_LLike</qualifiedname>
        <param>
          <type>double &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="1952" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="1952" bodyend="2038"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1a88f1c4ac6ffee25c84621218d772ebac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::OPAL_Chargino_Hadronic_Conservative_LLike</definition>
        <argsstring>(double &amp;result)</argsstring>
        <name>OPAL_Chargino_Hadronic_Conservative_LLike</name>
        <qualifiedname>Gambit::ColliderBit::OPAL_Chargino_Hadronic_Conservative_LLike</qualifiedname>
        <param>
          <type>double &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="2040" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="2040" bodyend="2118"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1a8ca6445d271599ba4f2d241d1f88765b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::OPAL_Chargino_SemiLeptonic_Conservative_LLike</definition>
        <argsstring>(double &amp;result)</argsstring>
        <name>OPAL_Chargino_SemiLeptonic_Conservative_LLike</name>
        <qualifiedname>Gambit::ColliderBit::OPAL_Chargino_SemiLeptonic_Conservative_LLike</qualifiedname>
        <param>
          <type>double &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="2120" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="2120" bodyend="2246"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1a5fc3f81d872f4a4d9a1614112f98d922" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::OPAL_Chargino_Leptonic_Conservative_LLike</definition>
        <argsstring>(double &amp;result)</argsstring>
        <name>OPAL_Chargino_Leptonic_Conservative_LLike</name>
        <qualifiedname>Gambit::ColliderBit::OPAL_Chargino_Leptonic_Conservative_LLike</qualifiedname>
        <param>
          <type>double &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="2248" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="2248" bodyend="2353"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1ab7321bec3295b7f37859ed13ea86db5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::OPAL_Degenerate_Chargino_Conservative_LLike</definition>
        <argsstring>(double &amp;result)</argsstring>
        <name>OPAL_Degenerate_Chargino_Conservative_LLike</name>
        <qualifiedname>Gambit::ColliderBit::OPAL_Degenerate_Chargino_Conservative_LLike</qualifiedname>
        <param>
          <type>double &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="2358" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="2358" bodyend="2395"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1a00bec4a8f688bf46f54c6c420e414e16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::OPAL_Chargino_All_Channels_Conservative_LLike</definition>
        <argsstring>(double &amp;result)</argsstring>
        <name>OPAL_Chargino_All_Channels_Conservative_LLike</name>
        <qualifiedname>Gambit::ColliderBit::OPAL_Chargino_All_Channels_Conservative_LLike</qualifiedname>
        <param>
          <type>double &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="2398" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="2398" bodyend="2494"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1ac096fc5a2e23216830011394c865bbbd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::OPAL_Neutralino_Hadronic_Conservative_LLike</definition>
        <argsstring>(double &amp;result)</argsstring>
        <name>OPAL_Neutralino_Hadronic_Conservative_LLike</name>
        <qualifiedname>Gambit::ColliderBit::OPAL_Neutralino_Hadronic_Conservative_LLike</qualifiedname>
        <param>
          <type>double &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="2496" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="2496" bodyend="2602"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="lep__mssm__xsecs_8cpp_1a677234e706d36fbf0d69ea4aa36da071" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gambit::ColliderBit::I1</definition>
        <argsstring>(double s, double m1, double m2, double mk, double ml)</argsstring>
        <name>I1</name>
        <qualifiedname>Gambit::ColliderBit::I1</qualifiedname>
        <param>
          <type>double</type>
          <declname>s</declname>
        </param>
        <param>
          <type>double</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>m2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>mk</declname>
        </param>
        <param>
          <type>double</type>
          <declname>ml</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Integrals for t-channel neutralino diagrams m1 and m2 are masses of final state sleptons mk and ml are neutralino masses </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/lep_mssm_xsecs.cpp" line="295" column="12" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/lep_mssm_xsecs.cpp" bodystart="295" bodyend="314"/>
      </memberdef>
      <memberdef kind="function" id="lep__mssm__xsecs_8cpp_1a542968f21cd6ea97fa35a259c1867b41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gambit::ColliderBit::I2</definition>
        <argsstring>(double s, double m1, double m2, double mk, double ml)</argsstring>
        <name>I2</name>
        <qualifiedname>Gambit::ColliderBit::I2</qualifiedname>
        <param>
          <type>double</type>
          <declname>s</declname>
        </param>
        <param>
          <type>double</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>m2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>mk</declname>
        </param>
        <param>
          <type>double</type>
          <declname>ml</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/lep_mssm_xsecs.cpp" line="315" column="12" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/lep_mssm_xsecs.cpp" bodystart="315" bodyend="336"/>
      </memberdef>
      <memberdef kind="function" id="lep__mssm__xsecs_8cpp_1a4f0f4abb63ed791a4fcf32df0d122b98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gambit::ColliderBit::I3</definition>
        <argsstring>(double s, double m1, double m2, double mk)</argsstring>
        <name>I3</name>
        <qualifiedname>Gambit::ColliderBit::I3</qualifiedname>
        <param>
          <type>double</type>
          <declname>s</declname>
        </param>
        <param>
          <type>double</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>m2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>mk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/lep_mssm_xsecs.cpp" line="337" column="12" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/lep_mssm_xsecs.cpp" bodystart="337" bodyend="349"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="ColliderBit__eventloop__utils_8hpp_1a91095741eaea51618dcf3475adfb8bfa" prot="public" static="no" strong="no">
        <type></type>
        <name>specialIterations</name>
        <qualifiedname>Gambit::ColliderBit::specialIterations</qualifiedname>
        <enumvalue id="ColliderBit__eventloop__utils_8hpp_1a91095741eaea51618dcf3475adfb8bfaa91149f80154dd6342fc7af5612d5a6f5" prot="public">
          <name>BASE_INIT</name>
          <initializer>= -1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ColliderBit__eventloop__utils_8hpp_1a91095741eaea51618dcf3475adfb8bfaa0128f7dcbf73e944a9e7a1e477e8bab0" prot="public">
          <name>COLLIDER_INIT</name>
          <initializer>= -2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ColliderBit__eventloop__utils_8hpp_1a91095741eaea51618dcf3475adfb8bfaacb57744083d8053a429fa21ea32ef698" prot="public">
          <name>COLLIDER_INIT_OMP</name>
          <initializer>= -3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ColliderBit__eventloop__utils_8hpp_1a91095741eaea51618dcf3475adfb8bfaaa18ae56e556ea35879b47620e3aaa91f" prot="public">
          <name>XSEC_CALCULATION</name>
          <initializer>= -4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ColliderBit__eventloop__utils_8hpp_1a91095741eaea51618dcf3475adfb8bfaae8b912caede7a08a2754ba04c76299fb" prot="public">
          <name>START_SUBPROCESS</name>
          <initializer>= -5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ColliderBit__eventloop__utils_8hpp_1a91095741eaea51618dcf3475adfb8bfaa59628c150143beb5270e2953c2162718" prot="public">
          <name>COLLECT_CONVERGENCE_DATA</name>
          <initializer>= -6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ColliderBit__eventloop__utils_8hpp_1a91095741eaea51618dcf3475adfb8bfaa4debd4caafa131a22008fdaf3cb36ed8" prot="public">
          <name>CHECK_CONVERGENCE</name>
          <initializer>= -7</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ColliderBit__eventloop__utils_8hpp_1a91095741eaea51618dcf3475adfb8bfaa5214e29311d21e255a60c81549277752" prot="public">
          <name>END_SUBPROCESS</name>
          <initializer>= -8</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ColliderBit__eventloop__utils_8hpp_1a91095741eaea51618dcf3475adfb8bfaa633eac65f689bad910b85d3b4d207f94" prot="public">
          <name>COLLIDER_FINALIZE</name>
          <initializer>= -9</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ColliderBit__eventloop__utils_8hpp_1a91095741eaea51618dcf3475adfb8bfaa01bc278071b001ad755087d6aaf9948c" prot="public">
          <name>BASE_FINALIZE</name>
          <initializer>= -10</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Special iteration labels for the loop controlled by operateLHCLoop. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_eventloop_utils.hpp" line="50" column="5" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_eventloop_utils.hpp" bodystart="50" bodyend="59"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="ColliderBit__types_8hpp_1af4e18c779aec3bf30f9482e95cef78eb" prot="public" static="no">
        <type>std::vector&lt; <ref refid="structGambit_1_1ColliderBit_1_1AnalysisData" kindref="compound">AnalysisData</ref> &gt;</type>
        <definition>typedef std::vector&lt;AnalysisData&gt; Gambit::ColliderBit::AnalysisNumbers</definition>
        <argsstring></argsstring>
        <name>AnalysisNumbers</name>
        <qualifiedname>Gambit::ColliderBit::AnalysisNumbers</qualifiedname>
        <briefdescription>
<para>Container for data from multiple analyses and SRs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_types.hpp" line="69" column="25" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_types.hpp" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="ColliderBit__types_8hpp_1a03c2e9b2a191cef3d43ee07d33ff7034" prot="public" static="no">
        <type>std::vector&lt; <ref refid="structGambit_1_1ColliderBit_1_1AnalysisData" kindref="compound">AnalysisData</ref> * &gt;</type>
        <definition>typedef std::vector&lt;AnalysisData*&gt; Gambit::ColliderBit::AnalysisDataPointers</definition>
        <argsstring></argsstring>
        <name>AnalysisDataPointers</name>
        <qualifiedname>Gambit::ColliderBit::AnalysisDataPointers</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_types.hpp" line="70" column="25" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_types.hpp" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="ColliderBit__types_8hpp_1ade4399591a1439faab3ff177475b4c4a" prot="public" static="no">
        <type>std::map&lt; std::string, <ref refid="structGambit_1_1ColliderBit_1_1AnalysisLogLikes" kindref="compound">AnalysisLogLikes</ref> &gt;</type>
        <definition>typedef std::map&lt;std::string,AnalysisLogLikes&gt; Gambit::ColliderBit::map_str_AnalysisLogLikes</definition>
        <argsstring></argsstring>
        <name>map_str_AnalysisLogLikes</name>
        <qualifiedname>Gambit::ColliderBit::map_str_AnalysisLogLikes</qualifiedname>
        <briefdescription>
<para>Typedef for a string-to-AnalysisLogLikes map. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_types.hpp" line="90" column="22" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_types.hpp" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="ColliderBit__types_8hpp_1ad3a119f85427a4b95e335197d8a3bf42" prot="public" static="no">
        <type>std::vector&lt; <ref refid="classGambit_1_1ColliderBit_1_1AnalysisContainer" kindref="compound">AnalysisContainer</ref> &gt;</type>
        <definition>typedef std::vector&lt;AnalysisContainer&gt; Gambit::ColliderBit::AnalysisContainers</definition>
        <argsstring></argsstring>
        <name>AnalysisContainers</name>
        <qualifiedname>Gambit::ColliderBit::AnalysisContainers</qualifiedname>
        <briefdescription>
<para>Container for multiple analysis containers. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_types.hpp" line="93" column="25" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_types.hpp" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="ColliderBit__types_8hpp_1a502dd0eb90762acb94c2987b7e8f0e77" prot="public" static="no">
        <type>std::chrono::milliseconds</type>
        <definition>typedef std::chrono::milliseconds Gambit::ColliderBit::ms</definition>
        <argsstring></argsstring>
        <name>ms</name>
        <qualifiedname>Gambit::ColliderBit::ms</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_types.hpp" line="95" column="39" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_types.hpp" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="ColliderBit__types_8hpp_1ab1df4591dd29470c2c0bc66232f8b4be" prot="public" static="no">
        <type>std::chrono::steady_clock</type>
        <definition>typedef std::chrono::steady_clock Gambit::ColliderBit::steady_clock</definition>
        <argsstring></argsstring>
        <name>steady_clock</name>
        <qualifiedname>Gambit::ColliderBit::steady_clock</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_types.hpp" line="96" column="39" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_types.hpp" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="ColliderBit__types_8hpp_1a3a59a843ca5a8723eb0a3b73a00378b6" prot="public" static="no">
        <type>std::chrono::steady_clock::time_point</type>
        <definition>typedef std::chrono::steady_clock::time_point Gambit::ColliderBit::tp</definition>
        <argsstring></argsstring>
        <name>tp</name>
        <qualifiedname>Gambit::ColliderBit::tp</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_types.hpp" line="97" column="51" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_types.hpp" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="ColliderBit__types_8hpp_1aca0e342504c6b2886e416cdf8d453e1d" prot="public" static="no">
        <type>std::map&lt; std::string, double &gt;</type>
        <definition>typedef std::map&lt;std::string,double&gt; Gambit::ColliderBit::timer_map_type</definition>
        <argsstring></argsstring>
        <name>timer_map_type</name>
        <qualifiedname>Gambit::ColliderBit::timer_map_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_types.hpp" line="98" column="22" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_types.hpp" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="ColliderBit__types_8hpp_1ad4d446c9a8bb65e44ade638ffbe133a0" prot="public" static="no">
        <type>std::pair&lt; std::string, SLHAstruct &gt;</type>
        <definition>typedef std::pair&lt;std::string,SLHAstruct&gt; Gambit::ColliderBit::pair_str_SLHAstruct</definition>
        <argsstring></argsstring>
        <name>pair_str_SLHAstruct</name>
        <qualifiedname>Gambit::ColliderBit::pair_str_SLHAstruct</qualifiedname>
        <briefdescription>
<para>Typedef for a str-SLHAstruct pair, to pass around SLHA filenames + content. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_types.hpp" line="101" column="23" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_types.hpp" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="ColliderBit__types_8hpp_1a6185dd54ccf97c030742e964a64b41c2" prot="public" static="no">
        <type>std::vector&lt; std::pair&lt; int, int &gt; &gt;</type>
        <definition>typedef std::vector&lt;std::pair&lt;int,int&gt; &gt; Gambit::ColliderBit::vec_iipair</definition>
        <argsstring></argsstring>
        <name>vec_iipair</name>
        <qualifiedname>Gambit::ColliderBit::vec_iipair</qualifiedname>
        <briefdescription>
<para>Typedefs related to cross-sections. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_types.hpp" line="108" column="25" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_types.hpp" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="ColliderBit__types_8hpp_1ae03ffa6e873995b8378eb8da25db5bfb" prot="public" static="no">
        <type>std::vector&lt; PID_pair &gt;</type>
        <definition>typedef std::vector&lt;PID_pair&gt; Gambit::ColliderBit::vec_PID_pair</definition>
        <argsstring></argsstring>
        <name>vec_PID_pair</name>
        <qualifiedname>Gambit::ColliderBit::vec_PID_pair</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_types.hpp" line="109" column="25" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_types.hpp" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="ColliderBit__types_8hpp_1ad008c0bdd3830c346c02dfbe734e86e6" prot="public" static="no">
        <type>std::multimap&lt; int, std::pair&lt; int, int &gt; &gt;</type>
        <definition>typedef std::multimap&lt;int,std::pair&lt;int,int&gt; &gt; Gambit::ColliderBit::multimap_int_iipair</definition>
        <argsstring></argsstring>
        <name>multimap_int_iipair</name>
        <qualifiedname>Gambit::ColliderBit::multimap_int_iipair</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_types.hpp" line="111" column="27" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_types.hpp" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="ColliderBit__types_8hpp_1acbf8cf327676b85cd157bd4260869964" prot="public" static="no">
        <type>std::multimap&lt; int, PID_pair &gt;</type>
        <definition>typedef std::multimap&lt;int,PID_pair&gt; Gambit::ColliderBit::multimap_int_PID_pair</definition>
        <argsstring></argsstring>
        <name>multimap_int_PID_pair</name>
        <qualifiedname>Gambit::ColliderBit::multimap_int_PID_pair</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_types.hpp" line="112" column="27" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_types.hpp" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="ColliderBit__types_8hpp_1ae6bc7c80897e1af1ed6dad6daced868e" prot="public" static="no">
        <type>std::multimap&lt; PID_pair, int &gt;</type>
        <definition>typedef std::multimap&lt;PID_pair,int&gt; Gambit::ColliderBit::multimap_PID_pair_int</definition>
        <argsstring></argsstring>
        <name>multimap_PID_pair_int</name>
        <qualifiedname>Gambit::ColliderBit::multimap_PID_pair_int</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_types.hpp" line="114" column="27" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_types.hpp" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="ColliderBit__types_8hpp_1a50acb9ab74e383c6925d7f101a80915d" prot="public" static="no">
        <type>std::map&lt; int, <ref refid="classGambit_1_1ColliderBit_1_1xsec__container" kindref="compound">xsec_container</ref> &gt;</type>
        <definition>typedef std::map&lt;int,xsec_container&gt; Gambit::ColliderBit::map_int_xsec</definition>
        <argsstring></argsstring>
        <name>map_int_xsec</name>
        <qualifiedname>Gambit::ColliderBit::map_int_xsec</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_types.hpp" line="116" column="22" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_types.hpp" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="ColliderBit__types_8hpp_1a3ed0a98d57d1b013f4958b69c9af5304" prot="public" static="no">
        <type>std::map&lt; int, <ref refid="classGambit_1_1ColliderBit_1_1process__xsec__container" kindref="compound">process_xsec_container</ref> &gt;</type>
        <definition>typedef std::map&lt;int,process_xsec_container&gt; Gambit::ColliderBit::map_int_process_xsec</definition>
        <argsstring></argsstring>
        <name>map_int_process_xsec</name>
        <qualifiedname>Gambit::ColliderBit::map_int_process_xsec</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_types.hpp" line="117" column="22" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_types.hpp" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="ColliderBit__types_8hpp_1a478a5bef541b3ecc347ac00b67e58b9e" prot="public" static="no">
        <type>std::map&lt; std::pair&lt; int, int &gt;, <ref refid="classGambit_1_1ColliderBit_1_1PID__pair__xsec__container" kindref="compound">PID_pair_xsec_container</ref> &gt;</type>
        <definition>typedef std::map&lt;std::pair&lt;int,int&gt;,PID_pair_xsec_container&gt; Gambit::ColliderBit::map_iipair_PID_pair_xsec</definition>
        <argsstring></argsstring>
        <name>map_iipair_PID_pair_xsec</name>
        <qualifiedname>Gambit::ColliderBit::map_iipair_PID_pair_xsec</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_types.hpp" line="119" column="22" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_types.hpp" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="ColliderBit__types_8hpp_1a41d6b0f56233d3b60ca542e1ad8c485e" prot="public" static="no">
        <type>std::map&lt; PID_pair, <ref refid="classGambit_1_1ColliderBit_1_1PID__pair__xsec__container" kindref="compound">PID_pair_xsec_container</ref> &gt;</type>
        <definition>typedef std::map&lt;PID_pair,PID_pair_xsec_container&gt; Gambit::ColliderBit::map_PID_pair_PID_pair_xsec</definition>
        <argsstring></argsstring>
        <name>map_PID_pair_PID_pair_xsec</name>
        <qualifiedname>Gambit::ColliderBit::map_PID_pair_PID_pair_xsec</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_types.hpp" line="120" column="22" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_types.hpp" bodystart="120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="ColliderBit__types_8hpp_1a22df7e72f7ba90d0967c644528b0e54c" prot="public" static="no">
        <type>HEPUtils::Event</type>
        <definition>typedef HEPUtils::Event Gambit::ColliderBit::HEPUtils_Event</definition>
        <argsstring></argsstring>
        <name>HEPUtils_Event</name>
        <qualifiedname>Gambit::ColliderBit::HEPUtils_Event</qualifiedname>
        <briefdescription>
<para>Typedef for a std::function that sets the weight for the input HEPUtils::Event. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_types.hpp" line="123" column="29" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_types.hpp" bodystart="123" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="ColliderBit__types_8hpp_1a91ce93061c7008c7415b9d2eedc8a7e9" prot="public" static="no">
        <type>std::function&lt; void(<ref refid="ColliderBit__types_8hpp_1a22df7e72f7ba90d0967c644528b0e54c" kindref="member">HEPUtils_Event</ref> &amp;, const <ref refid="classGambit_1_1ColliderBit_1_1BaseCollider" kindref="compound">BaseCollider</ref> *)&gt;</type>
        <definition>typedef std::function&lt;void(HEPUtils_Event&amp;, const BaseCollider*)&gt; Gambit::ColliderBit::EventWeighterFunctionType</definition>
        <argsstring></argsstring>
        <name>EventWeighterFunctionType</name>
        <qualifiedname>Gambit::ColliderBit::EventWeighterFunctionType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_types.hpp" line="124" column="27" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/ColliderBit_types.hpp" bodystart="124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="lep__mssm__xsecs_8hpp_1a4258ff02bfd4c7757d7804d4149d8afe" prot="public" static="no">
        <type>std::vector&lt; std::vector&lt; double &gt; &gt;</type>
        <definition>typedef std::vector&lt; std::vector&lt;double&gt; &gt; Gambit::ColliderBit::MixMatrix</definition>
        <argsstring></argsstring>
        <name>MixMatrix</name>
        <qualifiedname>Gambit::ColliderBit::MixMatrix</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/lep_mssm_xsecs.hpp" line="56" column="25" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/lep_mssm_xsecs.hpp" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="ImageLimit_8hpp_1a3c644e1cb62fb81b7eb235c6bafd3e76" prot="public" static="no">
        <type>std::vector&lt; std::vector&lt; double &gt; &gt;</type>
        <definition>typedef std::vector&lt;std::vector&lt;double&gt; &gt; Gambit::ColliderBit::data_type</definition>
        <argsstring></argsstring>
        <name>data_type</name>
        <qualifiedname>Gambit::ColliderBit::data_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/limits/ImageLimit.hpp" line="33" column="25" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/limits/ImageLimit.hpp" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="Utils_8hpp_1afc91bf707d036dcd1ddc79abcce7081c" prot="public" static="no">
        <type>std::vector&lt; const HEPUtils::Particle * &gt;</type>
        <definition>typedef std::vector&lt;const HEPUtils::Particle*&gt; Gambit::ColliderBit::ParticlePtrs</definition>
        <argsstring></argsstring>
        <name>ParticlePtrs</name>
        <qualifiedname>Gambit::ColliderBit::ParticlePtrs</qualifiedname>
        <briefdescription>
<para>Typedef for a vector of Particle pointers. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/Utils.hpp" line="53" column="25" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/Utils.hpp" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="Utils_8hpp_1a806fd1423cb4a2e7e676c6fb4df31e80" prot="public" static="no">
        <type>std::vector&lt; const HEPUtils::Jet * &gt;</type>
        <definition>typedef std::vector&lt;const HEPUtils::Jet*&gt; Gambit::ColliderBit::JetPtrs</definition>
        <argsstring></argsstring>
        <name>JetPtrs</name>
        <qualifiedname>Gambit::ColliderBit::JetPtrs</qualifiedname>
        <briefdescription>
<para>Typedef for a vector of Jet pointers. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/Utils.hpp" line="56" column="25" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/Utils.hpp" bodystart="56" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="complete__process__PID__pair__multimaps_8hpp_1ab855b853a4f0faf94d4001cdafefd1ea" prot="public" static="yes" mutable="no">
        <type>const multimap_int_PID_pair</type>
        <definition>const multimap_int_PID_pair Gambit::ColliderBit::all_process_codes_to_PID_pairs</definition>
        <argsstring></argsstring>
        <name>all_process_codes_to_PID_pairs</name>
        <qualifiedname>Gambit::ColliderBit::all_process_codes_to_PID_pairs</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/complete_process_PID_pair_multimaps.hpp" line="42" column="40" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/complete_process_PID_pair_multimaps.hpp" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="L3SleptonLimits_8hpp_1a89ec4b21b4f69118954fb74578659970" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr double</type>
        <definition>constexpr double Gambit::ColliderBit::sqrtsGeV</definition>
        <argsstring></argsstring>
        <name>sqrtsGeV</name>
        <qualifiedname>Gambit::ColliderBit::sqrtsGeV</qualifiedname>
        <initializer>= 205</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/limits/L3SleptonLimits.hpp" line="8" column="33" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/limits/L3SleptonLimits.hpp" bodystart="8" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="Utils_8hpp_1a19d3be5453ac0567d90918d7266cd95f" prot="public" static="yes" mutable="no">
        <type>const double</type>
        <definition>const double Gambit::ColliderBit::GeV</definition>
        <argsstring></argsstring>
        <name>GeV</name>
        <qualifiedname>Gambit::ColliderBit::GeV</qualifiedname>
        <initializer>= 1</initializer>
        <briefdescription>
<para>Unit conversions (multiply to construct in standard units, divide to decode to that unit) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/Utils.hpp" line="37" column="25" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/Utils.hpp" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="Utils_8hpp_1a0a77d3b27f7e6221e1b9e3214b312fed" prot="public" static="yes" mutable="no">
        <type>const double</type>
        <definition>const double Gambit::ColliderBit::MeV</definition>
        <argsstring></argsstring>
        <name>MeV</name>
        <qualifiedname>Gambit::ColliderBit::MeV</qualifiedname>
        <initializer>= 1e-3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/Utils.hpp" line="37" column="30" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/Utils.hpp" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="Utils_8hpp_1abf9efc3c043a8c68173ca1e4e693bd70" prot="public" static="yes" mutable="no">
        <type>const double</type>
        <definition>const double Gambit::ColliderBit::TeV</definition>
        <argsstring></argsstring>
        <name>TeV</name>
        <qualifiedname>Gambit::ColliderBit::TeV</qualifiedname>
        <initializer>= 1e3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/Utils.hpp" line="37" column="35" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/Utils.hpp" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="ColliderBit__InterpolatedYields_8cpp_1af1fb89b8d6e6ddc3406d109c275b16f8" prot="public" static="no" mutable="no">
        <type>std::map&lt; str, <ref refid="classGambit_1_1ColliderBit_1_1DMEFT__analysis__info" kindref="compound">DMEFT_analysis_info</ref> &gt;</type>
        <definition>std::map&lt;str,DMEFT_analysis_info&gt; Gambit::ColliderBit::analysis_info_map</definition>
        <argsstring></argsstring>
        <name>analysis_info_map</name>
        <qualifiedname>Gambit::ColliderBit::analysis_info_map</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A global map from analysis name to <ref refid="classGambit_1_1ColliderBit_1_1DMEFT__analysis__info" kindref="compound">DMEFT_analysis_info</ref> instance. This map is initialized by the function fill_analysis_info_map, which is called the first time DMEFT_results run. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_InterpolatedYields.cpp" line="146" column="14" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_InterpolatedYields.cpp" bodystart="146" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="AnalysisContainer_8hpp_1a02a869bd87c56deb16a32a91e08342be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classGambit_1_1ColliderBit_1_1Analysis" kindref="compound">Analysis</ref> *</type>
        <definition>Analysis * Gambit::ColliderBit::mkAnalysis</definition>
        <argsstring>(const str &amp;name)</argsstring>
        <name>mkAnalysis</name>
        <qualifiedname>Gambit::ColliderBit::mkAnalysis</qualifiedname>
        <param>
          <type>const str &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Factory definition. </para>
        </briefdescription>
        <detaileddescription>
<para>Create a new analysis based on a name string <simplesect kind="note"><para>The caller is responsible for deleting the returned analysis object. </para>
</simplesect>
<xrefsect id="todo_1_todo000001"><xreftitle>Todo</xreftitle><xrefdescription><para>Move to a separate file </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/analyses/AnalysisContainer.cpp" line="156" column="14" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/analyses/AnalysisContainer.cpp" bodystart="156" bodyend="169" declfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/analyses/AnalysisContainer.hpp" declline="49" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="AnalysisContainer_8hpp_1a341c31eed591311cea031c6abda1d27d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>str</type>
        <definition>str Gambit::ColliderBit::getDetector</definition>
        <argsstring>(const str &amp;name)</argsstring>
        <name>getDetector</name>
        <qualifiedname>Gambit::ColliderBit::getDetector</qualifiedname>
        <param>
          <type>const str &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Return the detector to be used for a given analysis name, checking that the analysis exists. </para>
        </briefdescription>
        <detaileddescription>
<para>Return the detector to be used for a given analysis name (and check that the analysis exists). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/analyses/AnalysisContainer.cpp" line="176" column="9" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/analyses/AnalysisContainer.cpp" bodystart="176" bodyend="189" declfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/analyses/AnalysisContainer.hpp" declline="52" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="Cutflow_8hpp_1a427d97eb6356b7736eb6b84c4d928d6b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; Gambit::ColliderBit::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Cutflow &amp;cf)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>Gambit::ColliderBit::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="structGambit_1_1ColliderBit_1_1Cutflow" kindref="compound">Cutflow</ref> &amp;</type>
          <declname>cf</declname>
        </param>
        <briefdescription>
<para>Print a <ref refid="structGambit_1_1ColliderBit_1_1Cutflow" kindref="compound">Cutflow</ref> to a stream. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/analyses/Cutflow.hpp" line="207" column="12" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/analyses/Cutflow.hpp" bodystart="207" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="Cutflow_8hpp_1ad987fe43b572c341a8e9bba546adfe61" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; Gambit::ColliderBit::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Cutflows &amp;cfs)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>Gambit::ColliderBit::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="structGambit_1_1ColliderBit_1_1Cutflows" kindref="compound">Cutflows</ref> &amp;</type>
          <declname>cfs</declname>
        </param>
        <briefdescription>
<para>Print a <ref refid="structGambit_1_1ColliderBit_1_1Cutflows" kindref="compound">Cutflows</ref> to a stream. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/analyses/Cutflow.hpp" line="364" column="12" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/analyses/Cutflow.hpp" bodystart="364" bodyend="367"/>
      </memberdef>
      <memberdef kind="function" id="Py8EventConversions_8hpp_1ab50b344a3140f50cdc0b43f1437274de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename EventT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Gambit::ColliderBit::convertParticleEvent</definition>
        <argsstring>(const EventT &amp;pevt, HEPUtils::Event &amp;result, double antiktR, double jet_pt_min)</argsstring>
        <name>convertParticleEvent</name>
        <qualifiedname>Gambit::ColliderBit::convertParticleEvent</qualifiedname>
        <param>
          <type>const EventT &amp;</type>
          <declname>pevt</declname>
        </param>
        <param>
          <type>HEPUtils::Event &amp;</type>
          <declname>result</declname>
        </param>
        <param>
          <type>double</type>
          <declname>antiktR</declname>
        </param>
        <param>
          <type>double</type>
          <declname>jet_pt_min</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert a hadron-level EventT into an unsmeared HEPUtils::Event <xrefsect id="todo_1_todo000018"><xreftitle>Todo</xreftitle><xrefdescription><para>Overlap between jets and prompt containers: need some isolation in MET calculation </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
<para><xrefsect id="todo_1_todo000019"><xreftitle>Todo</xreftitle><xrefdescription><para>Temporarily using quark-based tagging instead <ndash/> fix </para>
</xrefdescription></xrefsect></para>
<para><xrefsect id="todo_1_todo000020"><xreftitle>Todo</xreftitle><xrefdescription><para>Temporarily using quark-based tagging instead <ndash/> fix </para>
</xrefdescription></xrefsect></para>
<para><xrefsect id="todo_1_todo000021"><xreftitle>Todo</xreftitle><xrefdescription><para>What&apos;s wrong with having a W daughter? Doesn&apos;t that just mark a final tau? </para>
</xrefdescription></xrefsect></para>
<para><xrefsect id="todo_1_todo000022"><xreftitle>Todo</xreftitle><xrefdescription><para>Move out-of-acceptance MET contribution to <ref refid="classGambit_1_1ColliderBit_1_1BuckFast" kindref="compound">BuckFast</ref> </para>
</xrefdescription></xrefsect></para>
<para>Jet finding <xrefsect id="todo_1_todo000023"><xreftitle>Todo</xreftitle><xrefdescription><para>Choose jet algorithm via detector _settings? Run several algs? </para>
</xrefdescription></xrefsect></para>
<para>Do jet b-tagging, etc. and add to the Event <xrefsect id="todo_1_todo000024"><xreftitle>Todo</xreftitle><xrefdescription><para>Use ghost tagging? </para>
</xrefdescription></xrefsect><simplesect kind="note"><para>We need to <emphasis>remove</emphasis> this b-tag in the detector sim if outside the tracker acceptance!</para>
</simplesect>
<xrefsect id="todo_1_todo000025"><xreftitle>Todo</xreftitle><xrefdescription><para>Replace with HEPUtils::any(bhadrons, [&amp;](const auto&amp; pb){ pj.delta_R(pb) &lt; 0.4 }) </para>
</xrefdescription></xrefsect></para>
<para>&lt; <xrefsect id="todo_1_todo000026"><xreftitle>Todo</xreftitle><xrefdescription><para>Hard-coded radius!!! </para>
</xrefdescription></xrefsect></para>
<para>&lt; <xrefsect id="todo_1_todo000027"><xreftitle>Todo</xreftitle><xrefdescription><para>Hard-coded radius!!! </para>
</xrefdescription></xrefsect></para>
<para>&lt; <xrefsect id="todo_1_todo000028"><xreftitle>Todo</xreftitle><xrefdescription><para>Hard-coded radius!!! </para>
</xrefdescription></xrefsect></para>
<para>Calculate missing momentum</para>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/colliders/Pythia8/Py8EventConversions.hpp" line="37" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/colliders/Pythia8/Py8EventConversions.hpp" bodystart="37" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="Py8EventConversions_8hpp_1a42e166b5bdf2ffb8544b4a65edc89976" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename EventT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Gambit::ColliderBit::convertPartonEvent</definition>
        <argsstring>(const EventT &amp;pevt, HEPUtils::Event &amp;result, double antiktR, double jet_pt_min)</argsstring>
        <name>convertPartonEvent</name>
        <qualifiedname>Gambit::ColliderBit::convertPartonEvent</qualifiedname>
        <param>
          <type>const EventT &amp;</type>
          <declname>pevt</declname>
        </param>
        <param>
          <type>HEPUtils::Event &amp;</type>
          <declname>result</declname>
        </param>
        <param>
          <type>double</type>
          <declname>antiktR</declname>
        </param>
        <param>
          <type>double</type>
          <declname>jet_pt_min</declname>
        </param>
        <briefdescription>
<para>Convert a partonic (no hadrons) EventT into an unsmeared HEPUtils::Event. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para><xrefsect id="todo_1_todo000029"><xreftitle>Todo</xreftitle><xrefdescription><para>We should leave this for the detector sim / analysis to deal with </para>
</xrefdescription></xrefsect></para>
<para><xrefsect id="todo_1_todo000030"><xreftitle>Todo</xreftitle><xrefdescription><para><emphasis>Some</emphasis> photons should be included in jets!!! Ignore for now since no FSR </para>
</xrefdescription></xrefsect><xrefsect id="todo_1_todo000031"><xreftitle>Todo</xreftitle><xrefdescription></xrefdescription></xrefsect><xrefsect id="todo_1_todo000032"><xreftitle>Todo</xreftitle><xrefdescription><para>Lepton dressing </para>
</xrefdescription></xrefsect></para>
<para><xrefsect id="todo_1_todo000033"><xreftitle>Todo</xreftitle><xrefdescription><para>Only include hadronic tau fraction? </para>
</xrefdescription></xrefsect></para>
<para>Jet finding <xrefsect id="todo_1_todo000034"><xreftitle>Todo</xreftitle><xrefdescription><para>choose jet algorithm via _settings? </para>
</xrefdescription></xrefsect></para>
<para><simplesect kind="note"><para>This b-tag is removed in the detector sim if outside the tracker acceptance!</para>
</simplesect>
Calculate missing momentum</para>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/colliders/Pythia8/Py8EventConversions.hpp" line="239" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/colliders/Pythia8/Py8EventConversions.hpp" bodystart="239" bodyend="367"/>
      </memberdef>
      <memberdef kind="function" id="complete__process__PID__pair__multimaps_8hpp_1aa00f9200838426661631c91a4990186d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const multimap_PID_pair_int &amp;</type>
        <definition>const multimap_PID_pair_int &amp; Gambit::ColliderBit::all_PID_pairs_to_process_codes</definition>
        <argsstring>()</argsstring>
        <name>all_PID_pairs_to_process_codes</name>
        <qualifiedname>Gambit::ColliderBit::all_PID_pairs_to_process_codes</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/complete_process_PID_pair_multimaps.cpp" line="28" column="33" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/complete_process_PID_pair_multimaps.cpp" bodystart="28" bodyend="48" declfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/complete_process_PID_pair_multimaps.hpp" declline="38" declcolumn="33"/>
      </memberdef>
      <memberdef kind="function" id="generateEventPy8Collider_8hpp_1a9cbda0b8772ada2f012c84c66cd84921" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PythiaT</type>
          </param>
          <param>
            <type>typename hepmc_writerT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Gambit::ColliderBit::dropHepMCEventPy8Collider</definition>
        <argsstring>(const PythiaT *Pythia, const safe_ptr&lt; Options &gt; &amp;runOptions)</argsstring>
        <name>dropHepMCEventPy8Collider</name>
        <qualifiedname>Gambit::ColliderBit::dropHepMCEventPy8Collider</qualifiedname>
        <param>
          <type>const PythiaT *</type>
          <declname>Pythia</declname>
        </param>
        <param>
          <type>const safe_ptr&lt; Options &gt; &amp;</type>
          <declname>runOptions</declname>
        </param>
        <briefdescription>
<para>Drop a HepMC file for the event. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/generateEventPy8Collider.hpp" line="59" column="12" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/generateEventPy8Collider.hpp" bodystart="59" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="generateEventPy8Collider_8hpp_1a15297fb2b1580bb766aa4aa1dab3435c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PythiaT</type>
          </param>
          <param>
            <type>typename EventT</type>
          </param>
          <param>
            <type>typename hepmc_writerT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Gambit::ColliderBit::generateEventPy8Collider</definition>
        <argsstring>(HEPUtils::Event &amp;event, const MCLoopInfo &amp;RunMC, const Py8Collider&lt; PythiaT, EventT, hepmc_writerT &gt; &amp;HardScatteringSim, const EventWeighterFunctionType &amp;EventWeighterFunction, const int iteration, void(*wrapup)(), const safe_ptr&lt; Options &gt; &amp;runOptions)</argsstring>
        <name>generateEventPy8Collider</name>
        <qualifiedname>Gambit::ColliderBit::generateEventPy8Collider</qualifiedname>
        <param>
          <type>HEPUtils::Event &amp;</type>
          <declname>event</declname>
        </param>
        <param>
          <type>const <ref refid="structGambit_1_1ColliderBit_1_1MCLoopInfo" kindref="compound">MCLoopInfo</ref> &amp;</type>
          <declname>RunMC</declname>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1ColliderBit_1_1Py8Collider" kindref="compound">Py8Collider</ref>&lt; PythiaT, EventT, hepmc_writerT &gt; &amp;</type>
          <declname>HardScatteringSim</declname>
        </param>
        <param>
          <type>const EventWeighterFunctionType &amp;</type>
          <declname>EventWeighterFunction</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>iteration</declname>
        </param>
        <param>
          <type>void(*)()</type>
          <declname>wrapup</declname>
        </param>
        <param>
          <type>const safe_ptr&lt; Options &gt; &amp;</type>
          <declname>runOptions</declname>
        </param>
        <briefdescription>
<para>Generate a hard scattering event with Pythia. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/generateEventPy8Collider.hpp" line="89" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/generateEventPy8Collider.hpp" bodystart="89" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="getPy8Collider_8hpp_1a5ede3f4b8295dfe12591687b91521a80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PythiaT</type>
          </param>
          <param>
            <type>typename EventT</type>
          </param>
          <param>
            <type>typename hepmc_writerT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Gambit::ColliderBit::getPy8Collider</definition>
        <argsstring>(Py8Collider&lt; PythiaT, EventT, hepmc_writerT &gt; &amp;result, const MCLoopInfo &amp;RunMC, const SLHAstruct &amp;slha, const str model_suffix, const int iteration, void(*wrapup)(), const Options &amp;runOptions)</argsstring>
        <name>getPy8Collider</name>
        <qualifiedname>Gambit::ColliderBit::getPy8Collider</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1ColliderBit_1_1Py8Collider" kindref="compound">Py8Collider</ref>&lt; PythiaT, EventT, hepmc_writerT &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <param>
          <type>const <ref refid="structGambit_1_1ColliderBit_1_1MCLoopInfo" kindref="compound">MCLoopInfo</ref> &amp;</type>
          <declname>RunMC</declname>
        </param>
        <param>
          <type>const SLHAstruct &amp;</type>
          <declname>slha</declname>
        </param>
        <param>
          <type>const str</type>
          <declname>model_suffix</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>iteration</declname>
        </param>
        <param>
          <type>void(*)()</type>
          <declname>wrapup</declname>
        </param>
        <param>
          <type>const Options &amp;</type>
          <declname>runOptions</declname>
        </param>
        <briefdescription>
<para>Retrieve a Pythia hard-scattering Monte Carlo simulation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/getPy8Collider.hpp" line="52" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/getPy8Collider.hpp" bodystart="52" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="BaseLimitContainer_8hpp_1a79cb77533c3ff48b0ba2b1624436ed09" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGambit_1_1ColliderBit_1_1LineSegment" kindref="compound">LineSegment</ref></type>
        <definition>LineSegment Gambit::ColliderBit::makeLine</definition>
        <argsstring>(const P2 &amp;pt1, const P2 &amp;pt2)</argsstring>
        <name>makeLine</name>
        <qualifiedname>Gambit::ColliderBit::makeLine</qualifiedname>
        <param>
          <type>const <ref refid="classGambit_1_1ColliderBit_1_1P2" kindref="compound">P2</ref> &amp;</type>
          <declname>pt1</declname>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1ColliderBit_1_1P2" kindref="compound">P2</ref> &amp;</type>
          <declname>pt2</declname>
        </param>
        <briefdescription>
<para>Factory function for lines. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/limits/BaseLimitContainer.hpp" line="43" column="24" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/limits/BaseLimitContainer.hpp" bodystart="43" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="PointsAndLines_8hpp_1a441695392e8497ae0071043b7549a70a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double Gambit::ColliderBit::addInQuad</definition>
        <argsstring>(const double &amp;a, const double &amp;b)</argsstring>
        <name>addInQuad</name>
        <qualifiedname>Gambit::ColliderBit::addInQuad</qualifiedname>
        <param>
          <type>const double &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Add two numbers in quadrature. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="todo_1_todo000039"><xreftitle>Todo</xreftitle><xrefdescription><para>Use HEPUtils add_quad </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/limits/PointsAndLines.hpp" line="13" column="19" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/limits/PointsAndLines.hpp" bodystart="13" bodyend="13"/>
      </memberdef>
      <memberdef kind="function" id="Analysis__ATLAS__13TeV__0LEPStop__36invfb_8cpp_1ab6962246026e42a7ef55cad5ac535a61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gambit::ColliderBit::sortByPT13</definition>
        <argsstring>(const HEPUtils::Jet *jet1, const HEPUtils::Jet *jet2)</argsstring>
        <name>sortByPT13</name>
        <qualifiedname>Gambit::ColliderBit::sortByPT13</qualifiedname>
        <param>
          <type>const HEPUtils::Jet *</type>
          <declname>jet1</declname>
        </param>
        <param>
          <type>const HEPUtils::Jet *</type>
          <declname>jet2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/analyses/Analysis_ATLAS_13TeV_0LEPStop_36invfb.cpp" line="34" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/analyses/Analysis_ATLAS_13TeV_0LEPStop_36invfb.cpp" bodystart="34" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="Analysis__ATLAS__13TeV__0LEPStop__36invfb_8cpp_1a1301b195a5480cd644cbcf23e69c2d85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gambit::ColliderBit::sortByPT13_sharedptr</definition>
        <argsstring>(std::shared_ptr&lt; HEPUtils::Jet &gt; jet1, std::shared_ptr&lt; HEPUtils::Jet &gt; jet2)</argsstring>
        <name>sortByPT13_sharedptr</name>
        <qualifiedname>Gambit::ColliderBit::sortByPT13_sharedptr</qualifiedname>
        <param>
          <type>std::shared_ptr&lt; HEPUtils::Jet &gt;</type>
          <declname>jet1</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; HEPUtils::Jet &gt;</type>
          <declname>jet2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/analyses/Analysis_ATLAS_13TeV_0LEPStop_36invfb.cpp" line="35" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/analyses/Analysis_ATLAS_13TeV_0LEPStop_36invfb.cpp" bodystart="35" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="Analysis__ATLAS__13TeV__0LEPStop__36invfb_8cpp_1a5fa299ab59a058523e20559db4f72729" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gambit::ColliderBit::sortByMass</definition>
        <argsstring>(const HEPUtils::Jet *jet1, const HEPUtils::Jet *jet2)</argsstring>
        <name>sortByMass</name>
        <qualifiedname>Gambit::ColliderBit::sortByMass</qualifiedname>
        <param>
          <type>const HEPUtils::Jet *</type>
          <declname>jet1</declname>
        </param>
        <param>
          <type>const HEPUtils::Jet *</type>
          <declname>jet2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/analyses/Analysis_ATLAS_13TeV_0LEPStop_36invfb.cpp" line="38" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/analyses/Analysis_ATLAS_13TeV_0LEPStop_36invfb.cpp" bodystart="38" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="Analysis__ATLAS__13TeV__0LEPStop__36invfb_8cpp_1a35cfdd907e2eafd80b8f0f28d38ab759" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gambit::ColliderBit::sortByMass_sharedptr</definition>
        <argsstring>(std::shared_ptr&lt; HEPUtils::Jet &gt; jet1, std::shared_ptr&lt; HEPUtils::Jet &gt; jet2)</argsstring>
        <name>sortByMass_sharedptr</name>
        <qualifiedname>Gambit::ColliderBit::sortByMass_sharedptr</qualifiedname>
        <param>
          <type>std::shared_ptr&lt; HEPUtils::Jet &gt;</type>
          <declname>jet1</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; HEPUtils::Jet &gt;</type>
          <declname>jet2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/analyses/Analysis_ATLAS_13TeV_0LEPStop_36invfb.cpp" line="39" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/analyses/Analysis_ATLAS_13TeV_0LEPStop_36invfb.cpp" bodystart="39" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="Analysis__ATLAS__13TeV__0LEPStop__36invfb_8cpp_1a2bd8de508d5b9fbc3af058cba48241ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gambit::ColliderBit::calcMT</definition>
        <argsstring>(HEPUtils::P4 jetMom, HEPUtils::P4 metMom)</argsstring>
        <name>calcMT</name>
        <qualifiedname>Gambit::ColliderBit::calcMT</qualifiedname>
        <param>
          <type>HEPUtils::P4</type>
          <declname>jetMom</declname>
        </param>
        <param>
          <type>HEPUtils::P4</type>
          <declname>metMom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/analyses/Analysis_ATLAS_13TeV_0LEPStop_36invfb.cpp" line="41" column="12" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/analyses/Analysis_ATLAS_13TeV_0LEPStop_36invfb.cpp" bodystart="41" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="Analysis__ATLAS__13TeV__1LEPStop__36invfb_8cpp_1a04b6cbef4a3ea25ea09bfb8d927d215b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gambit::ColliderBit::sortByPT_1l</definition>
        <argsstring>(const HEPUtils::Jet *jet1, const HEPUtils::Jet *jet2)</argsstring>
        <name>sortByPT_1l</name>
        <qualifiedname>Gambit::ColliderBit::sortByPT_1l</qualifiedname>
        <param>
          <type>const HEPUtils::Jet *</type>
          <declname>jet1</declname>
        </param>
        <param>
          <type>const HEPUtils::Jet *</type>
          <declname>jet2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/analyses/Analysis_ATLAS_13TeV_1LEPStop_36invfb.cpp" line="40" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/analyses/Analysis_ATLAS_13TeV_1LEPStop_36invfb.cpp" bodystart="40" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="Analysis__ATLAS__13TeV__1LEPStop__36invfb_8cpp_1a3d8a66425475cc0fe07836198247f7da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gambit::ColliderBit::sortByPT_1l_sharedptr</definition>
        <argsstring>(std::shared_ptr&lt; HEPUtils::Jet &gt; jet1, std::shared_ptr&lt; HEPUtils::Jet &gt; jet2)</argsstring>
        <name>sortByPT_1l_sharedptr</name>
        <qualifiedname>Gambit::ColliderBit::sortByPT_1l_sharedptr</qualifiedname>
        <param>
          <type>std::shared_ptr&lt; HEPUtils::Jet &gt;</type>
          <declname>jet1</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; HEPUtils::Jet &gt;</type>
          <declname>jet2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/analyses/Analysis_ATLAS_13TeV_1LEPStop_36invfb.cpp" line="41" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/analyses/Analysis_ATLAS_13TeV_1LEPStop_36invfb.cpp" bodystart="41" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="Analysis__ATLAS__13TeV__1LEPStop__36invfb_8cpp_1a6d7f672c3b7f15b9e18481418b02998c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gambit::ColliderBit::sortByMass_1l</definition>
        <argsstring>(const HEPUtils::Jet *jet1, const HEPUtils::Jet *jet2)</argsstring>
        <name>sortByMass_1l</name>
        <qualifiedname>Gambit::ColliderBit::sortByMass_1l</qualifiedname>
        <param>
          <type>const HEPUtils::Jet *</type>
          <declname>jet1</declname>
        </param>
        <param>
          <type>const HEPUtils::Jet *</type>
          <declname>jet2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/analyses/Analysis_ATLAS_13TeV_1LEPStop_36invfb.cpp" line="44" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/analyses/Analysis_ATLAS_13TeV_1LEPStop_36invfb.cpp" bodystart="44" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="Analysis__ATLAS__13TeV__1LEPStop__36invfb_8cpp_1abbf1476bd9d0d560de037a39fe388b34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gambit::ColliderBit::sortByMass_1l_sharedptr</definition>
        <argsstring>(std::shared_ptr&lt; HEPUtils::Jet &gt; jet1, std::shared_ptr&lt; HEPUtils::Jet &gt; jet2)</argsstring>
        <name>sortByMass_1l_sharedptr</name>
        <qualifiedname>Gambit::ColliderBit::sortByMass_1l_sharedptr</qualifiedname>
        <param>
          <type>std::shared_ptr&lt; HEPUtils::Jet &gt;</type>
          <declname>jet1</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; HEPUtils::Jet &gt;</type>
          <declname>jet2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/analyses/Analysis_ATLAS_13TeV_1LEPStop_36invfb.cpp" line="45" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/analyses/Analysis_ATLAS_13TeV_1LEPStop_36invfb.cpp" bodystart="45" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="Analysis__ATLAS__13TeV__1LEPStop__36invfb_8cpp_1a10e4bc9637bbedebf77554eaab1cf8d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gambit::ColliderBit::calcMT_1l</definition>
        <argsstring>(HEPUtils::P4 jetMom, HEPUtils::P4 metMom)</argsstring>
        <name>calcMT_1l</name>
        <qualifiedname>Gambit::ColliderBit::calcMT_1l</qualifiedname>
        <param>
          <type>HEPUtils::P4</type>
          <declname>jetMom</declname>
        </param>
        <param>
          <type>HEPUtils::P4</type>
          <declname>metMom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/analyses/Analysis_ATLAS_13TeV_1LEPStop_36invfb.cpp" line="47" column="12" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/analyses/Analysis_ATLAS_13TeV_1LEPStop_36invfb.cpp" bodystart="47" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="Analysis__ATLAS__13TeV__2LEPStop__36invfb_8cpp_1a00d9b68dfe9f812e9465fcd2ad47f90e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gambit::ColliderBit::sortByPT_j</definition>
        <argsstring>(const HEPUtils::Jet *jet1, const HEPUtils::Jet *jet2)</argsstring>
        <name>sortByPT_j</name>
        <qualifiedname>Gambit::ColliderBit::sortByPT_j</qualifiedname>
        <param>
          <type>const HEPUtils::Jet *</type>
          <declname>jet1</declname>
        </param>
        <param>
          <type>const HEPUtils::Jet *</type>
          <declname>jet2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/analyses/Analysis_ATLAS_13TeV_2LEPStop_36invfb.cpp" line="27" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/analyses/Analysis_ATLAS_13TeV_2LEPStop_36invfb.cpp" bodystart="27" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="Analysis__ATLAS__13TeV__2LEPStop__36invfb_8cpp_1ab1ed4f41cc233f7c09d1d90b97a39668" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gambit::ColliderBit::sortByPT_l</definition>
        <argsstring>(const HEPUtils::Particle *lep1, const HEPUtils::Particle *lep2)</argsstring>
        <name>sortByPT_l</name>
        <qualifiedname>Gambit::ColliderBit::sortByPT_l</qualifiedname>
        <param>
          <type>const HEPUtils::Particle *</type>
          <declname>lep1</declname>
        </param>
        <param>
          <type>const HEPUtils::Particle *</type>
          <declname>lep2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/analyses/Analysis_ATLAS_13TeV_2LEPStop_36invfb.cpp" line="28" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/analyses/Analysis_ATLAS_13TeV_2LEPStop_36invfb.cpp" bodystart="28" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="Analysis__ATLAS__13TeV__PhotonGGM__36invfb_8cpp_1a0f5cf155a4ee0e08c56659aecd1bc463" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gambit::ColliderBit::sortByPT_jet</definition>
        <argsstring>(const HEPUtils::Jet *jet1, const HEPUtils::Jet *jet2)</argsstring>
        <name>sortByPT_jet</name>
        <qualifiedname>Gambit::ColliderBit::sortByPT_jet</qualifiedname>
        <param>
          <type>const HEPUtils::Jet *</type>
          <declname>jet1</declname>
        </param>
        <param>
          <type>const HEPUtils::Jet *</type>
          <declname>jet2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/analyses/Analysis_ATLAS_13TeV_PhotonGGM_36invfb.cpp" line="34" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/analyses/Analysis_ATLAS_13TeV_PhotonGGM_36invfb.cpp" bodystart="34" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="Analysis__ATLAS__13TeV__PhotonGGM__36invfb_8cpp_1a53e701d01b7bf88343fdf72ae1555ab2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gambit::ColliderBit::sortByPT_lep</definition>
        <argsstring>(const HEPUtils::Particle *lep1, const HEPUtils::Particle *lep2)</argsstring>
        <name>sortByPT_lep</name>
        <qualifiedname>Gambit::ColliderBit::sortByPT_lep</qualifiedname>
        <param>
          <type>const HEPUtils::Particle *</type>
          <declname>lep1</declname>
        </param>
        <param>
          <type>const HEPUtils::Particle *</type>
          <declname>lep2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/analyses/Analysis_ATLAS_13TeV_PhotonGGM_36invfb.cpp" line="35" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/analyses/Analysis_ATLAS_13TeV_PhotonGGM_36invfb.cpp" bodystart="35" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="Analysis__ATLAS__13TeV__RJ3L__lowmass__36invfb_8cpp_1ad3c33b44a7c3fbee6a77fa433dabff8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gambit::ColliderBit::sortByPT_RJ3L</definition>
        <argsstring>(const HEPUtils::Jet *jet1, const HEPUtils::Jet *jet2)</argsstring>
        <name>sortByPT_RJ3L</name>
        <qualifiedname>Gambit::ColliderBit::sortByPT_RJ3L</qualifiedname>
        <param>
          <type>const HEPUtils::Jet *</type>
          <declname>jet1</declname>
        </param>
        <param>
          <type>const HEPUtils::Jet *</type>
          <declname>jet2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/analyses/Analysis_ATLAS_13TeV_RJ3L_lowmass_36invfb.cpp" line="40" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/analyses/Analysis_ATLAS_13TeV_RJ3L_lowmass_36invfb.cpp" bodystart="40" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="Analysis__ATLAS__13TeV__RJ3L__lowmass__36invfb_8cpp_1a6808d11cee050333da7867744a8883dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gambit::ColliderBit::sortLepByPT_RJ3L</definition>
        <argsstring>(const HEPUtils::Particle *lep1, const HEPUtils::Particle *lep2)</argsstring>
        <name>sortLepByPT_RJ3L</name>
        <qualifiedname>Gambit::ColliderBit::sortLepByPT_RJ3L</qualifiedname>
        <param>
          <type>const HEPUtils::Particle *</type>
          <declname>lep1</declname>
        </param>
        <param>
          <type>const HEPUtils::Particle *</type>
          <declname>lep2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/analyses/Analysis_ATLAS_13TeV_RJ3L_lowmass_36invfb.cpp" line="41" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/analyses/Analysis_ATLAS_13TeV_RJ3L_lowmass_36invfb.cpp" bodystart="41" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="Analysis__ATLAS__13TeV__RJ3L__lowmass__36invfb_8cpp_1a631fea599abf73bc0de9b59338b9b682" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gambit::ColliderBit::SortLeptons</definition>
        <argsstring>(const pair&lt; TLorentzVector, int &gt; lv1, const pair&lt; TLorentzVector, int &gt; lv2)</argsstring>
        <name>SortLeptons</name>
        <qualifiedname>Gambit::ColliderBit::SortLeptons</qualifiedname>
        <param>
          <type>const pair&lt; TLorentzVector, int &gt;</type>
          <declname>lv1</declname>
        </param>
        <param>
          <type>const pair&lt; TLorentzVector, int &gt;</type>
          <declname>lv2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/analyses/Analysis_ATLAS_13TeV_RJ3L_lowmass_36invfb.cpp" line="44" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/analyses/Analysis_ATLAS_13TeV_RJ3L_lowmass_36invfb.cpp" bodystart="44" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="Analysis__ATLAS__13TeV__RJ3L__lowmass__36invfb_8cpp_1aa34440b1910cf32fe4e1503ba3d5f876" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gambit::ColliderBit::SortJets</definition>
        <argsstring>(const TLorentzVector jv1, const TLorentzVector jv2)</argsstring>
        <name>SortJets</name>
        <qualifiedname>Gambit::ColliderBit::SortJets</qualifiedname>
        <param>
          <type>const TLorentzVector</type>
          <declname>jv1</declname>
        </param>
        <param>
          <type>const TLorentzVector</type>
          <declname>jv2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/analyses/Analysis_ATLAS_13TeV_RJ3L_lowmass_36invfb.cpp" line="50" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/analyses/Analysis_ATLAS_13TeV_RJ3L_lowmass_36invfb.cpp" bodystart="50" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="Analysis__ATLAS__13TeV__ZGammaGrav__CONFNOTE__80invfb_8cpp_1a7c337fa29f65840eb62658bdf2ae6ab8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Gambit::ColliderBit::DEFINE_ANALYSIS_FACTORY</definition>
        <argsstring>(ATLAS_13TeV_ZGammaGrav_CONFNOTE_80invfb)</argsstring>
        <name>DEFINE_ANALYSIS_FACTORY</name>
        <qualifiedname>Gambit::ColliderBit::DEFINE_ANALYSIS_FACTORY</qualifiedname>
        <param>
          <type>ATLAS_13TeV_ZGammaGrav_CONFNOTE_80invfb</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/analyses/Analysis_ATLAS_13TeV_ZGammaGrav_CONFNOTE_80invfb.cpp" line="192" column="5" declfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/analyses/Analysis_ATLAS_13TeV_ZGammaGrav_CONFNOTE_80invfb.cpp" declline="192" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="Analysis__ATLAS__8TeV__0LEPStop__20invfb_8cpp_1a4c62548771b0fafe5b3b03c2ebfedd52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gambit::ColliderBit::sortByPT</definition>
        <argsstring>(const HEPUtils::Jet *jet1, const HEPUtils::Jet *jet2)</argsstring>
        <name>sortByPT</name>
        <qualifiedname>Gambit::ColliderBit::sortByPT</qualifiedname>
        <param>
          <type>const HEPUtils::Jet *</type>
          <declname>jet1</declname>
        </param>
        <param>
          <type>const HEPUtils::Jet *</type>
          <declname>jet2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/analyses/Analysis_ATLAS_8TeV_0LEPStop_20invfb.cpp" line="30" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/analyses/Analysis_ATLAS_8TeV_0LEPStop_20invfb.cpp" bodystart="30" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="Analysis__ATLAS__8TeV__2LEPEW__20invfb_8cpp_1a71291de6eb48a68f62a3c4302e3531b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gambit::ColliderBit::sortByPT_2lep</definition>
        <argsstring>(const HEPUtils::Particle *lep1, const HEPUtils::Particle *lep2)</argsstring>
        <name>sortByPT_2lep</name>
        <qualifiedname>Gambit::ColliderBit::sortByPT_2lep</qualifiedname>
        <param>
          <type>const HEPUtils::Particle *</type>
          <declname>lep1</declname>
        </param>
        <param>
          <type>const HEPUtils::Particle *</type>
          <declname>lep2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/analyses/Analysis_ATLAS_8TeV_2LEPEW_20invfb.cpp" line="33" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/analyses/Analysis_ATLAS_8TeV_2LEPEW_20invfb.cpp" bodystart="33" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="Analysis__ATLAS__8TeV__2LEPStop__20invfb_8cpp_1aa25860d08826dd10ccf3c85bd3c5f22e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gambit::ColliderBit::Phi_mpi_pi</definition>
        <argsstring>(double x)</argsstring>
        <name>Phi_mpi_pi</name>
        <qualifiedname>Gambit::ColliderBit::Phi_mpi_pi</qualifiedname>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/analyses/Analysis_ATLAS_8TeV_2LEPStop_20invfb.cpp" line="30" column="12" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/analyses/Analysis_ATLAS_8TeV_2LEPStop_20invfb.cpp" bodystart="30" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="Analysis__CMS__8TeV__1LEPDMTOP__20invfb_8cpp_1a8cb3d22adb4238ddbdf4cc01a11e96f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gambit::ColliderBit::_Phi_mpi_pi</definition>
        <argsstring>(double x)</argsstring>
        <name>_Phi_mpi_pi</name>
        <qualifiedname>Gambit::ColliderBit::_Phi_mpi_pi</qualifiedname>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/analyses/Analysis_CMS_8TeV_1LEPDMTOP_20invfb.cpp" line="25" column="12" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/analyses/Analysis_CMS_8TeV_1LEPDMTOP_20invfb.cpp" bodystart="25" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="collider__event__weights_8cpp_1a20c19a91f9b8f3cff80994b8d09e3fe5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::_setEventWeight_unity</definition>
        <argsstring>(HEPUtils::Event &amp;event, const BaseCollider *)</argsstring>
        <name>_setEventWeight_unity</name>
        <qualifiedname>Gambit::ColliderBit::_setEventWeight_unity</qualifiedname>
        <param>
          <type>HEPUtils::Event &amp;</type>
          <declname>event</declname>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1ColliderBit_1_1BaseCollider" kindref="compound">BaseCollider</ref> *</type>
        </param>
        <briefdescription>
<para>A function that sets the event weight to unity, with zero uncertainty. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/collider_event_weights.cpp" line="34" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/collider_event_weights.cpp" bodystart="34" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="collider__event__weights_8cpp_1a88072f249e49df263533314e68ffe6df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::setEventWeight_unity</definition>
        <argsstring>(EventWeighterFunctionType &amp;result)</argsstring>
        <name>setEventWeight_unity</name>
        <qualifiedname>Gambit::ColliderBit::setEventWeight_unity</qualifiedname>
        <param>
          <type>EventWeighterFunctionType &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Module function providing an instance of EventWeighterFunctionType pointing to _setEventWeight_unity </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/collider_event_weights.cpp" line="42" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/collider_event_weights.cpp" bodystart="42" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="collider__event__weights_8cpp_1a08659916551bbe4b892d6a3c20caa45c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::_setEventWeight_fromCrossSection</definition>
        <argsstring>(HEPUtils::Event &amp;event, const BaseCollider *HardScatteringSim_ptr, const map_int_process_xsec &amp;ProcessCrossSectionsMap, const int use_trust_level)</argsstring>
        <name>_setEventWeight_fromCrossSection</name>
        <qualifiedname>Gambit::ColliderBit::_setEventWeight_fromCrossSection</qualifiedname>
        <param>
          <type>HEPUtils::Event &amp;</type>
          <declname>event</declname>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1ColliderBit_1_1BaseCollider" kindref="compound">BaseCollider</ref> *</type>
          <declname>HardScatteringSim_ptr</declname>
        </param>
        <param>
          <type>const map_int_process_xsec &amp;</type>
          <declname>ProcessCrossSectionsMap</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>use_trust_level</declname>
        </param>
        <briefdescription>
<para>A function that sets the event weight based on the process cross-sections. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/collider_event_weights.cpp" line="51" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/collider_event_weights.cpp" bodystart="51" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="collider__event__weights_8cpp_1adc8a2acd0f6d4debf3b019fa4a37cd7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::setEventWeight_fromCrossSection</definition>
        <argsstring>(EventWeighterFunctionType &amp;result)</argsstring>
        <name>setEventWeight_fromCrossSection</name>
        <qualifiedname>Gambit::ColliderBit::setEventWeight_fromCrossSection</qualifiedname>
        <param>
          <type>EventWeighterFunctionType &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Module function providing an instance of EventWeighterFunctionType pointing to _setEventWeight_fromCrossSection </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/collider_event_weights.cpp" line="126" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/collider_event_weights.cpp" bodystart="126" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__dummy_8cpp_1a890744b1f1f61371a7f03d5bcff3d6ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::getDummyColliderObservable</definition>
        <argsstring>(double &amp;result)</argsstring>
        <name>getDummyColliderObservable</name>
        <qualifiedname>Gambit::ColliderBit::getDummyColliderObservable</qualifiedname>
        <param>
          <type>double &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Dummy observable that creates a dependency on TestModel1D. </para>
        </briefdescription>
        <detaileddescription>
<para>This is used to satisfy the normal GAMBIT model requrements in a minimal way. This is useful in the case where we just want to run ColliderBit on a single point with a custom Pythia version, using Pythia&apos;s SLHA interface. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_dummy.cpp" line="38" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_dummy.cpp" bodystart="38" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__eventloop_8cpp_1ac3e5caa6762666779fa7980190de2207" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::operateLHCLoop</definition>
        <argsstring>(MCLoopInfo &amp;result)</argsstring>
        <name>operateLHCLoop</name>
        <qualifiedname>Gambit::ColliderBit::operateLHCLoop</qualifiedname>
        <param>
          <type><ref refid="structGambit_1_1ColliderBit_1_1MCLoopInfo" kindref="compound">MCLoopInfo</ref> &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>LHC Loop Manager. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_eventloop.cpp" line="50" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_eventloop.cpp" bodystart="50" bodyend="311"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__eventloop_8cpp_1a132440e55b40d46ed297b3d8de3e72df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::getLHCEventLoopInfo</definition>
        <argsstring>(map_str_dbl &amp;result)</argsstring>
        <name>getLHCEventLoopInfo</name>
        <qualifiedname>Gambit::ColliderBit::getLHCEventLoopInfo</qualifiedname>
        <param>
          <type>map_str_dbl &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Store some information about the event generation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_eventloop.cpp" line="315" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_eventloop.cpp" bodystart="315" bodyend="325"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__eventloop_8cpp_1af5bd300bc1e749fb377602573b391d34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::CollectAnalyses</definition>
        <argsstring>(AnalysisDataPointers &amp;result)</argsstring>
        <name>CollectAnalyses</name>
        <qualifiedname>Gambit::ColliderBit::CollectAnalyses</qualifiedname>
        <param>
          <type>AnalysisDataPointers &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Loop over all analyses and collect them in one place. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_eventloop.cpp" line="329" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_eventloop.cpp" bodystart="329" bodyend="383"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__Higgs_8cpp_1a267d0b16dff2d81a6ffe147f9dfb3349" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::set_CS</definition>
        <argsstring>(hb_ModelParameters &amp;result, const HiggsCouplingsTable &amp;couplings, int n_neutral_higgses)</argsstring>
        <name>set_CS</name>
        <qualifiedname>Gambit::ColliderBit::set_CS</qualifiedname>
        <param>
          <type>hb_ModelParameters &amp;</type>
          <declname>result</declname>
        </param>
        <param>
          <type>const HiggsCouplingsTable &amp;</type>
          <declname>couplings</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n_neutral_higgses</declname>
        </param>
        <briefdescription>
<para>Helper function to set HiggsBounds/Signals parameters cross-section ratios from a GAMBIT HiggsCouplingsTable. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_Higgs.cpp" line="59" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_Higgs.cpp" bodystart="59" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__Higgs_8cpp_1ad75b662c5425d0d0df2254cf1a12a1d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::set_SMLikeHiggs_ModelParameters</definition>
        <argsstring>(const SubSpectrum &amp;spec, const HiggsCouplingsTable &amp;couplings, hb_ModelParameters &amp;result)</argsstring>
        <name>set_SMLikeHiggs_ModelParameters</name>
        <qualifiedname>Gambit::ColliderBit::set_SMLikeHiggs_ModelParameters</qualifiedname>
        <param>
          <type>const SubSpectrum &amp;</type>
          <declname>spec</declname>
        </param>
        <param>
          <type>const HiggsCouplingsTable &amp;</type>
          <declname>couplings</declname>
        </param>
        <param>
          <type>hb_ModelParameters &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Helper function for populating a HiggsBounds/Signals ModelParameters object for SM-like Higgs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_Higgs.cpp" line="102" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_Higgs.cpp" bodystart="102" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__Higgs_8cpp_1abba8b5caefcc14699274b8e16c4fb48c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::SMLikeHiggs_ModelParameters</definition>
        <argsstring>(hb_ModelParameters &amp;result)</argsstring>
        <name>SMLikeHiggs_ModelParameters</name>
        <qualifiedname>Gambit::ColliderBit::SMLikeHiggs_ModelParameters</qualifiedname>
        <param>
          <type>hb_ModelParameters &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>SM-like (SM + possible invisibles) Higgs model parameters for HiggsBounds/Signals. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_Higgs.cpp" line="207" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_Higgs.cpp" bodystart="207" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__Higgs_8cpp_1af191b3a243675c3f058c7a76e70d7a20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::MSSMLikeHiggs_ModelParameters</definition>
        <argsstring>(hb_ModelParameters &amp;result)</argsstring>
        <name>MSSMLikeHiggs_ModelParameters</name>
        <qualifiedname>Gambit::ColliderBit::MSSMLikeHiggs_ModelParameters</qualifiedname>
        <param>
          <type>hb_ModelParameters &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>MSSM-like (MSSM + NMSSM + ...) Higgs model parameters for HiggsBounds/Signals. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_Higgs.cpp" line="220" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_Higgs.cpp" bodystart="220" bodyend="311"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__Higgs_8cpp_1ad52378a77e73a6c354e8dbff99e2f956" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::calc_HB_LEP_LogLike</definition>
        <argsstring>(double &amp;result)</argsstring>
        <name>calc_HB_LEP_LogLike</name>
        <qualifiedname>Gambit::ColliderBit::calc_HB_LEP_LogLike</qualifiedname>
        <param>
          <type>double &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Get a LEP chisq from HiggsBounds. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_Higgs.cpp" line="314" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_Higgs.cpp" bodystart="314" bodyend="392"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__Higgs_8cpp_1adb2876394b3b4ad3f580a9dc81448432" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::calc_HS_LHC_LogLike</definition>
        <argsstring>(double &amp;result)</argsstring>
        <name>calc_HS_LHC_LogLike</name>
        <qualifiedname>Gambit::ColliderBit::calc_HS_LHC_LogLike</qualifiedname>
        <param>
          <type>double &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Get an LHC chisq from HiggsSignals. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_Higgs.cpp" line="395" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_Higgs.cpp" bodystart="395" bodyend="554"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__Higgs_8cpp_1a4ad9928c29decfa7cad12b2dcc337ab5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::FeynHiggs_HiggsProd</definition>
        <argsstring>(fh_HiggsProd_container &amp;result)</argsstring>
        <name>FeynHiggs_HiggsProd</name>
        <qualifiedname>Gambit::ColliderBit::FeynHiggs_HiggsProd</qualifiedname>
        <param>
          <type>fh_HiggsProd_container &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Higgs production cross-sections from FeynHiggs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_Higgs.cpp" line="557" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_Higgs.cpp" bodystart="557" bodyend="605"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__InterpolatedYields_8cpp_1aa372076882c0888fc20fcf8f52a666e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structGambit_1_1ColliderBit_1_1AnalysisLogLikes" kindref="compound">AnalysisLogLikes</ref></type>
        <definition>AnalysisLogLikes Gambit::ColliderBit::calc_loglikes_for_analysis</definition>
        <argsstring>(const AnalysisData &amp;, bool, bool, bool, bool)</argsstring>
        <name>calc_loglikes_for_analysis</name>
        <qualifiedname>Gambit::ColliderBit::calc_loglikes_for_analysis</qualifiedname>
        <param>
          <type>const <ref refid="structGambit_1_1ColliderBit_1_1AnalysisData" kindref="compound">AnalysisData</ref> &amp;</type>
          <defname>adata</defname>
        </param>
        <param>
          <type>bool</type>
          <defname>USE_COVAR</defname>
        </param>
        <param>
          <type>bool</type>
          <defname>USE_MARG</defname>
        </param>
        <param>
          <type>bool</type>
          <defname>combine_nocovar_SRs</defname>
        </param>
        <param>
          <type>bool</type>
          <defname>set_zero_loglike</defname>
        </param>
        <briefdescription>
<para>Forward declaration of funtion in LHC_likelihoods. </para>
        </briefdescription>
        <detaileddescription>
<para>For a given analysis, calculate per-SR loglikes and the overall analysis loglike. Return the results as an AnalysLogLikes object. </para>
        </detaileddescription>
        <inbodydescription>
<para>If (simplified) SR-correlation info is available, so use the covariance matrix to construct composite marginalised likelihood Despite initial thoughts, we can&apos;t just do independent LL calculations in a rotated basis, but have to sample from the covariance matrix.</para>
<para><simplesect kind="note"><para>This means we can&apos;t use the nulike LL functions, which operate in 1D only. Also, log-normal sampling in the diagonal basis is not helpful, since the rotation will re-generate negative rates.</para>
</simplesect>
<xrefsect id="todo_1_todo000085"><xreftitle>Todo</xreftitle><xrefdescription><para>Support NSL, i.e. skewness correction </para>
</xrefdescription></xrefsect></para>
<para><xrefsect id="todo_1_todo000086"><xreftitle>Todo</xreftitle><xrefdescription><para>Unify this for both cov and no-cov, feeding in one-element Eigen blocks as Ref&lt;&gt;s for the latter? </para>
</xrefdescription></xrefsect></para>
<para><xrefsect id="todo_1_todo000087"><xreftitle>Todo</xreftitle><xrefdescription><para>Compute the background-only covariance decomposition and likelihood only once </para>
</xrefdescription></xrefsect></para>
<para><xrefsect id="todo_1_todo000088"><xreftitle>Todo</xreftitle><xrefdescription><para>Only compute this once per run </para>
</xrefdescription></xrefsect></para>
<para><xrefsect id="todo_1_todo000089"><xreftitle>Todo</xreftitle><xrefdescription><para>Use newer (?) one-step Eigen constructors for (const) single-element arrays </para>
</xrefdescription></xrefsect></para>
<para><xrefsect id="todo_1_todo000090"><xreftitle>Todo</xreftitle><xrefdescription><para>Or compute all the exp DLLs first, then only the best-expected SR&apos;s obs DLL? </para>
</xrefdescription></xrefsect><xrefsect id="todo_1_todo000091"><xreftitle>Todo</xreftitle><xrefdescription></xrefdescription></xrefsect><xrefsect id="todo_1_todo000092"><xreftitle>Todo</xreftitle><xrefdescription><para>Only compute this once per run </para>
</xrefdescription></xrefsect></para>
<para><xrefsect id="todo_1_todo000093"><xreftitle>Todo</xreftitle><xrefdescription><para>Only compute this once per run </para>
</xrefdescription></xrefsect></para>
<para>If (simplified) SR-correlation info is available, so use the covariance matrix to construct composite marginalised likelihood Despite initial thoughts, we can&apos;t just do independent LL calculations in a rotated basis, but have to sample from the covariance matrix.</para>
<para><simplesect kind="note"><para>This means we can&apos;t use the nulike LL functions, which operate in 1D only. Also, log-normal sampling in the diagonal basis is not helpful, since the rotation will re-generate negative rates.</para>
</simplesect>
<xrefsect id="todo_1_todo000085"><xreftitle>Todo</xreftitle><xrefdescription><para>Support NSL, i.e. skewness correction </para>
</xrefdescription></xrefsect></para>
<para><xrefsect id="todo_1_todo000086"><xreftitle>Todo</xreftitle><xrefdescription><para>Unify this for both cov and no-cov, feeding in one-element Eigen blocks as Ref&lt;&gt;s for the latter? </para>
</xrefdescription></xrefsect></para>
<para><xrefsect id="todo_1_todo000087"><xreftitle>Todo</xreftitle><xrefdescription><para>Compute the background-only covariance decomposition and likelihood only once </para>
</xrefdescription></xrefsect></para>
<para><xrefsect id="todo_1_todo000088"><xreftitle>Todo</xreftitle><xrefdescription><para>Only compute this once per run </para>
</xrefdescription></xrefsect></para>
<para><xrefsect id="todo_1_todo000089"><xreftitle>Todo</xreftitle><xrefdescription><para>Use newer (?) one-step Eigen constructors for (const) single-element arrays </para>
</xrefdescription></xrefsect></para>
<para><xrefsect id="todo_1_todo000090"><xreftitle>Todo</xreftitle><xrefdescription><para>Or compute all the exp DLLs first, then only the best-expected SR&apos;s obs DLL? </para>
</xrefdescription></xrefsect><xrefsect id="todo_1_todo000091"><xreftitle>Todo</xreftitle><xrefdescription></xrefdescription></xrefsect><xrefsect id="todo_1_todo000092"><xreftitle>Todo</xreftitle><xrefdescription><para>Only compute this once per run </para>
</xrefdescription></xrefsect></para>
<para><xrefsect id="todo_1_todo000093"><xreftitle>Todo</xreftitle><xrefdescription><para>Only compute this once per run </para>
</xrefdescription></xrefsect></para>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/LHC_likelihoods.cpp" line="448" column="22" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/LHC_likelihoods.cpp" bodystart="448" bodyend="795" declfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_InterpolatedYields.cpp" declline="152" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__InterpolatedYields_8cpp_1a77e1e6f4e83205760ee6e97eac487757" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::fill_analysis_info_map</definition>
        <argsstring>()</argsstring>
        <name>fill_analysis_info_map</name>
        <qualifiedname>Gambit::ColliderBit::fill_analysis_info_map</qualifiedname>
        <briefdescription>
<para>Forward declarations of functions in this file. </para>
        </briefdescription>
        <detaileddescription>
<para>A function for filling the analysis_info_map. This is where all the analysis-specific numbers and file names go. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_InterpolatedYields.cpp" line="184" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_InterpolatedYields.cpp" bodystart="184" bodyend="335" declfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_InterpolatedYields.cpp" declline="155" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__InterpolatedYields_8cpp_1ac3973f4ef16dc84eb1ec3873f15c61b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::DMEFT_results</definition>
        <argsstring>(AnalysisDataPointers &amp;result)</argsstring>
        <name>DMEFT_results</name>
        <qualifiedname>Gambit::ColliderBit::DMEFT_results</qualifiedname>
        <param>
          <type>AnalysisDataPointers &amp;</type>
          <defname>result</defname>
        </param>
        <briefdescription>
<para>Results from DMEFT analyses before any modification of the MET spectrum. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_InterpolatedYields.cpp" line="339" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_InterpolatedYields.cpp" bodystart="339" bodyend="429" declfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_InterpolatedYields.cpp" declline="157" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__InterpolatedYields_8cpp_1add7205c37867015ac8b11e4a9987c43c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::get_all_DMEFT_signal_yields</definition>
        <argsstring>(std::vector&lt; double &gt; &amp;sr_nums, const DMEFT_analysis_info &amp;analysis_info, const Spectrum &amp;spec)</argsstring>
        <name>get_all_DMEFT_signal_yields</name>
        <qualifiedname>Gambit::ColliderBit::get_all_DMEFT_signal_yields</qualifiedname>
        <param>
          <type>std::vector&lt; double &gt; &amp;</type>
          <defname>sr_nums</defname>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1ColliderBit_1_1DMEFT__analysis__info" kindref="compound">DMEFT_analysis_info</ref> &amp;</type>
          <defname>analysis_info</defname>
        </param>
        <param>
          <type>const Spectrum &amp;</type>
          <defname>spec</defname>
        </param>
        <briefdescription>
<para>Fill the input vector with the total DMEFT signal prediction for each SR in the given LHC analysis. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_InterpolatedYields.cpp" line="433" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_InterpolatedYields.cpp" bodystart="433" bodyend="484" declfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_InterpolatedYields.cpp" declline="159" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__InterpolatedYields_8cpp_1a89d3209ad6993f929779ec026e09f5a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::get_DMEFT_signal_yields_dim6_operator</definition>
        <argsstring>(std::vector&lt; double &gt; &amp;signal_yields, const str operator_key, const DMEFT_analysis_info &amp;analysis_info, double m, double O1, double O2, double lambda)</argsstring>
        <name>get_DMEFT_signal_yields_dim6_operator</name>
        <qualifiedname>Gambit::ColliderBit::get_DMEFT_signal_yields_dim6_operator</qualifiedname>
        <param>
          <type>std::vector&lt; double &gt; &amp;</type>
          <defname>signal_yields</defname>
        </param>
        <param>
          <type>const</type>
          <declname>str</declname>
          <defname>operator_key</defname>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1ColliderBit_1_1DMEFT__analysis__info" kindref="compound">DMEFT_analysis_info</ref> &amp;</type>
          <defname>analysis_info</defname>
        </param>
        <param>
          <type>double</type>
          <defname>m</defname>
        </param>
        <param>
          <type>double</type>
          <defname>O1</defname>
        </param>
        <param>
          <type>double</type>
          <defname>O2</defname>
        </param>
        <param>
          <type>double</type>
          <defname>lambda</defname>
        </param>
        <briefdescription>
<para>Fill the input vector with the DMEFT signal prediction for a given set of dim-6 operators. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_InterpolatedYields.cpp" line="488" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_InterpolatedYields.cpp" bodystart="488" bodyend="599" declfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_InterpolatedYields.cpp" declline="161" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__InterpolatedYields_8cpp_1abac0f0c989a899660856fc73b28e8a1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::get_DMEFT_signal_yields_dim7_operator</definition>
        <argsstring>(std::vector&lt; double &gt; &amp;signal_yields, const str operator_key, const DMEFT_analysis_info &amp;analysis_info, double m, double O, double lambda)</argsstring>
        <name>get_DMEFT_signal_yields_dim7_operator</name>
        <qualifiedname>Gambit::ColliderBit::get_DMEFT_signal_yields_dim7_operator</qualifiedname>
        <param>
          <type>std::vector&lt; double &gt; &amp;</type>
          <defname>signal_yields</defname>
        </param>
        <param>
          <type>const</type>
          <declname>str</declname>
          <defname>operator_key</defname>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1ColliderBit_1_1DMEFT__analysis__info" kindref="compound">DMEFT_analysis_info</ref> &amp;</type>
          <defname>analysis_info</defname>
        </param>
        <param>
          <type>double</type>
          <defname>m</defname>
        </param>
        <param>
          <type>double</type>
          <defname>O</defname>
        </param>
        <param>
          <type>double</type>
          <defname>lambda</defname>
        </param>
        <briefdescription>
<para>Fill the input vector with the DMEFT signal prediction for a given dim-7 operator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_InterpolatedYields.cpp" line="603" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_InterpolatedYields.cpp" bodystart="603" bodyend="681" declfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_InterpolatedYields.cpp" declline="163" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__InterpolatedYields_8cpp_1acfb2fa465de3e5f18ea2cd157765ca03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::DMEFT_results_profiled</definition>
        <argsstring>(AnalysisDataPointers &amp;result)</argsstring>
        <name>DMEFT_results_profiled</name>
        <qualifiedname>Gambit::ColliderBit::DMEFT_results_profiled</qualifiedname>
        <param>
          <type>AnalysisDataPointers &amp;</type>
          <defname>result</defname>
        </param>
        <briefdescription>
<para>Results from DMEFT analyses after profiling over the &apos;a&apos; parameter in the smooth cut-off of the MET spectrum. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_InterpolatedYields.cpp" line="685" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_InterpolatedYields.cpp" bodystart="685" bodyend="708" declfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_InterpolatedYields.cpp" declline="165" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__InterpolatedYields_8cpp_1ad34ef94007d90c2c983ed20f99120386" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::DMEFT_results_cutoff</definition>
        <argsstring>(AnalysisDataPointers &amp;result)</argsstring>
        <name>DMEFT_results_cutoff</name>
        <qualifiedname>Gambit::ColliderBit::DMEFT_results_cutoff</qualifiedname>
        <param>
          <type>AnalysisDataPointers &amp;</type>
          <defname>result</defname>
        </param>
        <briefdescription>
<para>Results from DMEFT analyses after imposing a hard cut-off of the MET spectrum. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_InterpolatedYields.cpp" line="712" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_InterpolatedYields.cpp" bodystart="712" bodyend="732" declfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_InterpolatedYields.cpp" declline="167" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__InterpolatedYields_8cpp_1a88c08c0921b8a5f711a41b82ac7d2a98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::signal_modifier_function</definition>
        <argsstring>(AnalysisData &amp;, double, double)</argsstring>
        <name>signal_modifier_function</name>
        <qualifiedname>Gambit::ColliderBit::signal_modifier_function</qualifiedname>
        <param>
          <type><ref refid="structGambit_1_1ColliderBit_1_1AnalysisData" kindref="compound">AnalysisData</ref> &amp;</type>
          <defname>adata</defname>
        </param>
        <param>
          <type>double</type>
          <defname>lambda</defname>
        </param>
        <param>
          <type>double</type>
          <defname>a</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function to modify the DMEFT LHC signal prediction for ETmiss bins where ETmiss &gt; Lambda. Alt 1: Gradually turn off the ETmiss spectrum above Lambda by multiplying the spectrum with (ETmiss/Lambda)^-a </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_InterpolatedYields.cpp" line="738" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_InterpolatedYields.cpp" bodystart="738" bodyend="767" declfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_InterpolatedYields.cpp" declline="169" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__InterpolatedYields_8cpp_1a8ecd6e8e0f57cfccadc7368d383dca43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::signal_cutoff_function</definition>
        <argsstring>(AnalysisData &amp;, double)</argsstring>
        <name>signal_cutoff_function</name>
        <qualifiedname>Gambit::ColliderBit::signal_cutoff_function</qualifiedname>
        <param>
          <type><ref refid="structGambit_1_1ColliderBit_1_1AnalysisData" kindref="compound">AnalysisData</ref> &amp;</type>
          <defname>adata</defname>
        </param>
        <param>
          <type>double</type>
          <defname>lambda</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function to modify the DMEFT LHC signal prediction for ETmiss bins where ETmiss &gt; Lambda. Alt 2: Simply put a hard cut-off in the ETmiss spectrum for ETmiss &gt; Lambda </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_InterpolatedYields.cpp" line="772" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_InterpolatedYields.cpp" bodystart="772" bodyend="796" declfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_InterpolatedYields.cpp" declline="171" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__InterpolatedYields_8cpp_1a2e4a667539a208c93c3eac8dc4e53d17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::_gsl_target_func</definition>
        <argsstring>(const size_t, const double *a, void *fparams, double *fval)</argsstring>
        <name>_gsl_target_func</name>
        <qualifiedname>Gambit::ColliderBit::_gsl_target_func</qualifiedname>
        <param>
          <type>const</type>
          <declname>size_t</declname>
        </param>
        <param>
          <type>const double *</type>
          <defname>a</defname>
        </param>
        <param>
          <type>void *</type>
          <defname>fparams</defname>
        </param>
        <param>
          <type>double *</type>
          <defname>fval</defname>
        </param>
        <briefdescription>
<para>A target function for the GSL optimiser. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_InterpolatedYields.cpp" line="800" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_InterpolatedYields.cpp" bodystart="800" bodyend="834" declfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_InterpolatedYields.cpp" declline="173" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__InterpolatedYields_8cpp_1aeab93ba70b53d1ca4ede58fc669e7666" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::calc_DMEFT_profiled_LHC_nuisance_params</definition>
        <argsstring>(map_str_dbl &amp;)</argsstring>
        <name>calc_DMEFT_profiled_LHC_nuisance_params</name>
        <qualifiedname>Gambit::ColliderBit::calc_DMEFT_profiled_LHC_nuisance_params</qualifiedname>
        <param>
          <type>map_str_dbl &amp;</type>
          <defname>result</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_InterpolatedYields.cpp" line="840" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_InterpolatedYields.cpp" bodystart="840" bodyend="1030" declfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_InterpolatedYields.cpp" declline="175" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__InterpolatedYields_8cpp_1a8f54236771955821c2aefcb85cd36b8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::InterpolatedMCInfo</definition>
        <argsstring>(MCLoopInfo &amp;)</argsstring>
        <name>InterpolatedMCInfo</name>
        <qualifiedname>Gambit::ColliderBit::InterpolatedMCInfo</qualifiedname>
        <param>
          <type><ref refid="structGambit_1_1ColliderBit_1_1MCLoopInfo" kindref="compound">MCLoopInfo</ref> &amp;</type>
          <defname>result</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This makes an <ref refid="structGambit_1_1ColliderBit_1_1MCLoopInfo" kindref="compound">MCLoopInfo</ref> object for satisfying the ColliderBit dependency chain (This will not be needed once we have a general system for simulation-less analyses.) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_InterpolatedYields.cpp" line="1035" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_InterpolatedYields.cpp" bodystart="1035" bodyend="1039" declfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_InterpolatedYields.cpp" declline="177" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1abd1ca4d53792828f13dce08349673b03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gambit::ColliderBit::limit_LLike</definition>
        <argsstring>(double x, double x95, double sigma)</argsstring>
        <name>limit_LLike</name>
        <qualifiedname>Gambit::ColliderBit::limit_LLike</qualifiedname>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>x95</declname>
        </param>
        <param>
          <type>double</type>
          <declname>sigma</declname>
        </param>
        <briefdescription>
<para>LEP limit likelihood function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Incorporate theoretical uncertainty in a 95% limit <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Predicted cross section </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x95</parametername>
</parameternamelist>
<parameterdescription>
<para>Experimental 95% upper limit on cross section </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sigma</parametername>
</parameternamelist>
<parameterdescription>
<para>Theoretical uncertainty on predicted cross section </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Log-likelihood</para>
</simplesect>
</para>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="55" column="12" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="55" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1ac7f44c0dc65eacab6d5cb8bacc7fbab4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gambit::ColliderBit::is_xsec_sane</definition>
        <argsstring>(const triplet&lt; double &gt; &amp;xsecWithError)</argsstring>
        <name>is_xsec_sane</name>
        <qualifiedname>Gambit::ColliderBit::is_xsec_sane</qualifiedname>
        <param>
          <type>const triplet&lt; double &gt; &amp;</type>
          <declname>xsecWithError</declname>
        </param>
        <briefdescription>
<para>LEP limit debugging function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="96" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="96" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1ae22a8426efc37f070e8bf1205ed48180" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::LEP207_SLHA1_convention_xsec_chi00_11</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>LEP207_SLHA1_convention_xsec_chi00_11</name>
        <qualifiedname>Gambit::ColliderBit::LEP207_SLHA1_convention_xsec_chi00_11</qualifiedname>
        <param>
          <type>triplet&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="343" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="343" bodyend="351"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__LEP_8cpp_1a2522e659615324d2797a15b37d75bd24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::L3_Gravitino_LLike</definition>
        <argsstring>(double &amp;result)</argsstring>
        <name>L3_Gravitino_LLike</name>
        <qualifiedname>Gambit::ColliderBit::L3_Gravitino_LLike</qualifiedname>
        <param>
          <type>double &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>L3 search for gravitinos at 207 GeV</para>
<para>We use a limit from Fig. 6c of <ulink url="https://doi.org/10.1016/j.physletb.2004.01.010">https://doi.org/10.1016/j.physletb.2004.01.010</ulink>.</para>
<para>We use the 95% upper limit on <formula id="13">\[
\sigma(ee \to \chi^0_1\chi^0_1) \textrm{BR}(\chi^0_1 \to \tilde{G}\gamma)^2
\]</formula></para>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" line="2606" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/ColliderBit_LEP.cpp" bodystart="2606" bodyend="2645"/>
      </memberdef>
      <memberdef kind="function" id="getActiveProcessCodes_8cpp_1ad6b9d54b30afe9a3691a213668a846c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::getActiveProcessCodes</definition>
        <argsstring>(std::vector&lt; int &gt; &amp;result)</argsstring>
        <name>getActiveProcessCodes</name>
        <qualifiedname>Gambit::ColliderBit::getActiveProcessCodes</qualifiedname>
        <param>
          <type>std::vector&lt; int &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Get the list of active collider process codes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/getActiveProcessCodes.cpp" line="30" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/getActiveProcessCodes.cpp" bodystart="30" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="getAnalysisContainer_8cpp_1a06cdbc6e15bdd1680adfaf2957321183" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::getAnalysisContainer</definition>
        <argsstring>(AnalysisContainer &amp;result, const str &amp;detname, const MCLoopInfo &amp;RunMC, const xsec_container &amp;TotalCrossSection, int iteration)</argsstring>
        <name>getAnalysisContainer</name>
        <qualifiedname>Gambit::ColliderBit::getAnalysisContainer</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1ColliderBit_1_1AnalysisContainer" kindref="compound">AnalysisContainer</ref> &amp;</type>
          <declname>result</declname>
        </param>
        <param>
          <type>const str &amp;</type>
          <declname>detname</declname>
        </param>
        <param>
          <type>const <ref refid="structGambit_1_1ColliderBit_1_1MCLoopInfo" kindref="compound">MCLoopInfo</ref> &amp;</type>
          <declname>RunMC</declname>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1ColliderBit_1_1xsec__container" kindref="compound">xsec_container</ref> &amp;</type>
          <declname>TotalCrossSection</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iteration</declname>
        </param>
        <briefdescription>
<para>Retrieve an analysis container for a specific detector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/getAnalysisContainer.cpp" line="50" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/getAnalysisContainer.cpp" bodystart="50" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="getBuckFast_8cpp_1adb6cf55a989324b29f8d1d5605712571" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::getBuckFastATLAS</definition>
        <argsstring>(BaseDetector *&amp;result)</argsstring>
        <name>getBuckFastATLAS</name>
        <qualifiedname>Gambit::ColliderBit::getBuckFastATLAS</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1ColliderBit_1_1BaseDetector" kindref="compound">BaseDetector</ref> *&amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Retrieve a <ref refid="classGambit_1_1ColliderBit_1_1BuckFast" kindref="compound">BuckFast</ref> sim of <ref refid="namespaceGambit_1_1ColliderBit_1_1ATLAS" kindref="compound">ATLAS</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/getBuckFast.cpp" line="55" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/getBuckFast.cpp" bodystart="55" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="getBuckFast_8cpp_1a081bd4307fbc73cdf6000e942fe3b537" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::getBuckFastCMS</definition>
        <argsstring>(BaseDetector *&amp;result)</argsstring>
        <name>getBuckFastCMS</name>
        <qualifiedname>Gambit::ColliderBit::getBuckFastCMS</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1ColliderBit_1_1BaseDetector" kindref="compound">BaseDetector</ref> *&amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Retrieve a <ref refid="classGambit_1_1ColliderBit_1_1BuckFast" kindref="compound">BuckFast</ref> sim of <ref refid="namespaceGambit_1_1ColliderBit_1_1CMS" kindref="compound">CMS</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/getBuckFast.cpp" line="70" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/getBuckFast.cpp" bodystart="70" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="getBuckFast_8cpp_1a2cba3802cdcd2c9ca425eb09d6a71f8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::getBuckFastIdentity</definition>
        <argsstring>(BaseDetector *&amp;result)</argsstring>
        <name>getBuckFastIdentity</name>
        <qualifiedname>Gambit::ColliderBit::getBuckFastIdentity</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1ColliderBit_1_1BaseDetector" kindref="compound">BaseDetector</ref> *&amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Retrieve an Identity <ref refid="classGambit_1_1ColliderBit_1_1BuckFast" kindref="compound">BuckFast</ref> sim (no sim) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/getBuckFast.cpp" line="85" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/getBuckFast.cpp" bodystart="85" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="getHepMCEvent_8cpp_1a416cd7baf6bd86cf9ce9b946db937213" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::getHepMCEvent</definition>
        <argsstring>(HEPUtils::Event &amp;result)</argsstring>
        <name>getHepMCEvent</name>
        <qualifiedname>Gambit::ColliderBit::getHepMCEvent</qualifiedname>
        <param>
          <type>HEPUtils::Event &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>A nested function that reads in HepMC event files and converts them to HEPUtils::Event format. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/getHepMCEvent.cpp" line="59" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/getHepMCEvent.cpp" bodystart="59" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="getLHEvent_8cpp_1a1b28509f4e801937cc82732cde3dc590" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::getLHEvent</definition>
        <argsstring>(HEPUtils::Event &amp;result)</argsstring>
        <name>getLHEvent</name>
        <qualifiedname>Gambit::ColliderBit::getLHEvent</qualifiedname>
        <param>
          <type>HEPUtils::Event &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>A nested function that reads in Les Houches Event files and converts them to HEPUtils::Event format. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/getLHEvent.cpp" line="41" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/getLHEvent.cpp" bodystart="41" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="getxsec_8cpp_1a69ce6278c8c967a8570e2fbec84f09c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; double, double &gt;</type>
        <definition>std::pair&lt; double, double &gt; Gambit::ColliderBit::convert_xsecs_to_fb</definition>
        <argsstring>(double input_xsec, double input_xsec_uncert, str input_unit, bool input_fractional_uncert)</argsstring>
        <name>convert_xsecs_to_fb</name>
        <qualifiedname>Gambit::ColliderBit::convert_xsecs_to_fb</qualifiedname>
        <param>
          <type>double</type>
          <declname>input_xsec</declname>
        </param>
        <param>
          <type>double</type>
          <declname>input_xsec_uncert</declname>
        </param>
        <param>
          <type>str</type>
          <declname>input_unit</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>input_fractional_uncert</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Helper function that takes a cross-section value in fb or pb, along with an absolute or relative uncertainty, and returns the xsec and absolute uncertainty in fb. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/getxsec.cpp" line="39" column="15" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/getxsec.cpp" bodystart="39" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="getxsec_8cpp_1a2f0d8eadae6eb2c168fa6c75868eac55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::getPIDPairCrossSectionsMap_prospino</definition>
        <argsstring>(map_PID_pair_PID_pair_xsec &amp;result)</argsstring>
        <name>getPIDPairCrossSectionsMap_prospino</name>
        <qualifiedname>Gambit::ColliderBit::getPIDPairCrossSectionsMap_prospino</qualifiedname>
        <param>
          <type>map_PID_pair_PID_pair_xsec &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a cross-section from Prospino WORK IN PROGRESS </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/getxsec.cpp" line="324" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/getxsec.cpp" bodystart="324" bodyend="425"/>
      </memberdef>
      <memberdef kind="function" id="getxsec_8cpp_1a58e51b21f00ca97d852977987162f878" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classGambit_1_1ColliderBit_1_1PID__pair__xsec__container" kindref="compound">PID_pair_xsec_container</ref></type>
        <definition>PID_pair_xsec_container Gambit::ColliderBit::silly_pid_xsec_constructor</definition>
        <argsstring>(PID_pair pid_pair, double xsec_val)</argsstring>
        <name>silly_pid_xsec_constructor</name>
        <qualifiedname>Gambit::ColliderBit::silly_pid_xsec_constructor</qualifiedname>
        <param>
          <type>PID_pair</type>
          <declname>pid_pair</declname>
        </param>
        <param>
          <type>double</type>
          <declname>xsec_val</declname>
        </param>
        <briefdescription>
<para>Test functions for provding PIDPairCrossSectionsMap (cross-sections in fb) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/getxsec.cpp" line="430" column="29" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/getxsec.cpp" bodystart="430" bodyend="439"/>
      </memberdef>
      <memberdef kind="function" id="getxsec_8cpp_1aaf9f6ceecac4a6f1b0fa9a84903ced10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::getPIDPairCrossSectionsMap_testing</definition>
        <argsstring>(map_PID_pair_PID_pair_xsec &amp;result)</argsstring>
        <name>getPIDPairCrossSectionsMap_testing</name>
        <qualifiedname>Gambit::ColliderBit::getPIDPairCrossSectionsMap_testing</qualifiedname>
        <param>
          <type>map_PID_pair_PID_pair_xsec &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/getxsec.cpp" line="441" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/getxsec.cpp" bodystart="441" bodyend="903"/>
      </memberdef>
      <memberdef kind="function" id="getxsec_8cpp_1ad955ff4bcca971d65e21f56391df9f4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::getProcessCrossSectionsMap</definition>
        <argsstring>(map_int_process_xsec &amp;result)</argsstring>
        <name>getProcessCrossSectionsMap</name>
        <qualifiedname>Gambit::ColliderBit::getProcessCrossSectionsMap</qualifiedname>
        <param>
          <type>map_int_process_xsec &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Get a map between Pythia process codes and cross-sections. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/getxsec.cpp" line="908" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/getxsec.cpp" bodystart="908" bodyend="1036"/>
      </memberdef>
      <memberdef kind="function" id="getxsec_8cpp_1a9e877c6d2d31189e7919f21f4a76b23a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::getEvGenCrossSection</definition>
        <argsstring>(MC_xsec_container &amp;result)</argsstring>
        <name>getEvGenCrossSection</name>
        <qualifiedname>Gambit::ColliderBit::getEvGenCrossSection</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1ColliderBit_1_1MC__xsec__container" kindref="compound">MC_xsec_container</ref> &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Compute a cross-section from Monte Carlo. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/getxsec.cpp" line="1040" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/getxsec.cpp" bodystart="1040" bodyend="1167"/>
      </memberdef>
      <memberdef kind="function" id="getxsec_8cpp_1acc41ba64cd92b7775c9c3c50f6e692d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::getEvGenCrossSection_as_base</definition>
        <argsstring>(xsec_container &amp;result)</argsstring>
        <name>getEvGenCrossSection_as_base</name>
        <qualifiedname>Gambit::ColliderBit::getEvGenCrossSection_as_base</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1ColliderBit_1_1xsec__container" kindref="compound">xsec_container</ref> &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Return <ref refid="classGambit_1_1ColliderBit_1_1MC__xsec__container" kindref="compound">MC_xsec_container</ref> as the base <ref refid="classGambit_1_1ColliderBit_1_1xsec__container" kindref="compound">xsec_container</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/getxsec.cpp" line="1170" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/getxsec.cpp" bodystart="1170" bodyend="1174"/>
      </memberdef>
      <memberdef kind="function" id="getxsec_8cpp_1ab9ce0663698907199868970fd5f1a721" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::getNLLFastCrossSection</definition>
        <argsstring>(xsec_container &amp;result)</argsstring>
        <name>getNLLFastCrossSection</name>
        <qualifiedname>Gambit::ColliderBit::getNLLFastCrossSection</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1ColliderBit_1_1xsec__container" kindref="compound">xsec_container</ref> &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Get a cross-section from NLL-FAST. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/getxsec.cpp" line="1178" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/getxsec.cpp" bodystart="1178" bodyend="1214"/>
      </memberdef>
      <memberdef kind="function" id="getxsec_8cpp_1a8bc2df3538bcfcf6f99c7f6d7bf52710" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gambit::ColliderBit::checkOptions_getYAMLCrossSection</definition>
        <argsstring>(const Options &amp;runOptions, const str calling_function, std::pair&lt; str, str &gt; &amp;xsec_pnames, str &amp;input_unit, bool &amp;input_fractional_uncert, str &amp;errmsg)</argsstring>
        <name>checkOptions_getYAMLCrossSection</name>
        <qualifiedname>Gambit::ColliderBit::checkOptions_getYAMLCrossSection</qualifiedname>
        <param>
          <type>const Options &amp;</type>
          <declname>runOptions</declname>
        </param>
        <param>
          <type>const str</type>
          <declname>calling_function</declname>
        </param>
        <param>
          <type>std::pair&lt; str, str &gt; &amp;</type>
          <declname>xsec_pnames</declname>
        </param>
        <param>
          <type>str &amp;</type>
          <declname>input_unit</declname>
        </param>
        <param>
          <type>bool &amp;</type>
          <declname>input_fractional_uncert</declname>
        </param>
        <param>
          <type>str &amp;</type>
          <declname>errmsg</declname>
        </param>
        <briefdescription>
<para>A helper function to check the YAML options for getYAMLCrossSection and getYAMLCrossSection_SLHA. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/getxsec.cpp" line="1218" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/getxsec.cpp" bodystart="1218" bodyend="1276"/>
      </memberdef>
      <memberdef kind="function" id="getxsec_8cpp_1a785b9f67e6f3febfe0edd0e609fa3064" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::getYAMLCrossSection</definition>
        <argsstring>(xsec_container &amp;result)</argsstring>
        <name>getYAMLCrossSection</name>
        <qualifiedname>Gambit::ColliderBit::getYAMLCrossSection</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1ColliderBit_1_1xsec__container" kindref="compound">xsec_container</ref> &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/getxsec.cpp" line="1280" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/getxsec.cpp" bodystart="1280" bodyend="1342"/>
      </memberdef>
      <memberdef kind="function" id="getxsec_8cpp_1a5e8df620827c109afe3d7e1ba417732e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::getYAMLCrossSection_SLHA</definition>
        <argsstring>(xsec_container &amp;result)</argsstring>
        <name>getYAMLCrossSection_SLHA</name>
        <qualifiedname>Gambit::ColliderBit::getYAMLCrossSection_SLHA</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1ColliderBit_1_1xsec__container" kindref="compound">xsec_container</ref> &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>A function that reads a list of (SLHA file, total cross-section) pairs from the input YAML file. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/getxsec.cpp" line="1346" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/getxsec.cpp" bodystart="1346" bodyend="1422"/>
      </memberdef>
      <memberdef kind="function" id="getxsec_8cpp_1aa16c952740fdf5d486bc8768dbbdd161" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::getYAMLCrossSection_param</definition>
        <argsstring>(xsec_container &amp;result)</argsstring>
        <name>getYAMLCrossSection_param</name>
        <qualifiedname>Gambit::ColliderBit::getYAMLCrossSection_param</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1ColliderBit_1_1xsec__container" kindref="compound">xsec_container</ref> &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A function that assigns a total cross-sections directly from the scan parameters (for model ColliderBit_SLHA_scan_model) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/getxsec.cpp" line="1428" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/getxsec.cpp" bodystart="1428" bodyend="1536"/>
      </memberdef>
      <memberdef kind="function" id="getxsec_8cpp_1a487dc7186bae6e4108c24fe9065b30a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::getTotalCrossSectionAsMap</definition>
        <argsstring>(map_str_dbl &amp;result)</argsstring>
        <name>getTotalCrossSectionAsMap</name>
        <qualifiedname>Gambit::ColliderBit::getTotalCrossSectionAsMap</qualifiedname>
        <param>
          <type>map_str_dbl &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Get cross-section info as map_str_dbl (for simple printing) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/getxsec.cpp" line="1539" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/getxsec.cpp" bodystart="1539" bodyend="1566"/>
      </memberdef>
      <memberdef kind="function" id="getxsec_8cpp_1aad4e3ff084fbc1311ee20d8dcd3d495c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::getPIDPairCrossSectionsInfo</definition>
        <argsstring>(map_str_dbl &amp;result)</argsstring>
        <name>getPIDPairCrossSectionsInfo</name>
        <qualifiedname>Gambit::ColliderBit::getPIDPairCrossSectionsInfo</qualifiedname>
        <param>
          <type>map_str_dbl &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Output PID pair cross-sections as a str-dbl map, for easy printing. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/getxsec.cpp" line="1570" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/getxsec.cpp" bodystart="1570" bodyend="1592"/>
      </memberdef>
      <memberdef kind="function" id="getxsec_8cpp_1ad018861cfbdd85115f8d16dba9106dfc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::doCrossSectionConsistencyCheck</definition>
        <argsstring>(bool &amp;result)</argsstring>
        <name>doCrossSectionConsistencyCheck</name>
        <qualifiedname>Gambit::ColliderBit::doCrossSectionConsistencyCheck</qualifiedname>
        <param>
          <type>bool &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A consistency check that ensures that if each event is weighted by a process-level cross-section from an external calculator, then the total cross-section is taken from the event generator </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/getxsec.cpp" line="1597" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/getxsec.cpp" bodystart="1597" bodyend="1615"/>
      </memberdef>
      <memberdef kind="function" id="LHC__likelihoods_8cpp_1a109db19d5c1790c312adbdf90c2b6d38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::calc_LHC_signals</definition>
        <argsstring>(map_str_dbl &amp;result)</argsstring>
        <name>calc_LHC_signals</name>
        <qualifiedname>Gambit::ColliderBit::calc_LHC_signals</qualifiedname>
        <param>
          <type>map_str_dbl &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Loop over all analyses and fill a map of predicted counts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/LHC_likelihoods.cpp" line="65" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/LHC_likelihoods.cpp" bodystart="65" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="LHC__likelihoods_8cpp_1ad707bc1f9fe1547981dcc745d710e98a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::_gsl_calc_Analysis_MinusLogLike</definition>
        <argsstring>(const size_t n, const double *unit_nuisances_dbl, void *fixedparamspack, double *fval)</argsstring>
        <name>_gsl_calc_Analysis_MinusLogLike</name>
        <qualifiedname>Gambit::ColliderBit::_gsl_calc_Analysis_MinusLogLike</qualifiedname>
        <param>
          <type>const size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>unit_nuisances_dbl</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>fixedparamspack</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>fval</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Loglike objective-function wrapper to provide the signature for GSL multimin</para>
<para><simplesect kind="note"><para>Doesn&apos;t return a full log-like: the factorial term is missing since it&apos;s expensive, fixed and cancels in DLLs </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para><simplesect kind="note"><para>We&apos;ve dropped the log(n_obs!) terms, since they&apos;re expensive and cancel in computing DLL</para>
</simplesect>
</para>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/LHC_likelihoods.cpp" line="105" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/LHC_likelihoods.cpp" bodystart="105" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="LHC__likelihoods_8cpp_1ae6f741ebfb51bd2aea978a9cb139fcce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::_gsl_calc_Analysis_MinusLogLikeGrad</definition>
        <argsstring>(const size_t n, const double *unit_nuisances_dbl, void *fixedparamspack, double *fgrad)</argsstring>
        <name>_gsl_calc_Analysis_MinusLogLikeGrad</name>
        <qualifiedname>Gambit::ColliderBit::_gsl_calc_Analysis_MinusLogLikeGrad</qualifiedname>
        <param>
          <type>const size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>unit_nuisances_dbl</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>fixedparamspack</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>fgrad</declname>
        </param>
        <briefdescription>
<para>Loglike gradient-function wrapper to provide the signature for GSL multimin. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/LHC_likelihoods.cpp" line="144" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/LHC_likelihoods.cpp" bodystart="144" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="LHC__likelihoods_8cpp_1ad79f21cd8930fae9925e7b6cb0402cc6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::_gsl_calc_Analysis_MinusLogLikeAndGrad</definition>
        <argsstring>(const size_t n, const double *unit_nuisances_dbl, void *fixedparamspack, double *fval, double *fgrad)</argsstring>
        <name>_gsl_calc_Analysis_MinusLogLikeAndGrad</name>
        <qualifiedname>Gambit::ColliderBit::_gsl_calc_Analysis_MinusLogLikeAndGrad</qualifiedname>
        <param>
          <type>const size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>unit_nuisances_dbl</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>fixedparamspack</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>fval</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>fgrad</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/LHC_likelihoods.cpp" line="175" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/LHC_likelihoods.cpp" bodystart="175" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="LHC__likelihoods_8cpp_1a8e2062e390e437a265be72d22b0535fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt; double &gt; Gambit::ColliderBit::_gsl_mkpackedarray</definition>
        <argsstring>(const Eigen::ArrayXd &amp;n_preds, const Eigen::ArrayXd &amp;n_obss, const Eigen::ArrayXd &amp;sqrtevals, const Eigen::MatrixXd &amp;evecs)</argsstring>
        <name>_gsl_mkpackedarray</name>
        <qualifiedname>Gambit::ColliderBit::_gsl_mkpackedarray</qualifiedname>
        <param>
          <type>const Eigen::ArrayXd &amp;</type>
          <declname>n_preds</declname>
        </param>
        <param>
          <type>const Eigen::ArrayXd &amp;</type>
          <declname>n_obss</declname>
        </param>
        <param>
          <type>const Eigen::ArrayXd &amp;</type>
          <declname>sqrtevals</declname>
        </param>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>evecs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/LHC_likelihoods.cpp" line="184" column="17" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/LHC_likelihoods.cpp" bodystart="184" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="LHC__likelihoods_8cpp_1ac5fbc3cb77924f2552408b92e1e6435e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gambit::ColliderBit::profile_loglike_cov</definition>
        <argsstring>(const Eigen::ArrayXd &amp;n_preds, const Eigen::ArrayXd &amp;n_obss, const Eigen::ArrayXd &amp;sqrtevals, const Eigen::MatrixXd &amp;evecs)</argsstring>
        <name>profile_loglike_cov</name>
        <qualifiedname>Gambit::ColliderBit::profile_loglike_cov</qualifiedname>
        <param>
          <type>const Eigen::ArrayXd &amp;</type>
          <declname>n_preds</declname>
        </param>
        <param>
          <type>const Eigen::ArrayXd &amp;</type>
          <declname>n_obss</declname>
        </param>
        <param>
          <type>const Eigen::ArrayXd &amp;</type>
          <declname>sqrtevals</declname>
        </param>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>evecs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the best log likelihood <simplesect kind="note"><para>Return value is missing the log(n_obs!) terms (n_SR of them) which cancel in LLR calculation </para>
</simplesect>
<xrefsect id="todo_1_todo000083"><xreftitle>Todo</xreftitle><xrefdescription><para>Pass in the cov, and compute the fixed evals, evecs, and corr matrix as fixed params in here? Via a helper function to reduce duplication </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/LHC_likelihoods.cpp" line="209" column="12" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/LHC_likelihoods.cpp" bodystart="209" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="LHC__likelihoods_8cpp_1a9e94402fd90aa9ba884624dc7674bf0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gambit::ColliderBit::marg_loglike_nulike1sr</definition>
        <argsstring>(const Eigen::ArrayXd &amp;n_preds, const Eigen::ArrayXd &amp;n_obss, const Eigen::ArrayXd &amp;sqrtevals)</argsstring>
        <name>marg_loglike_nulike1sr</name>
        <qualifiedname>Gambit::ColliderBit::marg_loglike_nulike1sr</qualifiedname>
        <param>
          <type>const Eigen::ArrayXd &amp;</type>
          <declname>n_preds</declname>
        </param>
        <param>
          <type>const Eigen::ArrayXd &amp;</type>
          <declname>n_obss</declname>
        </param>
        <param>
          <type>const Eigen::ArrayXd &amp;</type>
          <declname>sqrtevals</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/LHC_likelihoods.cpp" line="303" column="12" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/LHC_likelihoods.cpp" bodystart="303" bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="LHC__likelihoods_8cpp_1ac6ca5a53404e7386a30f556ff9894ca7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gambit::ColliderBit::marg_loglike_cov</definition>
        <argsstring>(const Eigen::ArrayXd &amp;n_preds, const Eigen::ArrayXd &amp;n_obss, const Eigen::ArrayXd &amp;sqrtevals, const Eigen::MatrixXd &amp;evecs)</argsstring>
        <name>marg_loglike_cov</name>
        <qualifiedname>Gambit::ColliderBit::marg_loglike_cov</qualifiedname>
        <param>
          <type>const Eigen::ArrayXd &amp;</type>
          <declname>n_preds</declname>
        </param>
        <param>
          <type>const Eigen::ArrayXd &amp;</type>
          <declname>n_obss</declname>
        </param>
        <param>
          <type>const Eigen::ArrayXd &amp;</type>
          <declname>sqrtevals</declname>
        </param>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>evecs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para><xrefsect id="todo_1_todo000084"><xreftitle>Todo</xreftitle><xrefdescription><para>Should also implement a check of relative difference </para>
</xrefdescription></xrefsect></para>
<para><simplesect kind="note"><para>How to correct negative rates? Discard (scales badly), set to epsilon (= discontinuous &amp; unphysical pdf), transform to log-space (distorts the pdf quite badly), or something else (skew term)? We&apos;re using the &quot;set to epsilon&quot; version for now. Ben: I would vote for &apos;discard&apos;. It can&apos;t be that inefficient, surely? Andy: For a lot of signal regions, the probability of none having a negative sample is Prod_SR p(non-negative)_SR... which <emphasis>can</emphasis> get bad.</para>
</simplesect>
</para>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/LHC_likelihoods.cpp" line="321" column="12" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/LHC_likelihoods.cpp" bodystart="321" bodyend="443"/>
      </memberdef>
      <memberdef kind="function" id="LHC__likelihoods_8cpp_1afe222480b8cb9ef3bf37262d5d6a75a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::calc_LHC_LogLikes</definition>
        <argsstring>(map_str_AnalysisLogLikes &amp;result)</argsstring>
        <name>calc_LHC_LogLikes</name>
        <qualifiedname>Gambit::ColliderBit::calc_LHC_LogLikes</qualifiedname>
        <param>
          <type><ref refid="ColliderBit__types_8hpp_1ade4399591a1439faab3ff177475b4c4a" kindref="member">map_str_AnalysisLogLikes</ref> &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Loop over all analyses and fill a map of <ref refid="structGambit_1_1ColliderBit_1_1AnalysisLogLikes" kindref="compound">AnalysisLogLikes</ref> objects. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/LHC_likelihoods.cpp" line="799" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/LHC_likelihoods.cpp" bodystart="799" bodyend="856"/>
      </memberdef>
      <memberdef kind="function" id="LHC__likelihoods_8cpp_1aae752d88dc8febc660c69c3b7497bb37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::get_LHC_LogLike_per_analysis</definition>
        <argsstring>(map_str_dbl &amp;result)</argsstring>
        <name>get_LHC_LogLike_per_analysis</name>
        <qualifiedname>Gambit::ColliderBit::get_LHC_LogLike_per_analysis</qualifiedname>
        <param>
          <type>map_str_dbl &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Extract the combined log likelihood for each analysis. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/LHC_likelihoods.cpp" line="862" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/LHC_likelihoods.cpp" bodystart="862" bodyend="879"/>
      </memberdef>
      <memberdef kind="function" id="LHC__likelihoods_8cpp_1a76ce3bab18adcf2953c4ae58698a043b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::get_LHC_LogLike_per_SR</definition>
        <argsstring>(map_str_dbl &amp;result)</argsstring>
        <name>get_LHC_LogLike_per_SR</name>
        <qualifiedname>Gambit::ColliderBit::get_LHC_LogLike_per_SR</qualifiedname>
        <param>
          <type>map_str_dbl &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Extract the log likelihood for each SR. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/LHC_likelihoods.cpp" line="883" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/LHC_likelihoods.cpp" bodystart="883" bodyend="914"/>
      </memberdef>
      <memberdef kind="function" id="LHC__likelihoods_8cpp_1aa92b67efa599b9e4f5def8ff480833f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::get_LHC_LogLike_SR_labels</definition>
        <argsstring>(map_str_str &amp;result)</argsstring>
        <name>get_LHC_LogLike_SR_labels</name>
        <qualifiedname>Gambit::ColliderBit::get_LHC_LogLike_SR_labels</qualifiedname>
        <param>
          <type>map_str_str &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Extract the labels for the SRs used in the analysis loglikes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/LHC_likelihoods.cpp" line="918" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/LHC_likelihoods.cpp" bodystart="918" bodyend="928"/>
      </memberdef>
      <memberdef kind="function" id="LHC__likelihoods_8cpp_1a88887324dcde65eec7890eddc1b942b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::get_LHC_LogLike_SR_indices</definition>
        <argsstring>(map_str_dbl &amp;result)</argsstring>
        <name>get_LHC_LogLike_SR_indices</name>
        <qualifiedname>Gambit::ColliderBit::get_LHC_LogLike_SR_indices</qualifiedname>
        <param>
          <type>map_str_dbl &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Extract the indices for the SRs used in the analysis loglikes <xrefsect id="todo_1_todo000094"><xreftitle>Todo</xreftitle><xrefdescription><para>Switch result type to map_str_int once we have implemented a printer for this type </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/LHC_likelihoods.cpp" line="933" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/LHC_likelihoods.cpp" bodystart="933" bodyend="951"/>
      </memberdef>
      <memberdef kind="function" id="LHC__likelihoods_8cpp_1a5d9da53652210cd01275f3b77f8a2206" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::calc_combined_LHC_LogLike</definition>
        <argsstring>(double &amp;result)</argsstring>
        <name>calc_combined_LHC_LogLike</name>
        <qualifiedname>Gambit::ColliderBit::calc_combined_LHC_LogLike</qualifiedname>
        <param>
          <type>double &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Compute the total likelihood combining all analyses. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/LHC_likelihoods.cpp" line="955" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/LHC_likelihoods.cpp" bodystart="955" bodyend="1049"/>
      </memberdef>
      <memberdef kind="function" id="LHC__likelihoods_8cpp_1ab31b3bf9535961fc06d86c2743109533" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::calc_LHC_LogLike_scan_guide</definition>
        <argsstring>(double &amp;result)</argsstring>
        <name>calc_LHC_LogLike_scan_guide</name>
        <qualifiedname>Gambit::ColliderBit::calc_LHC_LogLike_scan_guide</qualifiedname>
        <param>
          <type>double &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A dummy log-likelihood that helps the scanner track a given range of collider log-likelihood values </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/LHC_likelihoods.cpp" line="1054" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/LHC_likelihoods.cpp" bodystart="1054" bodyend="1076"/>
      </memberdef>
      <memberdef kind="function" id="SUSY__extras_8cpp_1a8654da78a22a57c4d358d28fd60b76c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::getNextSLHAFileNameAndContent</definition>
        <argsstring>(pair_str_SLHAstruct &amp;result)</argsstring>
        <name>getNextSLHAFileNameAndContent</name>
        <qualifiedname>Gambit::ColliderBit::getNextSLHAFileNameAndContent</qualifiedname>
        <param>
          <type><ref refid="ColliderBit__types_8hpp_1ad4d446c9a8bb65e44ade638ffbe133a0" kindref="member">pair_str_SLHAstruct</ref> &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/models/SUSY_extras.cpp" line="30" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/models/SUSY_extras.cpp" bodystart="30" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="SUSY__extras_8cpp_1a6363fd11361a2611aa3285cb075a5672" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::getAndReplaceSLHAContent</definition>
        <argsstring>(pair_str_SLHAstruct &amp;result)</argsstring>
        <name>getAndReplaceSLHAContent</name>
        <qualifiedname>Gambit::ColliderBit::getAndReplaceSLHAContent</qualifiedname>
        <param>
          <type><ref refid="ColliderBit__types_8hpp_1ad4d446c9a8bb65e44ade638ffbe133a0" kindref="member">pair_str_SLHAstruct</ref> &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para><xrefsect id="todo_1_todo000097"><xreftitle>Todo</xreftitle><xrefdescription><para>Add option to save the new SLHA content to file </para>
</xrefdescription></xrefsect></para>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/models/SUSY_extras.cpp" line="62" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/models/SUSY_extras.cpp" bodystart="62" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="SUSY__extras_8cpp_1a95400b0c3aae3bc5287310ab212291b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::getSLHAFileElements</definition>
        <argsstring>(map_str_dbl &amp;result)</argsstring>
        <name>getSLHAFileElements</name>
        <qualifiedname>Gambit::ColliderBit::getSLHAFileElements</qualifiedname>
        <param>
          <type>map_str_dbl &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/models/SUSY_extras.cpp" line="128" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/models/SUSY_extras.cpp" bodystart="128" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="SUSY__extras_8cpp_1a2959357b3e5f373c695c9695cd8c7728" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::getSLHA1Spectrum</definition>
        <argsstring>(SLHAstruct &amp;result)</argsstring>
        <name>getSLHA1Spectrum</name>
        <qualifiedname>Gambit::ColliderBit::getSLHA1Spectrum</qualifiedname>
        <param>
          <type>SLHAstruct &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/models/SUSY_extras.cpp" line="199" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/models/SUSY_extras.cpp" bodystart="199" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="SUSY__extras_8cpp_1a347e5d0f07da20505418a1190c44cdf6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::getSLHA2Spectrum</definition>
        <argsstring>(SLHAstruct &amp;result)</argsstring>
        <name>getSLHA2Spectrum</name>
        <qualifiedname>Gambit::ColliderBit::getSLHA2Spectrum</qualifiedname>
        <param>
          <type>SLHAstruct &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/models/SUSY_extras.cpp" line="235" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/models/SUSY_extras.cpp" bodystart="235" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="SUSY__extras_8cpp_1a772e2e5ffacd8972d7da55323230dc92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::calc_susy_spectrum_scan_guide</definition>
        <argsstring>(double &amp;result)</argsstring>
        <name>calc_susy_spectrum_scan_guide</name>
        <qualifiedname>Gambit::ColliderBit::calc_susy_spectrum_scan_guide</qualifiedname>
        <param>
          <type>double &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/models/SUSY_extras.cpp" line="272" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/models/SUSY_extras.cpp" bodystart="272" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="process__code__PID__pair__mapping_8cpp_1a542c460f6394282a1ac609bd0a09f247" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::getActiveProcessCodeToPIDPairsMap</definition>
        <argsstring>(multimap_int_PID_pair &amp;result)</argsstring>
        <name>getActiveProcessCodeToPIDPairsMap</name>
        <qualifiedname>Gambit::ColliderBit::getActiveProcessCodeToPIDPairsMap</qualifiedname>
        <param>
          <type>multimap_int_PID_pair &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a multimap between the active Pythia process codes and the corresponding PID pair for the two final state particles </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/process_code_PID_pair_mapping.cpp" line="33" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/process_code_PID_pair_mapping.cpp" bodystart="33" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="process__code__PID__pair__mapping_8cpp_1a1575b93a743be0a1ae18995aa3a6a2b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::getActivePIDPairs</definition>
        <argsstring>(vec_PID_pair &amp;result)</argsstring>
        <name>getActivePIDPairs</name>
        <qualifiedname>Gambit::ColliderBit::getActivePIDPairs</qualifiedname>
        <param>
          <type>vec_PID_pair &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Get a list of all the PID pairs related to active process codes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/process_code_PID_pair_mapping.cpp" line="67" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/process_code_PID_pair_mapping.cpp" bodystart="67" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="runAnalyses_8cpp_1a97fe1656985cf21a6baa16807a935d7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::runAnalyses</definition>
        <argsstring>(AnalysisDataPointers &amp;result, const str &amp;, const MCLoopInfo &amp;RunMC, const AnalysisContainer &amp;Container, const HEPUtils::Event &amp;SmearedEvent, int iteration, void(*wrapup)())</argsstring>
        <name>runAnalyses</name>
        <qualifiedname>Gambit::ColliderBit::runAnalyses</qualifiedname>
        <param>
          <type>AnalysisDataPointers &amp;</type>
          <declname>result</declname>
        </param>
        <param>
          <type>const str &amp;</type>
        </param>
        <param>
          <type>const <ref refid="structGambit_1_1ColliderBit_1_1MCLoopInfo" kindref="compound">MCLoopInfo</ref> &amp;</type>
          <declname>RunMC</declname>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1ColliderBit_1_1AnalysisContainer" kindref="compound">AnalysisContainer</ref> &amp;</type>
          <declname>Container</declname>
        </param>
        <param>
          <type>const HEPUtils::Event &amp;</type>
          <declname>SmearedEvent</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iteration</declname>
        </param>
        <param>
          <type>void(*)()</type>
          <declname>wrapup</declname>
        </param>
        <briefdescription>
<para>Run all the analyses in a given container. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/runAnalyses.cpp" line="51" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/runAnalyses.cpp" bodystart="51" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="smearEvent_8cpp_1a0317da16d18b74ee8af1ad5e16eaed66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ColliderBit::smearEvent</definition>
        <argsstring>(HEPUtils::Event &amp;result, const HEPUtils::Event &amp;HardScatteringEvent, const BaseDetector &amp;detector, const MCLoopInfo &amp;RunMC, const int iteration, const str &amp;detname)</argsstring>
        <name>smearEvent</name>
        <qualifiedname>Gambit::ColliderBit::smearEvent</qualifiedname>
        <param>
          <type>HEPUtils::Event &amp;</type>
          <declname>result</declname>
        </param>
        <param>
          <type>const HEPUtils::Event &amp;</type>
          <declname>HardScatteringEvent</declname>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1ColliderBit_1_1BaseDetector" kindref="compound">BaseDetector</ref> &amp;</type>
          <declname>detector</declname>
        </param>
        <param>
          <type>const <ref refid="structGambit_1_1ColliderBit_1_1MCLoopInfo" kindref="compound">MCLoopInfo</ref> &amp;</type>
          <declname>RunMC</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>iteration</declname>
        </param>
        <param>
          <type>const str &amp;</type>
          <declname>detname</declname>
        </param>
        <briefdescription>
<para>Smear an event. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/smearEvent.cpp" line="47" column="10" bodyfile="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/src/smearEvent.cpp" bodystart="47" bodyend="58"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="C:/Hugo/Sites/gambit_2.2_sphinx/ColliderBit/include/gambit/ColliderBit/analyses/Analysis.hpp" line="37" column="3"/>
  </compounddef>
</doxygen>
